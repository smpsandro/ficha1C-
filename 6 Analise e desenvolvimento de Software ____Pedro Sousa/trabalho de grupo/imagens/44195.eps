%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 150423_ 173285423 Militaristic ships icons.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For: ??????? ??????
%%CreationDate: 4/23/2015
%%BoundingBox: 0 0 397 391
%%HiResBoundingBox: 0 0 396.6852 390.3742
%%CropBox: 0 0 396.6852 390.3742
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">shablon 600x400</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-04-23T17:04:37+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-04-23T17:04:37+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-04-23T17:04:37+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>252</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA/AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FWKfmFqdla6V6Ny17ESsk8U9mileUKE8HaQNHuCTxIrtUdMnAMJnZiX5D63FL5bsop59SvtS1ASv&#xA;PLO7z20YhkkUGMnaMPT4iR8T9zk8o3a8J2epQXtnO7xwTxyvH/eIjqxXtuAdsqputWwJdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqD1h9STTZ5NOaFLtF&#xA;5IbhWeOgNWqFaM/ZrTfrhFdUG62eHXF/r99+UU3mHUtbdf0jZXCQaWZwPUozR8lDq7P8TUKV6UPI&#xA;dMv24qAcezw2So/kOyyeXKXWvHRY7W/cy231iOEzIEjdQInQUVmYhn5HpQAfaBy8+SMPLmk35XzT&#xA;aVr+o3clzHbCyC20srSqqtKLuDkitUeoCoJNNuOW5iCGGLYvozQNVh1XR7S9jminaWKNpmhYMokZ&#xA;AzLsTShPTMIii5gNhMMCXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FWG/mh5yvPK+hrPBprX6XXOCWYP6aQclort8D1qTsNssxQ4jza8s+EPluS41ObSrDSp7&#xA;tpbHTPV+pQlVAj9d+ctNq/E2+5zOEA4JkeSFNoQKl9vkMlwotRkCIwAkU171X+owUr7G/L63tofI&#xA;+gi2iWGOWwtpjGlSvKWJXYgsWP2m7k5r5/UXYY/pDIMgzdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdiqG1DU9P06AXF/cx2lvXiZpmCRg0J+J2oq9O+EC0E0kdv+ZfkKfUrjTo9ds/X&#xA;tghd2mRYmMnRY5WIjkI7hSadOuS4JVdMfEjdW3qn5j+R9LsWvLzWLdUUKfRV+c5DGgpAtZf+F6b9&#xA;MRAlTkiOqJXzv5OZQ6a3YvGa1kW4jZFoK/G4bim38xGDhPcnjHehLT8zPIV1d3drFrlmJbNlWTnK&#xA;qK5cVBhdiFl8DwJofownHLuQMke9kkciSRrJGeSOAysOhBFQcgzXYqxH825zB+XOuSKvI+iqAE0+&#xA;3Kif8bZZi+oNeX6S+RF1kswURNUmnTxzP4nApGSLcPGyUQcgRWp7inhkkMh8meXJPMfmiw0eO5Nm&#xA;1yz8rlRVlWONpG40I3KoRkMkqjbOEbNPpSfWvLvki00nR7yS4isWjeKDUJ6zIDCAeM0lSys3Kq/D&#xA;x7CmwzAoysudYjQQE351fllCxVtaDFevp291IPvSJsl4Mu5j40e9XX82fI5dC18Y7OaH17e/dGWC&#xA;QcijIp+2JFI3VlGxFMHhST4sUPJ+dv5YI1G1qu9KrbXbD71iIw+DLuR40e9En82PI8cky3V99USL&#xA;g0UsyNwnjkQOskJTnyXehBowI3GDwpJ8WKGX86/yxaRYxrPxOaKTbXYWp8WMXEfScThl3L40e9XP&#xA;5t+RYUm+vX/1CaCV4ZLedGaSsZI5L6Xqq6MN1ZSQRj4Uui+LFqw/OH8ub++hsbbWA1zcMI4Ve3uY&#xA;1LMaAc3iVB9JxOKQ6KMsT1ZllbYg9Y1NNL0u61GSGW4jtI2mkhgCtIVQVbiGZASBv1wgWaQTQtjM&#xA;/wCcP5b26qZdaQFgDwWKd2Ff5lSNiPpyYwy7mHix71kX5xeQriCWexvZLxbdkF0scEqPFHI4T1WS&#xA;ZYmZFZhy4Bj7Y+FJfFiuufzk/LW3fhJrSFh/vuG4l/GONsRhl3L40e9OPLHnTyz5niml0O9F2tuQ&#xA;JhwkiZS1aVWVUbenhkZRI5sozB5J3kWSQ67510LQdRgs9XkezjuYWmhvZF/0clGCtHzBJDjkDutK&#xA;d8lGBPJjKYHNJZfzs/LGMkNrVadSttdOPvWIjJ+DLuYeNHvZdpWq6fq2nw6jp063FlcAtDMtQGAJ&#xA;U7EAihFN8rIpsBtFYEuxV2Kvnv8A5yNlupfNWn2ZuZltI7BZVgRyqepJNKrNQdyqKMzNPEEOJqCb&#xA;eQywusgUTzUI3rI39cv4Q49lTKy8a+vNUmh/eN2+nBwhbbKSfH+/m6/78b+uHhC2vMDlQfrE4qAx&#xA;/eN1298eALZcYZd/9Kn7/wC7G7H548AWypSQ6mXPoXDlBtV5ZK1+g4OBNqb2urupV5eSnqplkIP3&#xA;nHgW1L9FXv8ALH/wT/1w8JQsk0+6jALIpr/K7fxOClWpDdRsHRCrDoyyEHw6g40tqpfVDsXl/wCR&#xA;zf1wcKbWgagpqpcHxEp/rjS23XUuPHlJxG3H1mp+vHhW1UJcLElOZZgfUX1ioG/T7sPCi23+uMoD&#xA;eo3iDcHHhTbXG6AAUP4kfWCKEHbHhRbnF4wHLm3sbgmmPCm3D64KUDim4pcHauPCtri1/XZpSKD/&#xA;AI+T4Y8K25mvgfhaUig/4+G603x4Vtr6vyPJ3k5ndvjJ3PXfDwot31YD/dkn/BnHhC2tW3ugzGJX&#xA;YV2b1iuDhW1QJqYrRZRXc0uD1x4fJNt8dU8Jf+khseHyW2impkUKykeH1g48PkttLBfjYRyAHrSc&#xA;9+uPCi0aLZgKfWJx/wA9W/rh4AtlMNE8r61rl8tjpS3d1cNuVSR6KP5nYniq+5wSEQLLKIJ5PsDR&#xA;LGSw0WwsZX9SW0toYHfryaOMITU+NM1xO7sAKCNwJeBf85E6D5om8wWOq6dpzXWnCyS3luFoQkqz&#xA;SNxYVBFRIKHvmTizRhHc00z088kwIAyPk8Zn0TzdLJz+ozJtQKoFP14nWY/5wbP5I1X8ySl/h7zd&#xA;Sn1OenyGP5vH/OCf5I1X+pyb/wAP+bt/9Dn367DH85j/AJwX+SNV/qcl6aH5uX7VjM4pQBh0/HH8&#xA;5j/nBH8kar+ZJf8AobzV/wBWyT7v7cP5zH/OC/yRqv5klKXy55jlbk+lyFunf+uD83i/nBP8kar+&#xA;ZJZ/hbX/APq1Sfj/AFx/N4u8L/JGq/mSd/hbX/8Aq1Sfj/XH83i7wv8AJGq/mSXx+XPMUdeOlSb0&#xA;rWp6b+OP5vF3hf5I1X8yS/8AQXmb/q1P3/Z8evfH85j/AJwR/JGq/mSd+gvM/X9FP2/Z8OnfH85j&#xA;/nBf5I1X8yTv0D5mpT9FNShH2ex3PfH85j/nBf5I1X8yTv0H5nrX9FvWta8e9KeOP5zH/OC/yRqv&#xA;5kkyt/KuuzwK8tlwchgVYrXfptyFPlj+ew/zvvbR2HqyL4Ptj+tV/wAH6vWv1VeqnqvYf6+P57D/&#xA;ADvsKf5C1n8z/ZR/W0fJ2scafVV+yw6rTc1/nx/PYf532Ff5C1n8z/ZR/Wu/whq/Ov1UU5cuq1px&#xA;p/P1x/PYf532Ff5C1n8z/ZR/WsPk3WDGV+r8CUC8kKgg+3xnbH89h/nfYV/kLWfzP9lH9aG/wHrv&#xA;jJ/wSf8ANeD87h/nfev8hav+Z/so/rd/gPXfGT/gk/5rx/O4f533r/IWr/mf7KP63f4D13xk/wCC&#xA;T/mvH87h/nfev8hav+Z/so/rd/gPXfGT/gk/5rx/O4f533r/ACFq/wCZ/so/rbHkTXx0aQf7Jf8A&#xA;mvH87h/nfev8hav+Z/so/rb/AMDeYP5pP+CX/mvH87h/nfev8hav+Z/so/rd/gbzB/NJ/wAEv/Ne&#xA;P53D/O+9f5C1f8z/AGUf1omz8o67bhuSPLy/mdNv+GOEa7D/ADvvX+QtX/M/2Uf1oj/Dmtf8sx/4&#xA;JP8AmrD+fw/zvvR/IOs/mf7KP61W28r6rLcxRzR+hE7qsk7FWCKTQuVUljxG9Bidfh/nfekdg6v+&#xA;Z9sf1vpDyNP5D0u0i0XQJ09Qirs6Oks7gbs7Oqcm9u3bbMP8zGZ5t+TszNhjco0PgfuZfknEdiqV&#xA;6/5c0/XYIoL1pRHCxdRE/D4iKb7GuQnjEubl6TWTwEmFWe951H+Umuf4pIe9X/DnqGQMCPW9PqIq&#xA;U+125V9/bKPy0b8noz7QY/A2j++r4X3/ALGU/wDKrPLH81z/AMjf+bcn+Wh3Oq/l3Uf0fkhdT/KT&#xA;R57VksL25s7nqkrFZVr4MhAqPkRgOmg24faDLGVzjGUfk8j1jy9570vUZrKW1uJjEaLNBC0kbr2Z&#xA;WVehyo4AOj12n1ulywEhKIvoTRQX1Lzt/wAsN7/0jP8A80YPBHc3eNpv50P9MP1u+pedv+WG9/6R&#xA;n/5ox8Edy+Npv50P9MP1u+pedv8Alhvf+kZ/+aMfBHcvjab+dD/TD9bvqXnb/lhvf+kZ/wDmjHwR&#xA;3L42m/nQ/wBMP1u+pedv+WG9/wCkZ/8AmjHwR3L42m/nQ/0w/W76l52/5Yb3/pGf/mjHwR3L42m/&#xA;nQ/0w/W76l52/wCWG9/6Rn/5ox8Edy+Npv50P9MP1u+pedv+WG9/6Rn/AOaMfBHcvjab+dD/AEw/&#xA;W76l52/5Yb3/AKRn/wCaMfBHcvjab+dD/TD9bvqXnb/lhvf+kZ/+aMfBHcvjab+dD/TD9bvqXnb/&#xA;AJYb3/pGf/mjHwR3L42m/nQ/0w/W76l52/5Yb3/pGf8A5ox8Edy+Npv50P8ATD9bvqXnb/lhvf8A&#xA;pGf/AJox8Edy+Npv50P9MP1u+pedv+WG9/6Rn/5ox8Edy+Npv50P9MP1u+pedv8Alhvf+kZ/+aMf&#xA;BHcvjab+dD/TD9bvqXnb/lhvf+kZ/wDmjHwR3L42m/nQ/wBMP1u+pedv+WG9/wCkZ/8AmjHwR3L4&#xA;2m/nQ/0w/W76l52/5Yb3/pGf/mjHwR3L42m/nQ/0w/W76l52/wCWG9/6Rn/5ox8Edy+Npv50P9MP&#xA;1u+pedv+WG9/6Rn/AOaMfBHcvjab+dD/AEw/W76l52/5Yb3/AKRn/wCaMfBHcvjab+dD/TD9bvqX&#xA;nb/lhvf+kZ/+aMfBHcvjab+dD/TD9bvqXnb/AJYb3/pGf/mjHwR3L42m/nQ/0w/W76l52/5Yb3/p&#xA;Gf8A5ox8Edy+Npv50P8ATD9aceVPL/nq/wBdskFrdW8STRvNcyxNEiIrBieTKu9BsBvko4RfJxNd&#xA;rNLDFL1RJo0Abt9F5mPnDsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQVtrFhc6jdadDIWu7MKZ04kABxUUJFDkjAgWxEw&#xA;SR1CNyLJ2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVDahBbyQM87SrHCC5MUskRoBU/3TIThCCxLyPrs&#xA;Wn+V9G0/UROL4xmOUPVijLK0dG5Go+z0HTLZwskhphkAABZtlLe7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FWpHSNGkc8UQFmY9gNzirGtG/MLQNX1RNNtFnE0oYxu6AIeALEVDE/ZBO4y6eCURZaIaiMjQZNl&#xA;LewH85Ht38vWtnKAxnuQ4WpB4xo1SKU7sMydLG5OJrJVEMI8j6r5F0LWbS6u7m3s7qJXWZ5HPJeS&#xA;MBUEnqD+OZOeNxoc3HwTAkCXpU35q/l3A/CfXrWJyAwV2Kmh6GhGYXgy7nO8eHeiNO/MbyLqV9DY&#xA;WGt2txeXBpBbo9XYkcth8t8BxSAtIyxO1sjytsdirsVdirsVdirsVdirsVdirsVWzQxTRPFMiyRS&#xA;Aq8bgMrA9QQdiMVeB/mDdrba75kgsI7eG3i4RoiwWxoyWyPUM3xxVlchqUr2Ncy8Y2DhZeZp6/5I&#xA;1u+1jQYLu9tjbTMAQvoSW0ZUiq+msrM5Wn7W1fDMecaLlY5EhU1vW5rBrqeNeaWVjeXDQk0DvAsM&#xA;ib0qNpCMEY2spUnSOroroaqwBU+IO4yLNvFXYq7FXYq7FXYq7FXYq7FWN/mDd69Z+WZ7rRXgjmiI&#xA;a5a4UsPq9CH4AftVI69q5ZiAMqLVmkRGw8h/KKdH892Q9QMSk9BWp/umzLz/AEuDpvrD6CzAdm8P&#xA;/wCcgvOX6L1nStNFr9YK2z3JIfhT1ZOHg3++czdLsCXA1e5AeUP54tJN3sHqepqtfvqMyeLycTh8&#xA;1KTzZpc8gabTiTShdkic0HTdqnBaa80+0P8AM7SNN1Gxmt/LsLTWrxlLgMkUjcKD9mJuPLp1xkLF&#xA;M4Soh7/5Z/MBtbtLNzprWt1dElo3nQxxruVLSEIxLbUVYyanw3zByacxFufDOJGmWpLG7OqMGaNu&#xA;MgH7LFQ1D/sWByhvXYq7FXYq7FXYq7FXYqwf83/N935b8p3E1nb3rXMyH072zRTHblXjFZ5WDCMP&#xA;zovwmu/TrluKNlqzT4Qkflf8ztVv/wAm73zMsNNS0pGty87+r6rxKlZW4rF15/Z+8nJSxjjphHKT&#xA;C+5jn5Y/ntq+p+Y7fR/MLxyQXzelBciMRukzUEa/BRSrH4fs1qa1oMsy4ABYa8WoJNFhGqfmrNLq&#xA;2ptaQxTWd3eTz273ERMqpJIWSjc/gIUgfDTLhiFBqObcpzZ/nB5lj0qz036/JawWtm8BaGCJpDLG&#xA;jLb/ABswoPscz7HbfIHALtmMxqmU67+dHlW/h1BIba9BurK8to+UcQo9xFCiE0lO1YjXIRwSDZLM&#xA;Cz/8tvOuneZ9CT6osyT6ekNveCYAVl9MElSGbkPc5RlgYluxTEgy3K2x2KuxV2KuxV2KuxV2KuxV&#xA;gP53eZrjy95DnuoIUnNzNHaurkgBZAxJFO/w5ZiB4tmMpQA9YJj5Gj86l9zyHy55w/R6W2o2Gjaf&#xA;BfNbhVueNy0g9SOjMKz8AxB6hRmScU5c5fZ+1rjqNJE7Y5/8rB/1TTdvzU86ma7lS7SM3bo/AKzL&#xA;EEBHGEO78Q3KrfIZEac94+X7WR1un/mZP+Vkf+qTEvNl7P5kuUu9bnEl4qLFHcfYYRoSwQCvGlXP&#xA;bLYwkNhXy/a1Sz6aRswyf8rI/wDVJIk8tae+6XDsB1oVP6hhqfePl+1HiaX/AFPJ/wArI/8AVJMB&#xA;o+l8afVIulK/vK/8Tw+vvHy/ajxNJ/Myf8rI/wDVJCQ6DY2lxFceuytE6yIHK8SVNQO2Cp94+X7U&#xA;+Jpf9Tyf8rI/9UmRWuuXKTxzQtC7RMrgUJFVNRWje2E8fePl+1AnpB/k8n/KyP8A1SZaPzg82rJc&#xA;yJHZo90SzlY5fhYxpGGUGUiqiIUrXvmP+WPf9n7XJ/Paf/U5/wDKyP8A1TVLD85fNVtPcSzxwXYn&#xA;NVjfmqxirMFjAPQc6b1NAN8B058lGr03dkH+lP6mrT86POI+sLfJazRywskPoI0DxyEiknItKGoK&#xA;7UHz2xOA932/sUZ9Of45/wCkH/VT9DIfLn55fXLuPTr/AEuS41GVyEi00GVuB6ExElvh7mtPllc8&#xA;RDZE4Zcp7/1Zfot6vlTFSuLu2t/S9eVIvWcRRc2C8pGrxRa9SadMaQTSrilBa3dXNpo99dWqLJcw&#xA;QSSQox4qWRCRU0bw8MIG6JHZ836v+bHmXzN5P1DTtUWKj3NsvOP4CYyJHKlAPiHKJTWuZ0cQErDh&#xA;SymUaLDbbULeC3mtLm8ntrZ42ZIIQWR5NqKy8lG/jlpDSZU55PKo5CK+uVIMYSQW6gjkfjYfvP2B&#xA;uMd2PEEtNv5XSRVfWb0As4LC3Bogrwb+9/ap0wG0bKTNoC25ddWvWnEIdYjDRTL3jLep0H81MbKb&#xA;ULMxPOiXd5cQ27H95MlZGUUPRKrXf3wlAKcWGp6TpzM8OuakiyLKWiWIopdTSKtJf2l+7In3MhKm&#xA;feRfzl0zysmoEy3espcrAY4Z6xlXUsH4sWlA2YV23plc8XF5NsM/D5voqbWtMh0j9MSTqunektwL&#xA;jcgxuAVIpueVRTMIRN05xkAL6POvMf54WVtcwRaHbreQup9a6n5xqjEkABAOTcftH7hmRHTnq4s9&#xA;WAdmceVPM2m6/p7XFleLePE3C4ZY2h4sdwBG5LAU6bn55TOBid3Ix5BIbJ1kGx2KuJCgsxoBuSeg&#xA;GKpbd+ZNBtIzJPfwqg2JVg9PmF5HJCBPRgckR1Y//wArX8sTavDpOmJc6teTkLGtlGrL4mrSPGAA&#xA;Nyeg75PwTVnZr/MRJobvPvzL/MzRdZmOn6Zqtr9TtuRSb1Y6PPQrz3P2VrQeO+XY9PEx9TA63Jjn&#xA;ePb4frYVaa9YJFxudVtZJKn4hLEBTsO2S/KYe77SzPa+q/nf7EfqV/8AEOj/APVxtv8AkbH/AFw/&#xA;lMPd9pR/K+q/nf7GP6mj5g0Y9dQtT/z1j/rj+Uw932lf5X1f87/Yj9Th5g0YdNQtR/z1j/rj+Uw9&#xA;32lf5X1f87/Yx/U3/iHR/wDq423/ACNj/rj+Uw932lf5X1X87/Yx/UtfzFooHxahbH5SRn9Rx/KY&#xA;e77Sv8r6v+d9kf1IOTzHp63aumqW6223KMFSTQGvQH2wflMPd9pT/K+qr6vsj+p0vnny9Ht9b5nw&#xA;SNz+PGmP5XD3fev8q6v+d9kf1Jdc/mVpyVFvbyzEdC3FFP0/EfwyJ02H+b9pZDtTVfz/ALI/qY/q&#xA;3nvVL+J4Viigiam4Xk+xr9o/0wxwxibjt8Swy63LkjUyJf5sb+dW+jf+cd/McGs+TJlFhbWV3YT/&#xA;AFa5e0hSBZ6IrJI6oFHOjUb7++UZhRZYTYep5U3MA/NzWo9OtNIXk8c4vBeQSooej2oBAKFkqCZB&#xA;Xf8AXl+CN242pnQDHdH/ADlazgnS+E+oSyEGCR0ijEYEaqRxU/ECyluvemWHT20x1Vc92Bapr3mL&#xA;Urq4nn816oi3JYvbwq0UAVtuCxLchQtNqffloxgdA1nOT1LHR5b0xQQupXAB6gWydv8Anvk92HGE&#xA;JceTdPnkLvq9x4AfVE2H/SRjuxJCPh8uaFFCkQu7ghBSpt1qff8Av/fHdjsuby9oDGrXMxPvbp/1&#xA;Xx3XZr/Dnl//AH/L/wBIyf8AVfHddl36B0P/AJap/wDpHX/qvjutBpvL+gt9q5mNOlbdP+q+O67N&#xA;roGhL9m5nHyt1/6r47rQVk03TkUKuoXQUCgX0RSny9f2xop+KvHa6Yu5u5ye5Fugr8/32O6KCf6Z&#xA;5ktNN8u6ppNpcXUU2ptFW8REVkSM/EoUSV+MEivIZCULIPc2xyVEgdUhAsU6zXsx95REPwEn68lw&#xA;tdoyw8wXemT+vpvO2moV9X1pmah6g/GF/wCFxMAeaRMjkgtS8/atdXrQXV/PJcAD4q8a7dOQ36YR&#xA;ADopnI8ylM13eXkoVmaR3NFXdiSeg8Tiw5von8rfy+j8saWLq8RW1u8UG4bqYUO4hU+37dOp8QBm&#xA;DlycR8nZ6fDwCzzYlL/zin+Xbyu8eo6xBGzFlhjuIOCAmoVecDNQdqknB4pZ+DFZ/wBCo/l//wBX&#xA;bW/+ki2/7JsfFKPBi7/oVH8v/wDq7a3/ANJFt/2TY+KV8GLv+hUfy/8A+rtrf/SRbf8AZNj4pXwY&#xA;u/6FR/L/AP6u2t/9JFt/2TY+KV8GLv8AoVH8v/8Aq7a3/wBJFt/2TY+KV8GLv+hUfy//AOrtrf8A&#xA;0kW3/ZNj4pXwYu/6FR/L/wD6u2t/9JFt/wBk2PilfBi7/oVH8v8A/q7a3/0kW3/ZNj4pXwYu/wCh&#xA;Ufy//wCrtrf/AEkW3/ZNj4pXwYu/6FR/L/8A6u2tf9JFt/2TY+KV8GL03yZ5M0HyfocejaJCYrVW&#xA;Mkju3OSWVgA0kjbVYhR2ptQbZAm22MQAnmBLy38+dKe50vS7zlwjtppI3YtxA9ZVIrsT/urHxzjG&#xA;wt2HZvZeLWTMJmQoWK/a8em0R4ZI43u4BJIqutLhGADdnK1CN4q1CO+D8/Pu/HzdvH2S0xBIll28&#xA;h+rf4KTaeVYqbyOo8JCR94GP8oS7mY9jtOf4sn2fqW/Uf+XxP+DP/NOP8oS7l/0G6f8AnZP9j+p3&#xA;1H/l8T/gz/zTj/KEu5f9Bun/AJ2T/Y/qd9R/5fE/4M/804/yhLuX/Qbp/wCdk/2P6nfUf+XxP+DP&#xA;/NOP8oS7l/0G6f8AnZP9j+p31H/l8T/gz/zTj/KEu5f9Bun/AJ2T/Y/qd9R/5fE/4M/804/yhLuX&#xA;/Qbp/wCdk/2P6nfUf+XxP+DP/NOP8oS7l/0G6f8AnZP9j+p31H/l8T/gz/zTj/KEu5f9Bun/AJ2T&#xA;/Y/qd9RPa8j/AODb+mP8oS7l/wBBun/nZP8AY/qb+pP/AMtqf8G39Mf5Ql3L/oO0/wDOyf7H9Tvq&#xA;T/8ALan/AAbf0x/lCXcv+g7T/wA7J/sf1O+pP/y2p/wbf0x/lCXcv+g7T/zsn+x/U19Sb/ltT/g2&#xA;/pj/AChLuX/Qdp/52T/Y/qUzpEBcObiEuBQNU1p/wOP8oS7l/wBBun/nZP8AY/qehfkt5c0i480P&#xA;dXc8U1xYxetZ225rJyp6u4p+7/WQe2SjqpTFVTq+1PZ/HpIxnDjlv1qh8nvmB1LsVdirsVdirsVd&#xA;irsVdirsVdirsVQNrrFpdane6dGsoubARmcvFIkZEoJXhIwCv9k/ZOGkWjsCUJqmk6bqtobPUbdL&#xA;m2YhjFIKiqmoOAi23BnnilxQPDJExxpFGscahY0AVFHQACgGFrJJNlL7ryz5bu5PUutKs7iT+eW3&#xA;idvvZTgoORDW5oCozkB5SKj/AIN8of8AVj0//pFg/wCaMeEM/wCUdR/qk/8ATH9bv8G+UP8Aqx6f&#xA;/wBIsH/NGPCF/lHUf6pP/TH9bv8ABvlD/qx6f/0iwf8ANGPCF/lHUf6pP/TH9bv8G+UP+rHp/wD0&#xA;iwf80Y8IX+UdR/qk/wDTH9bv8G+UP+rHp/8A0iwf80Y8IX+UdR/qk/8ATH9bv8G+UP8Aqx6f/wBI&#xA;sH/NGPCF/lHUf6pP/TH9bv8ABvlD/qx6f/0iwf8ANGPCF/lHUf6pP/TH9bv8G+UP+rHp/wD0iwf8&#xA;0Y8IX+UdR/qk/wDTH9bv8G+UP+rHp/8A0iwf80Y8IX+UdR/qk/8ATH9bv8G+UP8Aqx6f/wBIsH/N&#xA;GPCF/lHUf6pP/TH9bv8ABvlD/qx6f/0iwf8ANGPCF/lHUf6pP/TH9bv8G+UP+rHp/wD0iwf80Y8I&#xA;X+UdR/qk/wDTH9bv8G+UP+rHp/8A0iwf80Y8IX+UdR/qk/8ATH9bv8G+UP8Aqx6f/wBIsH/NGPCF&#xA;/lHUf6pP/TH9aKsNB0PTpGl0/TrWzkccXe3hjiYjrQlANsQA1ZdVlyCpylIeZJR2FodirsVdirsV&#xA;dirsVdirsVdirsVSTWvOGi6VYyXZdr702CtbWPGefcgVEatXau+SESWJkA8r8p/mLruq/mdefU45&#xA;TpGpSQEJ9SeR/q0f7oMZBNxjCM55vQiuWygBFpjMmT2/KHIaLKDQkV8PnireKuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVRnvbK3YJcXEcLMjyhZHVSUioZHoS&#xA;PhTkOR7Y0tpfoOr2Pmby5BfxhTa6hCfUiSTnx5Aq6F0puOhwkUWINh4Vr35X2Xl46rdy3DzNay2Y&#xA;s7V45/SEblELSTxIAVYFvslCOJ+1l4nbjnHTJ/y20iW6k1u+sSYtcspLcwSz8jKaLIGguD8EZDLs&#xA;ViIUfD3GRmWcBzeq6ZrFvfWLXIBiaIH6xCftRsBUjoD+HzANRlRDcCwS5/M3yfca3BLFdOUnNgsZ&#xA;9KQVIkuD3X/LGXeDKmrxY2gLT827jT/Pl5oerG3fTptVls4rhJeckA4KsQZBsE5L8Z/ZYsD0xOK4&#xA;2EDLUqL1DUNRtLCD1rliAx4RxqC0kjkEhI0WrOxp0GUgNxNInAl2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVSu7qC0tpbq4cRwQoZJHPQKoqTiBakvkHzF+ZnnLU9WuZJL&#xA;+cQyGeKGKi8Eguv7yJSf2SqgfRmwGMDo685CVnlX8zfMvlJYX013ktrb1THp80jm0JmFKtDG614m&#xA;rfPBOAKwyGL3n8yZItR0XRdXgklT6y8cd3bW1wkZZXhe4jD8qCX0mQ0jpVgzAUJzFhsacue4BYXo&#xA;v5r6J+X2o3+n3+n38jXQieGMCOPgqGRafV5JOduDWvpMSw6kmtcmcZk1jIIo3SvzWi1KDzDewE2N&#xA;5HFPPbiVE9Nkl5+jE4VmqdgGO1JKHcO9TLFVKMt28MTzHr6SQSKF5W5jaP4R1hJK1+85kbuNbOPM&#xA;Xm69HmC61TTVW31WZobyC5KQyRq8ttF6h9N43U1DPUEVqQailDXHFs2SybrNO/Nf8yE8w2moahrI&#xA;uViZFnT6tbcjb8w0qR/ugELqKErQnap2GE4BVKM0rfUeg6za63o1nqtqGWC8jEqI9OS16qaEioO2&#xA;Yco0ac2MrFo/IpdirsVdirsVdirsVdirsVdirsVcSB1xVRtb21uldreQOEYo1Kj4l69f14AQWc8Z&#xA;jzVsLB2KuxV2KofULwWVnLdGGW4EQr6NuhklappRUHXrhAtBNMJ8rfm/pfmPXptGs9KvhPC5WRys&#xA;RESqeLNcDmPTo21Piy2WGhdhrjlBNUzm8uo7S0nupK+nBG0r068UUsf1ZSG0vMH/AOcj/wAvVdFW&#xA;Z3DNRmWOaijf4jyjBpt2BOXeCWnx4rIv+ckfIMgG8yOa0QpITWlafChG526/hvj4BR44S/8AMP8A&#xA;N7yBr/kHU9Ns79m1C7RFitWt7gVKzKftmMJuFrucljxSEkZMsTGnzs3BKyIgdiaBApFACQDUjvmW&#xA;4i6O6kZ+LxhAa8STSpHQb+NMbVN9N80X1lZvYxWoktpZkuJIn4kmSNHjUhgQ6kLK26kHImILISIU&#xA;NZlF7eRXcsMcciIqiONQq0WrfEermvVmJJwiICCbSn9LbUFui/6u36seJFNpqhZ1X0huQOp748S0&#xA;3+l2jf4Yh0B6nuAceJad+mpOfP0l5fM48S0+rPyA1Oe//LWyaUAehPcRRgfyiQv393OYWb6nOwfS&#xA;9GyptQmr6tY6RplzqV8/p2lqhklcAk0HYAdSTsMMRZoIJoWxWz/OT8ubq39Y6utuAeLLPHJGQ2+1&#xA;SvE9K7E5YcMh0axmj3oyL80vy6lXkvmGyArT45Qh+5qHB4Uu5Pix71CT83/y1jXk2v2xH+TzY/cq&#xA;k4+DLuR48O9Cy/nh+VsbcW1xSSK/Db3Tj71iIw+BPuR+Yh3szsb2G+s4byAOIbhBJGJEaN+LCoqj&#xA;hWXbsRlZFNoNq+BLsVdirsVSrzPa/XNGnsxePYPccVW6jbi60YMeJqOoFMSLb9Nl8OYlw8ddDySX&#xA;yp5eOlXMUja3cah8LIUnk5huR26k7jAI11crV63xhXhRh7gy/C652KvFf+cgfOuseW9X8tPZtNHC&#xA;kjXZ9OR40maB0rE/EhWWhFQa9em+ZGGIINuPnkQRTySH84vM0Oiz6Yl5eh5pWlF19akLqGoCnxcm&#xA;40H8wy7gjdtHiSqkt1v8xtZ1nStMsL6R7g6YZ/SuJm5uwnKEgk/F8PDapOSiACSGMpEikgfU3duR&#xA;qD/k7DJ8TWYlb+kX/mf78eNHCXfpF/F/+Cx414S79Iv4v/wWPGvCWv0jJ4t/wRx414S79IyeLf8A&#xA;BHHjTwl36Rk8W/4I48a8Jd+kZfFv+COPGvCWjfyHrU/7I48a8Pmt+un+X8f7MeJeHzb+ut/L+OPE&#xA;vD5tfXX8PxwcS8Lvrjfy/jjxLwo+y82eYLGH0LLULq1gqW9KGeSNKnqeKkDASD0SAR1V/wDHXm//&#xA;AKvN/wD9JU3/ADVjt3J37ysk87ea5Y2il1a9eNwVdGuZipB2IILbjHbuXfvKV/W2/lGS42PA19bf&#xA;+UYONeB31t/AY8a8D3T8hPyol1CSLzb5gtwLGMh9JtHBBldSCLhgf91r+wP2jv0HxUZs3QOTgwdS&#xA;+isxHMdiry7zv+aPlY6t/h2LXZdNv7G5BuvStppCzRDl6fNSi8a/a616ZbGBq2ieQXTN/K/mzSPM&#xA;drLNp03q/V2CT/A0fxEVqFbehyEo02xladZFkwn8yvJt15pSxt4r1bSK1LyOrIX5s9Ap2ZacQD9+&#xA;RlDidv2T2rHRmRMeIyrrSSaJ+V15pq2rJqaGS2cSIwiI3D8x+1kRjpzNR7QRy3cNpDv/AGPUQaiu&#xA;WPOOxV5p+elgzaDY6miq7Wc5iZXRXASdd2+IH9qNR9OU5o2HofZwQlllCYBsX8v7WN2/5Xyz+VLH&#xA;WIVe5vr2JZRZwW1sQPUQvGWaR4qJ0qRU79Mh4O3MudPX4I6iWMwgIxNWb6c+QO6AT8tvMJt0Z9Mn&#xA;FwV/eRiztCgbwDm6UsPfiMj4J7y5B1ujv/J17z/1T/Sh5vy786L/AHOhCTwMkVun/EZnx8E95+bZ&#xA;HV9n9TD5H/iVIfl/59H/AEzkR+Yh/wCa8Hgy7z82X5rs7+dH5f8AHXN5C89qpY+WoiB4LET9wcnH&#xA;wZd5+aRqezj/ABR+X/HUqutP1y1k9O58vNE/8r2rj7tsj4Uu8uVDDo5C4mB/0qkItQ76FX5W7D/j&#xA;XB4cu8s/yum74f7FsR31d9BNP+MDf804+HLvKPyum74f7Fd6d5/1YG/5Et/zRg8OXeV/K6bvh/sW&#xA;+Fz/ANS+/wDyKP8A1Tx8KXeUfldP3w+xsJP38vuPlCT/AMaYPCn3lfyun74fY36cn/Vgk/5EH/mj&#xA;Hw595R+V0/fD7F3pn/qwy/8ASP8A824+HPvX8rg78f2NiIU30Kav/MP/AGYPDn3o/K4O/H9jYiTv&#xA;oc4/6Nv7MfDyd6/lsHfj+xv0Yf8AqyXH/SKMfDyd/wB6Py2Hvx/Yu+rwf9Web/pF/sweHk70flsP&#xA;+1/Y2La3P/SomHztT/zTjwZO9fy+H/a/sU5/0ZbgG4sGhU9Gkt+I/EYODJ3so6PHLkIH5KX13y7/&#xA;AL6j/wCRQ/pg4cnf9rP+Tx/Nj8gnnkqw8t615msdPeKJkkZneMxAcljQyFdwPtcaZZihMyFk173A&#xA;7SwDDglMRF+4ddn0FFFFFEkUSLHFGoWONQFVVUUAAGwAGbF4RdirsVYT5h8sedp9ea70fUNPi0yQ&#xA;Bmt7i0DzK9KNSQdQTvv8ssjIVu1Sgb2ZD5c03UbGxKalPFPeOxLvBGIkC9FUDqfmcjI2ziKTXIsn&#xA;j3nzyX+Yuseaby905GWwbglsFuUjHFEArx5ilWqcqlGRL1/ZfaGiw4Ixn9fX0319ynpvkX8wobKO&#xA;KZH9ReXL/SUPViRvzwCJZZu09GZEiq/q/sep+W4dQg0Ozg1FeN5EnCQcg2ykhfiBIPwgZaOTy+sl&#xA;CWWRh9JTLC4zsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVaeNJEKSKHRhRlYVBH&#xA;uDikEg2GKar+VnkfUpDLJpq28p6vbM0I/wCAU8P+FyBgC7XB25qsYoTsee/7VLSfyn8oaXqVvqNr&#xA;HOLm2cSRFpmI5DpUClcRABnn7d1GWBhIipeTMcm6Z2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KrZJYo15SOqKTQFiAK/TiqGutW020ktori4SN71glqpP8AeMaA&#xA;Bf8AghhESUEgIh54Y2CvIqM32QxAJ+VcFJX4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q83uPNn5iN5juRF5Um+oWjSxWs/1yJUnTnxWRouOxZQGFTt9+T8Mc7YjPIAxoe/q9GjbnGr0K8gD&#xA;xPUVHQ5BkuxV2KuxV2KuxV2KuxV2KuxV2KvB/wA6vNo1LVv0HbSl7GzIFwKrx+soTUoacgVDcTQ+&#xA;I+efp8dCy4eedmmE3fm7X7sWAnuiw0wKtgo4KIghQrxCgDb0l+7LhjA+LUZkrNe84+ZNTkt9Qvbk&#xA;XN1p55W7OkZpU16BRXcd8Y44gbInkJ3fSXkPzNB5l8qafqsbcpZIwl0u1VnQcZAaf5W49iM12SHD&#xA;KnPxz4o2noliMpiDqZQORjqOQB7060ytmuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kpb5l1C70&#xA;7y9qV9ZQPc3lvbSyWtvEjSO8qofTUIoJNWphiLKJGg8J0Hz9+ec9zIt7o1zHGEqpOmzJ8VR3K5kG&#xA;MXFjKT2zyVqWq6j5dtrjVrd7bUQXS4jkjaI1VjxIVqGhSmUSFFyYGwnmRZNMwVSzGgHXFUv0jVZb&#xA;71xNbNamOV1hD8v3kYNFfdVpy60xDdmxxjVS4tvt7kxxaXYq7FXYq7FVC8vrOyg9e7mSCHkqepIQ&#xA;q8nPFRU+JNMIFoJpi/5ied7by/oDvazI+pXVYrNVYEqafFIev2AfvpluHFxHfk15cnCHzX6N403q&#xA;S3XqCpLAoKmvXeubKnBaaIkMEXiR9lmNQd/Ab4qshdTG0citWT4SVRgKHbviEIvSde8x6JA9tpGq&#xA;XFjC785IonIQtSnKgpvQDISxg82UZEclaPzb5xj1FtRGtXP1x0EbzczyKAg8dz02weFGqpPHK7t9&#xA;O+WvMun6zoNjqSzRqbmJWkQuKrINnU7/ALLAjNdOBBpz4yBFu03zbo+o65faLbNI17p4U3NUIQcw&#xA;CtH6HkNx4jEwIFqJgmkfqeqadpdo15qFwltbIQGlkNBU9APE/LIxiSaCSQOaIjkjljWSNg8bgMjq&#xA;QVZSKggjqDgS71ovV9HmvrFefp1HLjWnKnWlcVXYq7FXYq7FXYq7FXYq7FXYqwH85fzDufJPl21v&#xA;LOGK4vby5EEcM3LjwCM7t8JU7EKPpyzHDiLVlnQeXeX/APnIjzPqFzJFLptkgROQK+rWtQO75acQ&#xA;aI5S9T/LTz/deZbi+tbyGKCaBElhEXL4lJKvXkT0PHKpwpvxytnmVtrGPzEtRP5eLvNfQw28qyyt&#xA;ptPXK0K7gkErVqmmRlydj2XMxy0BAkivXy/tYj5ThtLi8sUtbzW3dZA4N0KLRG5H1Kn7O2CPxdlr&#xA;pTiJcUcP+b+h6rk3nHYqxzzV+YnkzypPBB5g1NLGa5VngQpLIWVTQn92j038clGJPJjKQHNKrH87&#xA;fytvrpLW21+JppK8A0U8Y+EFj8Txqo2Hc4TjIQJgsU/Mv89rTSLy1sPL17ayvJH601037xfiZlWN&#xA;V23+Gp+jLcOOJ3LXlyEcnmP5nfnevnCCx0+3hns7O1Ie4+GvrXBBXnsdkUVp898sxxES05JmQee/&#xA;pyCleVx0r9hvGnjl3iBq4UTb3huFZo5JaKafFRfwLYRK0ELzcMJBH6r8yKgcl6f8HhtadJcNGhd5&#xA;XCj3U/qbG1pQ/SkP+/pPuP8AXBxrTv0pD/v6T7j/AFx41p36Uh/39J9x/rjxrSY+XvOFxoOtWmr2&#xA;U7/WbSQOqsCVYUoyNv0ZSVORkQRRZRsG3pH5h/n7ovmjy7+i7TTp7WZpVlM8hR+HFSPgpuCeVK+F&#xA;R3ynFj4Tdt2TLxClPUf+cgUl8oadounxXOnXtqkUdzd27CMOsScaJxIZeRox+7JRxgSs7oOU8NBM&#xA;vKX/ADkX5f0bSFt77T7u71B3d7u+LqXlJY8SzOS3wpRfoyGTHZ25MoZaG6E8z/8AOUF1LdL+g4Tb&#xA;2RRVkST0xMD1cq5Eqg9h8PvjHFEDfmssxvZRT/nK+6t7dILTy/CgUk1kuZZSakliSUUliTUknI+E&#xA;O9PjHuQ03/OW3mct+50WyVfBzKx+8Ov6sHhBfGLK/wAqvze/NX8wNdFtHp+m2mjWjK+p6gkNxVUr&#xA;/dRlpnX1HHSo26/OMoxDKE5SL3bKm92KuxV2KuxVD3enafehReW0VyEqUEyLJSvWnIGmNoIQ6+Xt&#xA;AXddMtB8oIx/xrhsrwhEW2m6dauZLW1hgcjiWijVCR1pVQMbWgiMCXYq4ADoKYq7FXYq8n/Pv8sx&#xA;5r0+z1aORo5NGjuGuPT48mgKhz9rrw9M0HvickojZydJpcWfIITkY3sPeXilj+S0l7or61BNcHTk&#xA;do2ld7aM8lFSFWSRC3sBue2R/M5Kug7bJ7P6eGXwjkPH/VJ+4KB/KSAQpL9an4uvJRzteVKV3T1e&#xA;Sn2Irg/M5O4M/wDQ1huvEl/pT+pDP+WmnIaNdXtfaJGH3qSMH5rJ3BtHspjP+UWn8udJVSz3l6ij&#xA;qWhAGD83k7gn/QnD/VPuWp5G0Ndl1a6UHrRAP1HH85k7gn/QhH+efsXf4E0Lly/TFzyHRuG+P5zJ&#xA;3L/oQH84/YuPkPQXWja1ckeBQn+GD87k/m/aj/QiP5x+xaPy98uk0/TE/wBMdP4YPzmT+av+hEfz&#xA;pfYu/wCVd+Xv+rxN/wAAMfzuT+av+hIfzpfY3/yrjy//ANXmX/gVx/O5P5qP9CY/nS+QbH5baAem&#xA;syfSFH68H57J/NX/AEJx/nS+Tf8AyrTQf+ry/wDwn9cfz0/5qP8AQpH+dL5Lv+VY6F/1em++P+uP&#xA;5+f81H+hSP8AOl8nf8qt0Nt/0ux9/wB3/XB+fn/NX/QrH+dL5Nj8qtEJoNWcn5R/1x/Pz/mr/oWj&#xA;/Ol8m/8AlU+jf9XST7k/rg/lCX81H+heH86XyR+i/kfY6tqltp8Gpyh7hqcuKHioHJmpUV4qCcnD&#xA;XSkapx9T7P4sOMzMpbeT6k8oeUtE8p6Db6Lo8IitYBV3NDJLIQOcsrftO1N/uFAAMyCbdFGIApOc&#xA;CXYq7FXYq7FXYq7FXYq7FXYqg7bWdKuYVmhuo2jeV4EYsF5SRytCyANQk+ohX3OExKBIIm4nit4J&#xA;LiZuMMKNJI1CaKoqTQVPQYEkrLK8gvbWO6t25QyjkjEEVHyOEikA2qSxRyxvFIoeORSrowqCpFCC&#xA;PfAyjIg2Oajp+m2GnWq2thbx21spJWGJQqgsanYeJwAM8uaeSXFMmUvNEYWt2KuxVL7zy55evZPU&#xA;vNLtLmT+eaCKQ/eynBQcjHq80BUZyj7iQh/8G+UP+rHp/wD0iwf80Y8IbP5R1H+qT/0x/W7/AAb5&#xA;Q/6sen/9IsH/ADRjwhf5R1H+qT/0x/W7/BvlD/qx6f8A9IsH/NGPCF/lHUf6pP8A0x/W7/BvlD/q&#xA;x6f/ANIsH/NGPCF/lHUf6pP/AEx/W7/BvlD/AKsen/8ASLB/zRjwhf5R1H+qT/0x/W7/AAb5Q/6s&#xA;en/9IsH/ADRjwhf5R1H+qT/0x/W7/BvlD/qx6f8A9IsH/NGPCF/lHUf6pP8A0x/W7/BvlD/qx6f/&#xA;ANIsH/NGPCF/lHUf6pP/AEx/W7/BvlD/AKsen/8ASLB/zRjwhf5R1H+qT/0x/W7/AAb5Q/6sen/9&#xA;IsH/ADRjwhf5R1H+qT/0x/WkOtfk/wCStSJeO2fT5T+3aNwH/AMHT7gMicYLn6f2g1WPYnjH9L9f&#xA;NBeXvya03RNatdVg1O5aS1fmicUWtQQVYgdCDQ4Bjot2r9oZ5sRxmEal73oeWPPOxV2KuxVA6lr+&#xA;haWyJqeo2ti8oJjW5mjhLAdSodlrkowlLkLasmeEPqkI+80rWGpadqNv9Z0+6hvLckr61vIsqch1&#xA;HJCRUYJRINFlDJGYuJBHkiMDN2KuxV2KvL/zl/MXXPK9xplpozxxy3CSS3DyIJDxUhUADbDflmXp&#xA;tKMoNkj3ftt1PaPastLKIjGMr/ncX+9MXix8760Z4Z19NZbeR5YWUP8AC7zm5Ygcqf3zF8zBoB/O&#xA;l9n6nVy9opnlixD/AE/6Zoy5/NLzvcq6S6lIY5FKyRhnClSKEEcqbjEdnwHU/j4MZe0eY/w4x8D+&#xA;mT1D8hPNOtat+lbK/nM1vaLC9sp34cy4YAnenwjbMXV6eOMCurs+yu0cmoMuMRHDXIU9dzCdy7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXy7/wA5Rsw8/wCngEgfoqHb/o5u&#xA;MysB2cLURBl8EV/zjP5rtdN1TWLDUbuK1s57dJxNcSLGoeF+IUM5A+zKxyeaJlEVvRcfDOGLIbIi&#xA;JD3bj+37Hs9/+b35d2VQ+rpM46LbpJNX/ZIpX8cqjpMh6NmTtbTx/iv3WWP3n/OQvk6KotrS9uWH&#xA;Q8I40PXuz8v+Fy4aCfUhxJ9v4RyEj+Pek9z/AM5Iwg0ttBZh2eS5Ap/sVjP68n/J5rm0j2hjxAGJ&#xA;Eb3PM17tr91j3oC9/wCckNV9CtnokJm8JJmpT2oo3yB0E+8ff+pzf5d0gqvEl33GMftE5/7l555j&#xA;/Ne81zUFvtY0UTzxp6UfJxwVAS1APSp1Y79cxzpM4FcZHuFfpdpj7U7PmRLwITP9KXF9hj+hLx+Y&#xA;tsBQaGgHgJB/1Syg6HIf4z+Pi7CPbumGwwQH+l/4lsfmNCTQaGpPtIP+qWP8n5P55/HxSfaDTjng&#xA;h8x/xLIPJ/5s3+hag11ZaIkMcwC3SNKFEirWmwjBqK7HMnF2flPOZI8/7XT6z2h0IB4cMYzPWFfo&#xA;EQfmzr/oZC4/6sif8jz/AM05d+Qn5fP9jhS7c0fQ5f8AlXH/AKqu/wChkLj/AKsif8jz/wA04/kJ&#xA;+Xz/AGL/AC5o755a/wCFx/6q+78Dff8AQyFx/wBWRP8Akef+acfyE/L5/sSO3NH1ll/5Vx/6qrP+&#xA;hkb3/qxRf9JDf9U8u/k4d7q/9EMv5n2/sd/0Mje/9WKL/pIb/qnj/Jw71/0Qy/mfb+x3/QyN7/1Y&#xA;ov8ApIb/AKp4/wAnDvX/AEQy/mfb+xTf/nJm5RiraElR4TSH9UWROhiP4vsbo9t5JCxAf6YKx/5y&#xA;PvlQSNoUXDatLk13PgIycqjp8ZNCRv8Aql2eeesxYvFnihwD/bYHn5Ak/Y9I8h/mHo3nG0ke0Vre&#xA;9t6fWrKQgsoboysPtqadfvGU59PLGd+SdD2hDUDbaQ5hlOUOc7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;WJfmX5j8weW/LV1relpaPDZorTrciRn+JwnwBCoP2u5y3CIE1K3F1UsojePh+N/ofL3m38w38161&#xA;FrGrQQvdwW62sarF+79NXeQfA7MCayHM4Y8VUOJ1Qz6wGyMZ+aV3HmN1ThBDBDUAqzW6bV32FKdM&#xA;jKA6Sn8y5OHJIg+Jiwk+UAh/0/qRrSS29v8AR4sjwH+dL5ls4of6lj/0kf1KkWvaiJOTC2kXf4Pq&#xA;8Y/EYfDP86XzK+Jj/wBSxf6SP6mm1vVCxKm3UEkhfq0ZoD0G/hj4Z/nS+ZR4mP8A1LF/pI/qa/TW&#xA;rb/Fb+3+jR4+Gf50vmV8TH/qWL/SR/Uvl13UnI9NbaPahpbod/HfHwj/ADpfMp8TH/qWL/SR/UsO&#xA;tatv8Vv7f6NHj4cv50vmUeJj/wBSxf6SP6lz6xeSQlJIrZ334yeggpX2G2PhH+dL5so54Dljxj/N&#xA;CG+u3n8tt3/4908KYPB8z82X5kfzIf6UK1tq19A9eNsyHqn1dBXw39sIxH+dL5sTngeePGffENXG&#xA;qX00hYrbAdFX6uhoKYnEf50vmozxHLHjHuiFL67eeFt/0jp4YPB8yy/Mj+ZD/ShGw65cRRhRb21e&#xA;rH0V3Pc4fCP86XzYnPA88WI++Aak1qSRuT2lqWpSvpD54+D/AEpfNI1ERyx4x/mrP0r0/wBDtdun&#xA;7of1x8H+lL5svzQ/mY/9Kqx6/PGgRLa1CjoPRXHwj/Ol82BzwO5xYj/mBd/iK6/5Z7b/AJErh8I/&#xA;zpfNHi4/9Sxf6QPQfyI1nU7r8x7SCGGNYfQuGvTBHxIhEZpzK9F9Xh170ynNCo7ykfeW7DkiZenH&#xA;CPnGNF9PZiOY7FXYq7FXYq7FXYq7FXYq7FXYq7FWFfnP9X/5Vjr31jn6PpR8vTpy/vkpSu3XJ4/q&#xA;DXl+kvkFP8Oc15/XOFRy4+lWnelczN3C2faFx/gH/DOm/pH9H/oD6vF+jv0h6Po+j6a+nx9f4fsU&#xA;zDHFeznHhoXVPMvMX/Qrf1uT659T9ehr+jvrfp1/yfqf7nLB4jSfDt5hqv8AyoD999S/xJ6nFvR4&#xA;fVPS50PGvqfvONeuW+vyafR5/YwO9/R/qt9R9f0a/B63HlT347ZY1If4vfFLvi98Vd8Xvirvi98V&#xA;d8Xvirvi98Vd8Xvirvi98Vd8Xvirvi98Vd8Xvirvi98Vd8XetMVfTv8Azjf/AIA/Q11+hfV/xHxT&#xA;9L/W+Pq8f2fR4/D6PKvT4q/b/ZzGzX8HL09fF7NlDkOxV2KuxV2KuxV2KuxV2KuxV2KuxV//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:ebc86be7-bdd5-114f-931b-d9e7b7ac12d1</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:ebc86be7-bdd5-114f-931b-d9e7b7ac12d1</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:bccc8959-5644-7547-a41f-77d6f7685386</stRef:instanceID>
            <stRef:documentID>xmp.did:bccc8959-5644-7547-a41f-77d6f7685386</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d016339e-7c47-184f-992b-9230ff59afcb</stEvt:instanceID>
                  <stEvt:when>2015-03-29T08:29:17+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ebc86be7-bdd5-114f-931b-d9e7b7ac12d1</stEvt:instanceID>
                  <stEvt:when>2015-04-23T17:04:37+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Áåëûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>×åðíûé</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -390.374 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 390.374 li
396.685 390.374 li
396.685 0 li
cp
clp
24.2978 389.422 mo
24.2331 389.587 24.0054 389.72 23.7886 389.72 cv
10.1812 389.72 li
9.9644 389.72 9.7887 389.587 9.7887 389.422 cv
9.7887 378.198 li
9.7887 377.915 10.0219 377.683 10.3097 377.683 cv
28.3704 377.683 li
28.6582 377.683 28.8006 377.915 28.6897 378.198 cv
24.2978 389.422 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.145098 .258824 .329412 rgb
f
33.4682 374.131 mo
33.8845 375.9 32.7043 377.402 30.8126 377.402 cv
20.5366 377.402 li
18.6448 377.402 17.1112 379.733 17.1112 377.964 cv
17.1112 360.241 li
17.1112 359.158 18.2425 358.31 19.6381 358.31 cv
27.2188 358.31 li
28.6143 358.31 29.9451 359.158 30.2001 360.241 cv
33.4682 374.131 li
cp
f
19.0064 359.574 mo
26.587 359.574 li
27.9826 359.574 29.3134 360.421 29.5683 361.505 cv
32.8365 375.394 li
32.9338 375.808 32.9407 376.206 32.8748 376.575 cv
33.4472 375.969 33.694 375.091 33.4682 374.131 cv
30.2 360.241 li
29.9451 359.158 28.6143 358.31 27.2188 358.31 cv
19.6381 358.31 li
18.2507 358.31 17.1255 359.148 17.1124 360.223 cv
17.5755 359.823 18.2513 359.574 19.0064 359.574 cv
cp
0 .501961 .588235 rgb
f
102.148 352.274 mo
102.148 352.739 101.771 353.116 101.306 353.116 cv
100.841 353.116 100.464 352.739 100.464 352.274 cv
100.464 345.254 li
100.464 344.789 100.841 344.412 101.306 344.412 cv
101.771 344.412 102.148 344.789 102.148 345.254 cv
102.148 352.274 li
cp
.160784 .317647 .415686 rgb
f
106.395 354.379 mo
106.395 354.845 106.018 355.222 105.552 355.222 cv
105.087 355.222 104.71 354.845 104.71 354.379 cv
104.71 347.36 li
104.71 346.895 105.087 346.518 105.552 346.518 cv
106.018 346.518 106.395 346.895 106.395 347.36 cv
106.395 354.379 li
cp
f
109.483 353.677 mo
109.483 354.143 109.106 354.52 108.641 354.52 cv
108.176 354.52 107.799 354.143 107.799 353.677 cv
107.799 346.658 li
107.799 346.193 108.176 345.816 108.641 345.816 cv
109.106 345.816 109.483 346.193 109.483 346.658 cv
109.483 353.677 li
cp
f
123.57 351.45 mo
123.57 351.651 123.407 351.814 123.206 351.814 cv
123.004 351.814 122.841 351.651 122.841 351.45 cv
122.841 344.464 li
122.841 344.263 123.004 344.1 123.206 344.1 cv
123.407 344.1 123.57 344.263 123.57 344.464 cv
123.57 351.45 li
cp
f
125.675 351.134 mo
125.675 351.335 125.512 351.498 125.311 351.498 cv
125.11 351.498 124.947 351.335 124.947 351.134 cv
124.947 344.148 li
124.947 343.947 125.11 343.784 125.311 343.784 cv
125.512 343.784 125.675 343.947 125.675 344.148 cv
125.675 351.134 li
cp
f
130.26 362.383 mo
130.26 363.848 129.039 365.048 127.54 365.048 cv
93.5803 365.048 li
92.2812 365.048 91.4041 363.939 91.6127 362.583 cv
93.1361 352.681 li
93.3265 351.443 94.4716 350.418 95.7011 350.381 cv
127.708 349.404 li
129.114 349.361 130.26 350.392 130.26 351.72 cv
130.26 362.383 li
cp
0 .501961 .588235 rgb
f
244.23 377.885 mo
244.23 384.783 238.639 390.374 231.741 390.374 cv
77.1721 390.374 li
70.2747 390.374 17.8097 384.783 17.8097 377.885 cv
17.8097 370.988 70.2747 365.397 77.1721 365.397 cv
231.741 365.397 li
238.639 365.397 244.23 370.988 244.23 377.885 cv
cp
f
81.8313 365.397 mo
84.7823 368.816 92.038 371.235 100.528 371.235 cv
116.098 371.235 li
124.588 371.235 131.844 368.816 134.795 365.397 cv
81.8313 365.397 li
cp
.145098 .258824 .329412 rgb
f
22.9955 374.063 mo
20.8962 374.85 19.3267 375.671 18.4941 376.518 cv
244.154 376.518 li
244.062 375.671 243.882 374.85 243.629 374.063 cv
22.9955 374.063 li
cp
.94902 .45098 .427451 rgb
f
133.736 365.397 mo
133.502 362.529 129.042 360.579 121.453 360.579 cv
106.007 360.579 li
98.42 360.579 89.7025 362.53 83.1924 365.397 cv
133.736 365.397 li
cp
f
19.3808 375.8 mo
18.3741 376.478 17.8097 377.175 17.8097 377.885 cv
17.8097 384.783 70.2747 390.374 77.1721 390.374 cv
231.741 390.374 li
238.639 390.374 244.23 384.783 244.23 377.885 cv
244.23 377.174 244.168 376.478 244.054 375.8 cv
19.3808 375.8 li
cp
.160784 .317647 .415686 rgb
f
129.899 350.507 mo
129.453 349.819 128.639 349.375 127.708 349.404 cv
95.7011 350.381 li
94.7927 350.409 93.933 350.977 93.4677 351.77 cv
129.899 350.507 li
cp
.94902 .45098 .427451 rgb
f
234.439 370.24 mo
234.439 370.472 234.25 370.661 234.018 370.661 cv
214.235 370.661 li
214.002 370.661 213.813 370.472 213.813 370.24 cv
213.813 369.72 li
213.813 369.487 214.002 369.299 214.235 369.299 cv
234.018 369.299 li
234.25 369.299 234.439 369.487 234.439 369.72 cv
234.439 370.24 li
cp
.145098 .258824 .329412 rgb
f
232.273 370.694 mo
232.273 370.927 232.084 371.116 231.851 371.116 cv
224.38 371.116 li
224.147 371.116 223.959 370.927 223.959 370.694 cv
223.959 369.253 li
223.959 369.021 224.147 368.832 224.38 368.832 cv
231.851 368.832 li
232.084 368.832 232.273 369.021 232.273 369.253 cv
232.273 370.694 li
cp
.894118 .207843 .360784 rgb
f
210.406 373.542 mo
210.406 373.699 210.534 373.827 210.691 373.827 cv
213.546 373.827 li
213.704 373.827 213.832 373.699 213.832 373.542 cv
213.832 372.828 li
213.832 372.67 213.704 372.542 213.546 372.542 cv
210.691 372.542 li
210.534 372.542 210.406 372.67 210.406 372.828 cv
210.406 373.542 li
cp
.145098 .258824 .329412 rgb
f
206.428 373.542 mo
206.428 373.699 206.556 373.827 206.713 373.827 cv
209.568 373.827 li
209.726 373.827 209.854 373.699 209.854 373.542 cv
209.854 372.828 li
209.854 372.67 209.726 372.542 209.568 372.542 cv
206.713 372.542 li
206.556 372.542 206.428 372.67 206.428 372.828 cv
206.428 373.542 li
cp
f
202.45 373.542 mo
202.45 373.699 202.578 373.827 202.735 373.827 cv
205.59 373.827 li
205.748 373.827 205.876 373.699 205.876 373.542 cv
205.876 372.828 li
205.876 372.67 205.748 372.542 205.59 372.542 cv
202.735 372.542 li
202.578 372.542 202.45 372.67 202.45 372.828 cv
202.45 373.542 li
cp
f
198.472 373.542 mo
198.472 373.699 198.6 373.827 198.757 373.827 cv
201.612 373.827 li
201.77 373.827 201.898 373.699 201.898 373.542 cv
201.898 372.828 li
201.898 372.67 201.77 372.542 201.612 372.542 cv
198.757 372.542 li
198.6 372.542 198.472 372.67 198.472 372.828 cv
198.472 373.542 li
cp
f
194.494 373.542 mo
194.494 373.699 194.621 373.827 194.779 373.827 cv
197.634 373.827 li
197.792 373.827 197.919 373.699 197.919 373.542 cv
197.919 372.828 li
197.919 372.67 197.792 372.542 197.634 372.542 cv
194.779 372.542 li
194.621 372.542 194.494 372.67 194.494 372.828 cv
194.494 373.542 li
cp
f
190.516 373.542 mo
190.516 373.699 190.643 373.827 190.801 373.827 cv
193.656 373.827 li
193.814 373.827 193.941 373.699 193.941 373.542 cv
193.941 372.828 li
193.941 372.67 193.814 372.542 193.656 372.542 cv
190.801 372.542 li
190.643 372.542 190.516 372.67 190.516 372.828 cv
190.516 373.542 li
cp
f
174.425 373.542 mo
174.425 373.699 174.553 373.827 174.711 373.827 cv
177.566 373.827 li
177.723 373.827 177.851 373.699 177.851 373.542 cv
177.851 372.828 li
177.851 372.67 177.723 372.542 177.566 372.542 cv
174.711 372.542 li
174.553 372.542 174.425 372.67 174.425 372.828 cv
174.425 373.542 li
cp
f
170.447 373.542 mo
170.447 373.699 170.575 373.827 170.733 373.827 cv
173.588 373.827 li
173.745 373.827 173.873 373.699 173.873 373.542 cv
173.873 372.828 li
173.873 372.67 173.745 372.542 173.588 372.542 cv
170.733 372.542 li
170.575 372.542 170.447 372.67 170.447 372.828 cv
170.447 373.542 li
cp
f
166.469 373.542 mo
166.469 373.699 166.597 373.827 166.755 373.827 cv
169.61 373.827 li
169.767 373.827 169.895 373.699 169.895 373.542 cv
169.895 372.828 li
169.895 372.67 169.767 372.542 169.61 372.542 cv
166.755 372.542 li
166.597 372.542 166.469 372.67 166.469 372.828 cv
166.469 373.542 li
cp
f
162.491 373.542 mo
162.491 373.699 162.619 373.827 162.777 373.827 cv
165.632 373.827 li
165.789 373.827 165.917 373.699 165.917 373.542 cv
165.917 372.828 li
165.917 372.67 165.789 372.542 165.632 372.542 cv
162.777 372.542 li
162.619 372.542 162.491 372.67 162.491 372.828 cv
162.491 373.542 li
cp
f
158.513 373.542 mo
158.513 373.699 158.641 373.827 158.799 373.827 cv
161.654 373.827 li
161.811 373.827 161.939 373.699 161.939 373.542 cv
161.939 372.828 li
161.939 372.67 161.811 372.542 161.654 372.542 cv
158.799 372.542 li
158.641 372.542 158.513 372.67 158.513 372.828 cv
158.513 373.542 li
cp
f
154.535 373.542 mo
154.535 373.699 154.663 373.827 154.821 373.827 cv
157.675 373.827 li
157.833 373.827 157.961 373.699 157.961 373.542 cv
157.961 372.828 li
157.961 372.67 157.833 372.542 157.675 372.542 cv
154.821 372.542 li
154.663 372.542 154.535 372.67 154.535 372.828 cv
154.535 373.542 li
cp
f
138.445 373.542 mo
138.445 373.699 138.573 373.827 138.73 373.827 cv
141.585 373.827 li
141.743 373.827 141.871 373.699 141.871 373.542 cv
141.871 372.828 li
141.871 372.67 141.743 372.542 141.585 372.542 cv
138.73 372.542 li
138.573 372.542 138.445 372.67 138.445 372.828 cv
138.445 373.542 li
cp
f
134.467 373.542 mo
134.467 373.699 134.594 373.827 134.752 373.827 cv
137.607 373.827 li
137.765 373.827 137.893 373.699 137.893 373.542 cv
137.893 372.828 li
137.893 372.67 137.765 372.542 137.607 372.542 cv
134.752 372.542 li
134.594 372.542 134.467 372.67 134.467 372.828 cv
134.467 373.542 li
cp
f
130.489 373.542 mo
130.489 373.699 130.617 373.827 130.774 373.827 cv
133.629 373.827 li
133.787 373.827 133.915 373.699 133.915 373.542 cv
133.915 372.828 li
133.915 372.67 133.787 372.542 133.629 372.542 cv
130.774 372.542 li
130.617 372.542 130.489 372.67 130.489 372.828 cv
130.489 373.542 li
cp
f
126.511 373.542 mo
126.511 373.699 126.638 373.827 126.796 373.827 cv
129.651 373.827 li
129.809 373.827 129.936 373.699 129.936 373.542 cv
129.936 372.828 li
129.936 372.67 129.809 372.542 129.651 372.542 cv
126.796 372.542 li
126.638 372.542 126.511 372.67 126.511 372.828 cv
126.511 373.542 li
cp
f
122.533 373.542 mo
122.533 373.699 122.66 373.827 122.818 373.827 cv
125.673 373.827 li
125.831 373.827 125.958 373.699 125.958 373.542 cv
125.958 372.828 li
125.958 372.67 125.831 372.542 125.673 372.542 cv
122.818 372.542 li
122.66 372.542 122.533 372.67 122.533 372.828 cv
122.533 373.542 li
cp
f
118.555 373.542 mo
118.555 373.699 118.682 373.827 118.84 373.827 cv
121.695 373.827 li
121.853 373.827 121.98 373.699 121.98 373.542 cv
121.98 372.828 li
121.98 372.67 121.853 372.542 121.695 372.542 cv
118.84 372.542 li
118.682 372.542 118.555 372.67 118.555 372.828 cv
118.555 373.542 li
cp
f
171.523 377.121 mo
171.523 377.279 171.651 377.407 171.809 377.407 cv
174.663 377.407 li
174.821 377.407 174.949 377.279 174.949 377.121 cv
174.949 376.408 li
174.949 376.25 174.821 376.122 174.663 376.122 cv
171.809 376.122 li
171.651 376.122 171.523 376.25 171.523 376.408 cv
171.523 377.121 li
cp
.0862745 .176471 .219608 rgb
f
167.545 377.121 mo
167.545 377.279 167.673 377.407 167.83 377.407 cv
170.685 377.407 li
170.843 377.407 170.971 377.279 170.971 377.121 cv
170.971 376.408 li
170.971 376.25 170.843 376.122 170.685 376.122 cv
167.83 376.122 li
167.673 376.122 167.545 376.25 167.545 376.408 cv
167.545 377.121 li
cp
f
163.567 377.121 mo
163.567 377.279 163.695 377.407 163.852 377.407 cv
166.707 377.407 li
166.865 377.407 166.993 377.279 166.993 377.121 cv
166.993 376.408 li
166.993 376.25 166.865 376.122 166.707 376.122 cv
163.852 376.122 li
163.695 376.122 163.567 376.25 163.567 376.408 cv
163.567 377.121 li
cp
f
159.589 377.121 mo
159.589 377.279 159.717 377.407 159.874 377.407 cv
162.729 377.407 li
162.887 377.407 163.015 377.279 163.015 377.121 cv
163.015 376.408 li
163.015 376.25 162.887 376.122 162.729 376.122 cv
159.874 376.122 li
159.717 376.122 159.589 376.25 159.589 376.408 cv
159.589 377.121 li
cp
f
155.611 377.121 mo
155.611 377.279 155.739 377.407 155.896 377.407 cv
158.751 377.407 li
158.909 377.407 159.037 377.279 159.037 377.121 cv
159.037 376.408 li
159.037 376.25 158.909 376.122 158.751 376.122 cv
155.896 376.122 li
155.739 376.122 155.611 376.25 155.611 376.408 cv
155.611 377.121 li
cp
f
151.633 377.121 mo
151.633 377.279 151.761 377.407 151.918 377.407 cv
154.773 377.407 li
154.931 377.407 155.059 377.279 155.059 377.121 cv
155.059 376.408 li
155.059 376.25 154.931 376.122 154.773 376.122 cv
151.918 376.122 li
151.761 376.122 151.633 376.25 151.633 376.408 cv
151.633 377.121 li
cp
f
141.762 377.121 mo
141.762 377.279 141.89 377.407 142.047 377.407 cv
144.902 377.407 li
145.06 377.407 145.188 377.279 145.188 377.121 cv
145.188 376.408 li
145.188 376.25 145.06 376.122 144.902 376.122 cv
142.047 376.122 li
141.89 376.122 141.762 376.25 141.762 376.408 cv
141.762 377.121 li
cp
f
137.784 377.121 mo
137.784 377.279 137.912 377.407 138.069 377.407 cv
140.924 377.407 li
141.082 377.407 141.21 377.279 141.21 377.121 cv
141.21 376.408 li
141.21 376.25 141.082 376.122 140.924 376.122 cv
138.069 376.122 li
137.912 376.122 137.784 376.25 137.784 376.408 cv
137.784 377.121 li
cp
f
133.806 377.121 mo
133.806 377.279 133.934 377.407 134.091 377.407 cv
136.946 377.407 li
137.104 377.407 137.232 377.279 137.232 377.121 cv
137.232 376.408 li
137.232 376.25 137.104 376.122 136.946 376.122 cv
134.091 376.122 li
133.934 376.122 133.806 376.25 133.806 376.408 cv
133.806 377.121 li
cp
f
129.828 377.121 mo
129.828 377.279 129.956 377.407 130.113 377.407 cv
132.968 377.407 li
133.126 377.407 133.254 377.279 133.254 377.121 cv
133.254 376.408 li
133.254 376.25 133.126 376.122 132.968 376.122 cv
130.113 376.122 li
129.956 376.122 129.828 376.25 129.828 376.408 cv
129.828 377.121 li
cp
f
125.85 377.121 mo
125.85 377.279 125.978 377.407 126.135 377.407 cv
128.99 377.407 li
129.148 377.407 129.276 377.279 129.276 377.121 cv
129.276 376.408 li
129.276 376.25 129.148 376.122 128.99 376.122 cv
126.135 376.122 li
125.978 376.122 125.85 376.25 125.85 376.408 cv
125.85 377.121 li
cp
f
121.872 377.121 mo
121.872 377.279 122 377.407 122.157 377.407 cv
125.012 377.407 li
125.17 377.407 125.298 377.279 125.298 377.121 cv
125.298 376.408 li
125.298 376.25 125.17 376.122 125.012 376.122 cv
122.157 376.122 li
122 376.122 121.872 376.25 121.872 376.408 cv
121.872 377.121 li
cp
f
112.001 377.121 mo
112.001 377.279 112.129 377.407 112.286 377.407 cv
115.141 377.407 li
115.299 377.407 115.426 377.279 115.426 377.121 cv
115.426 376.408 li
115.426 376.25 115.299 376.122 115.141 376.122 cv
112.286 376.122 li
112.129 376.122 112.001 376.25 112.001 376.408 cv
112.001 377.121 li
cp
f
108.023 377.121 mo
108.023 377.279 108.15 377.407 108.308 377.407 cv
111.163 377.407 li
111.321 377.407 111.449 377.279 111.449 377.121 cv
111.449 376.408 li
111.449 376.25 111.321 376.122 111.163 376.122 cv
108.308 376.122 li
108.15 376.122 108.023 376.25 108.023 376.408 cv
108.023 377.121 li
cp
f
104.045 377.121 mo
104.045 377.279 104.173 377.407 104.33 377.407 cv
107.185 377.407 li
107.343 377.407 107.47 377.279 107.47 377.121 cv
107.47 376.408 li
107.47 376.25 107.343 376.122 107.185 376.122 cv
104.33 376.122 li
104.173 376.122 104.045 376.25 104.045 376.408 cv
104.045 377.121 li
cp
f
100.067 377.121 mo
100.067 377.279 100.194 377.407 100.352 377.407 cv
103.207 377.407 li
103.365 377.407 103.492 377.279 103.492 377.121 cv
103.492 376.408 li
103.492 376.25 103.365 376.122 103.207 376.122 cv
100.352 376.122 li
100.194 376.122 100.067 376.25 100.067 376.408 cv
100.067 377.121 li
cp
f
96.0886 377.121 mo
96.0886 377.279 96.2164 377.407 96.3741 377.407 cv
99.2289 377.407 li
99.3866 377.407 99.5144 377.279 99.5144 377.121 cv
99.5144 376.408 li
99.5144 376.25 99.3866 376.122 99.2289 376.122 cv
96.3741 376.122 li
96.2164 376.122 96.0886 376.25 96.0886 376.408 cv
96.0886 377.121 li
cp
f
92.1106 377.121 mo
92.1106 377.279 92.2384 377.407 92.3961 377.407 cv
95.2509 377.407 li
95.4086 377.407 95.5364 377.279 95.5364 377.121 cv
95.5364 376.408 li
95.5364 376.25 95.4086 376.122 95.2509 376.122 cv
92.3961 376.122 li
92.2384 376.122 92.1106 376.25 92.1106 376.408 cv
92.1106 377.121 li
cp
f
233.987 384.698 mo
64.9161 384.698 li
60.1738 384.698 35.74 382.422 18.2423 378.966 cv
23.232 385.357 70.639 390.374 77.1721 390.374 cv
231.741 390.374 li
237.684 390.374 242.653 386.223 243.916 380.663 cv
241.426 383.146 237.9 384.698 233.987 384.698 cv
cp
.145098 .258824 .329412 rgb
f
83.6907 377.121 mo
83.6907 377.279 83.8185 377.407 83.9761 377.407 cv
86.831 377.407 li
86.9887 377.407 87.1165 377.279 87.1165 377.121 cv
87.1165 376.408 li
87.1165 376.25 86.9887 376.122 86.831 376.122 cv
83.9761 376.122 li
83.8185 376.122 83.6907 376.25 83.6907 376.408 cv
83.6907 377.121 li
cp
.0862745 .176471 .219608 rgb
f
79.7126 377.121 mo
79.7126 377.279 79.8404 377.407 79.9981 377.407 cv
82.853 377.407 li
83.0106 377.407 83.1385 377.279 83.1385 377.121 cv
83.1385 376.408 li
83.1385 376.25 83.0106 376.122 82.853 376.122 cv
79.9981 376.122 li
79.8404 376.122 79.7126 376.25 79.7126 376.408 cv
79.7126 377.121 li
cp
f
75.7346 377.121 mo
75.7346 377.279 75.8624 377.407 76.0201 377.407 cv
78.8749 377.407 li
79.0326 377.407 79.1604 377.279 79.1604 377.121 cv
79.1604 376.408 li
79.1604 376.25 79.0326 376.122 78.875 376.122 cv
76.0201 376.122 li
75.8624 376.122 75.7346 376.25 75.7346 376.408 cv
75.7346 377.121 li
cp
f
71.7566 377.121 mo
71.7566 377.279 71.8844 377.407 72.0421 377.407 cv
74.8969 377.407 li
75.0546 377.407 75.1824 377.279 75.1824 377.121 cv
75.1824 376.408 li
75.1824 376.25 75.0546 376.122 74.8969 376.122 cv
72.0421 376.122 li
71.8844 376.122 71.7566 376.25 71.7566 376.408 cv
71.7566 377.121 li
cp
f
67.7786 377.121 mo
67.7786 377.279 67.9064 377.407 68.064 377.407 cv
70.9189 377.407 li
71.0766 377.407 71.2044 377.279 71.2044 377.121 cv
71.2044 376.408 li
71.2044 376.25 71.0766 376.122 70.9189 376.122 cv
68.064 376.122 li
67.9064 376.122 67.7786 376.25 67.7786 376.408 cv
67.7786 377.121 li
cp
f
63.8005 377.121 mo
63.8005 377.279 63.9284 377.407 64.086 377.407 cv
66.9409 377.407 li
67.0985 377.407 67.2264 377.279 67.2264 377.121 cv
67.2264 376.408 li
67.2264 376.25 67.0985 376.122 66.9409 376.122 cv
64.086 376.122 li
63.9284 376.122 63.8005 376.25 63.8005 376.408 cv
63.8005 377.121 li
cp
f
54.491 377.121 mo
54.491 377.279 54.6188 377.407 54.7765 377.407 cv
57.6314 377.407 li
57.789 377.407 57.9168 377.279 57.9168 377.121 cv
57.9168 376.408 li
57.9168 376.25 57.789 376.122 57.6314 376.122 cv
54.7765 376.122 li
54.6188 376.122 54.491 376.25 54.491 376.408 cv
54.491 377.121 li
cp
f
50.513 377.121 mo
50.513 377.279 50.6408 377.407 50.7985 377.407 cv
53.6533 377.407 li
53.811 377.407 53.9388 377.279 53.9388 377.121 cv
53.9388 376.408 li
53.9388 376.25 53.811 376.122 53.6533 376.122 cv
50.7985 376.122 li
50.6408 376.122 50.513 376.25 50.513 376.408 cv
50.513 377.121 li
cp
f
46.535 377.121 mo
46.535 377.279 46.6628 377.407 46.8205 377.407 cv
49.6753 377.407 li
49.833 377.407 49.9608 377.279 49.9608 377.121 cv
49.9608 376.408 li
49.9608 376.25 49.833 376.122 49.6753 376.122 cv
46.8205 376.122 li
46.6628 376.122 46.535 376.25 46.535 376.408 cv
46.535 377.121 li
cp
f
42.5569 377.121 mo
42.5569 377.279 42.6848 377.407 42.8424 377.407 cv
45.6973 377.407 li
45.855 377.407 45.9828 377.279 45.9828 377.121 cv
45.9828 376.408 li
45.9828 376.25 45.855 376.122 45.6973 376.122 cv
42.8424 376.122 li
42.6848 376.122 42.5569 376.25 42.5569 376.408 cv
42.5569 377.121 li
cp
f
38.5789 377.121 mo
38.5789 377.279 38.7067 377.407 38.8644 377.407 cv
41.7193 377.407 li
41.8769 377.407 42.0048 377.279 42.0048 377.121 cv
42.0048 376.408 li
42.0048 376.25 41.8769 376.122 41.7193 376.122 cv
38.8644 376.122 li
38.7067 376.122 38.5789 376.25 38.5789 376.408 cv
38.5789 377.121 li
cp
f
34.6009 377.121 mo
34.6009 377.279 34.7287 377.407 34.8864 377.407 cv
37.7412 377.407 li
37.8989 377.407 38.0267 377.279 38.0267 377.121 cv
38.0267 376.408 li
38.0267 376.25 37.8989 376.122 37.7412 376.122 cv
34.8864 376.122 li
34.7287 376.122 34.6009 376.25 34.6009 376.408 cv
34.6009 377.121 li
cp
f
29.4417 376.483 mo
11.7767 376.483 li
10.8815 376.483 4.753 377.209 4.753 378.104 cv
4.753 378.999 10.8815 379.725 11.7767 379.725 cv
29.4417 379.725 li
29.4417 376.483 li
cp
0 .501961 .588235 rgb
f
81.959 366.449 mo
81.959 366.682 81.7705 366.87 81.5379 366.87 cv
76.1741 366.87 li
75.9415 366.87 75.7529 366.682 75.7529 366.449 cv
75.7529 366.234 li
75.7529 366.001 75.9415 365.813 76.1741 365.813 cv
81.5379 365.813 li
81.7705 365.813 81.959 366.001 81.959 366.234 cv
81.959 366.449 li
cp
.894118 .207843 .360784 rgb
f
75.3993 366.484 mo
75.3993 366.717 75.2107 366.906 74.9781 366.906 cv
73.4246 366.906 li
73.192 366.906 73.0035 366.717 73.0035 366.484 cv
73.0035 366.269 li
73.0035 366.036 73.192 365.848 73.4246 365.848 cv
74.9781 365.848 li
75.2107 365.848 75.3993 366.036 75.3993 366.269 cv
75.3993 366.484 li
cp
f
144.289 366.449 mo
144.289 366.682 144.101 366.87 143.868 366.87 cv
138.504 366.87 li
138.272 366.87 138.083 366.682 138.083 366.449 cv
138.083 366.234 li
138.083 366.001 138.272 365.813 138.504 365.813 cv
143.868 365.813 li
144.101 365.813 144.289 366.001 144.289 366.234 cv
144.289 366.449 li
cp
f
137.729 366.484 mo
137.729 366.717 137.541 366.906 137.308 366.906 cv
135.755 366.906 li
135.522 366.906 135.334 366.717 135.334 366.484 cv
135.334 366.269 li
135.334 366.036 135.522 365.848 135.755 365.848 cv
137.308 365.848 li
137.541 365.848 137.729 366.036 137.729 366.269 cv
137.729 366.484 li
cp
f
153.976 366.449 mo
153.976 366.682 153.787 366.87 153.555 366.87 cv
148.191 366.87 li
147.958 366.87 147.77 366.682 147.77 366.449 cv
147.77 366.234 li
147.77 366.001 147.958 365.813 148.191 365.813 cv
153.555 365.813 li
153.787 365.813 153.976 366.001 153.976 366.234 cv
153.976 366.449 li
cp
f
147.416 366.484 mo
147.416 366.717 147.227 366.906 146.995 366.906 cv
145.441 366.906 li
145.209 366.906 145.02 366.717 145.02 366.484 cv
145.02 366.269 li
145.02 366.036 145.209 365.848 145.441 365.848 cv
146.995 365.848 li
147.227 365.848 147.416 366.036 147.416 366.269 cv
147.416 366.484 li
cp
f
163.662 366.449 mo
163.662 366.682 163.474 366.87 163.241 366.87 cv
157.877 366.87 li
157.645 366.87 157.456 366.682 157.456 366.449 cv
157.456 366.234 li
157.456 366.001 157.645 365.813 157.877 365.813 cv
163.241 365.813 li
163.474 365.813 163.662 366.001 163.662 366.234 cv
163.662 366.449 li
cp
f
157.103 366.484 mo
157.103 366.717 156.914 366.906 156.681 366.906 cv
155.128 366.906 li
154.895 366.906 154.707 366.717 154.707 366.484 cv
154.707 366.269 li
154.707 366.036 154.895 365.848 155.128 365.848 cv
156.681 365.848 li
156.914 365.848 157.103 366.036 157.103 366.269 cv
157.103 366.484 li
cp
f
173.349 366.449 mo
173.349 366.682 173.16 366.87 172.928 366.87 cv
167.564 366.87 li
167.331 366.87 167.143 366.682 167.143 366.449 cv
167.143 366.234 li
167.143 366.001 167.331 365.813 167.564 365.813 cv
172.928 365.813 li
173.16 365.813 173.349 366.001 173.349 366.234 cv
173.349 366.449 li
cp
f
166.789 366.484 mo
166.789 366.717 166.601 366.906 166.368 366.906 cv
164.814 366.906 li
164.582 366.906 164.393 366.717 164.393 366.484 cv
164.393 366.269 li
164.393 366.036 164.582 365.848 164.814 365.848 cv
166.368 365.848 li
166.601 365.848 166.789 366.036 166.789 366.269 cv
166.789 366.484 li
cp
f
131.049 21.7687 mo
131.049 22.3682 130.563 22.8541 129.964 22.8541 cv
126.165 22.8541 li
125.565 22.8541 125.079 22.3682 125.079 21.7687 cv
125.079 16.3418 li
125.079 15.7424 125.565 15.2564 126.165 15.2564 cv
129.964 15.2564 li
130.563 15.2564 131.049 15.7424 131.049 16.3418 cv
131.049 21.7687 li
cp
.145098 .258824 .329412 rgb
f
128.352 24.5765 mo
126.133 24.5765 li
126.133 20.8041 li
128.352 20.8041 li
128.352 24.5765 li
cp
f
102.354 32.8724 mo
98.5496 32.8724 li
99.5006 17.3645 li
101.403 17.3645 li
102.354 32.8724 li
cp
f
116.48 24.2766 mo
109.084 24.2766 li
111.848 1.5814 li
113.717 1.5814 li
116.48 24.2766 li
cp
f
132.89 54.7294 mo
97.1216 54.7294 li
97.1216 31.0018 li
132.89 31.0018 li
132.89 54.7294 li
cp
.27451 .392157 .501961 rgb
f
110.489 49.0972 mo
99.4516 49.0972 li
99.4516 44.9819 li
110.489 44.9819 li
110.489 49.0972 li
cp
.145098 .258824 .329412 rgb
f
122.992 36.4874 mo
122.992 43.3588 li
97.1216 43.3588 li
97.1216 50.5202 li
97.7873 50.5202 li
97.7873 43.8581 li
123.658 43.8581 li
123.658 36.9866 li
132.89 36.9866 li
132.89 36.4874 li
122.992 36.4874 li
cp
f
136.452 31.099 mo
101.169 31.099 li
101.169 28.4837 li
136.452 28.4837 li
136.452 31.099 li
cp
.231373 .34902 .447059 rgb
f
136.452 28.6874 mo
101.169 28.6874 li
101.169 27.5666 li
136.452 27.5666 li
136.452 28.6874 li
cp
.145098 .258824 .329412 rgb
f
140.329 25.1344 mo
105.496 25.1344 li
105.496 24.3291 li
140.329 24.3291 li
140.329 25.1344 li
cp
.231373 .34902 .447059 rgb
f
140.329 24.3918 mo
105.496 24.3918 li
105.496 24.0467 li
140.329 24.0467 li
140.329 24.3918 li
cp
.145098 .258824 .329412 rgb
f
138.332 27.5876 mo
105.496 27.5876 li
105.496 25.7252 li
138.332 25.7252 li
138.332 27.5876 li
cp
.231373 .34902 .447059 rgb
f
138.332 25.8703 mo
105.496 25.8703 li
105.496 25.0722 li
138.332 25.0722 li
138.332 25.8703 li
cp
.145098 .258824 .329412 rgb
f
138.711 39.9055 mo
132.458 44.9426 li
132.458 38.5159 li
138.711 38.5159 li
138.711 39.9055 li
cp
.231373 .34902 .447059 rgb
f
93.4022 31.5037 mo
97.5313 33.3419 li
97.5314 30.9967 li
93.4022 30.9966 li
93.4022 31.5037 li
cp
f
93.4022 33.279 mo
97.5313 35.1172 li
97.5314 32.7719 li
93.4022 32.7719 li
93.4022 33.279 li
cp
f
93.4022 35.0542 mo
97.5313 36.8924 li
97.5314 34.5472 li
93.4022 34.5471 li
93.4022 35.0542 li
cp
f
101.727 20.5756 mo
98.8354 20.5756 li
96.366 18.0549 li
104.197 18.0549 li
101.727 20.5756 li
cp
96.0109 17.9311 mo
98.7229 20.6992 li
101.84 20.6992 li
104.551 17.9311 li
96.0109 17.9311 li
cp
.145098 .258824 .329412 rgb
f
101.224 17.0316 mo
101.224 17.3073 101.001 17.5309 100.725 17.5309 cv
100.449 17.5309 100.226 17.3073 100.226 17.0316 cv
100.226 14.2578 li
100.226 13.982 100.449 13.7585 100.725 13.7585 cv
101.001 13.7585 101.224 13.982 101.224 14.2578 cv
101.224 17.0316 li
cp
f
108.658 3.329 mo
108.658 1.193 li
107.993 1.193 li
107.993 3.9947 li
116.48 3.9947 li
116.48 3.329 li
108.658 3.329 li
cp
f
114.373 1.5855 mo
114.373 1.8073 114.193 1.9871 113.972 1.9871 cv
110.314 1.9871 li
110.092 1.9871 109.912 1.8073 109.912 1.5855 cv
109.912 .601 li
109.912 .3793 110.092 .1995 110.314 .1995 cv
113.972 .1995 li
114.193 .1995 114.373 .3793 114.373 .601 cv
114.373 1.5855 li
cp
113.972 1.64619e-010 mo
110.314 0 li
109.982 -1.45519e-011 109.713 .2695 109.713 .6011 cv
109.713 1.5857 li
109.713 1.9172 109.982 2.1867 110.314 2.1867 cv
113.972 2.1867 li
114.303 2.1867 114.573 1.9172 114.573 1.5857 cv
114.573 .6011 li
114.573 .2695 114.303 1.7917e-010 113.972 1.64619e-010 cv
cp
f
115.898 3.7866 mo
116.314 3.7866 li
116.314 2.6216 li
115.898 2.6216 li
115.898 3.7866 li
cp
f
117.758 2.0293 mo
117.758 1.871 117.63 1.7426 117.471 1.7426 cv
114.859 1.7426 li
114.701 1.7426 114.572 1.871 114.572 2.0293 cv
114.572 2.7324 li
114.572 2.8908 114.701 3.0192 114.859 3.0192 cv
117.471 3.0192 li
117.63 3.0192 117.758 2.8908 117.758 2.7324 cv
117.758 2.0293 li
cp
.231373 .34902 .447059 rgb
f
99.255 17.6834 mo
98.9792 17.6834 98.7557 17.4599 98.7557 17.1841 cv
98.7557 16.9084 98.9792 16.6849 99.255 16.6849 cv
102.029 16.6849 li
102.305 16.6849 102.528 16.9084 102.528 17.1841 cv
102.528 17.4599 102.305 17.6834 102.029 17.6834 cv
99.255 17.6834 li
cp
.27451 .392157 .501961 rgb
f
96.1483 18.3632 mo
95.9798 18.3632 95.8432 18.2265 95.8432 18.058 cv
95.8432 17.8895 95.9798 17.7529 96.1483 17.7529 cv
99.255 17.7529 li
99.4235 17.7529 99.5601 17.8895 99.5601 18.058 cv
99.5601 18.2265 99.4235 18.3631 99.255 18.3631 cv
96.1483 18.3632 li
cp
f
120.641 9.4869 mo
104.997 9.4869 li
104.997 8.5992 li
120.641 8.5992 li
120.641 9.4869 li
cp
f
116.112 12.5603 mo
109.525 12.5603 li
105.652 9.6588 li
119.986 9.6588 li
116.112 12.5603 li
cp
105.052 9.4591 mo
109.459 12.76 li
116.179 12.76 li
120.586 9.4591 li
105.052 9.4591 li
cp
.145098 .258824 .329412 rgb
f
122.821 15.8672 mo
102.817 15.8672 li
102.817 14.7323 li
122.821 14.7323 li
122.821 15.8672 li
cp
.27451 .392157 .501961 rgb
f
117.03 19.797 mo
108.608 19.797 li
103.655 16.0871 li
121.983 16.0871 li
117.03 19.797 li
cp
102.888 15.8317 mo
108.523 20.0523 li
117.115 20.0523 li
122.75 15.8317 li
102.888 15.8317 li
cp
.145098 .258824 .329412 rgb
f
131.713 20.0827 mo
131.713 20.8436 131.096 21.4604 130.336 21.4604 cv
125.514 21.4604 li
124.753 21.4604 124.136 20.8436 124.136 20.0827 cv
124.136 13.1945 li
124.136 12.4337 124.753 11.8169 125.514 11.8169 cv
130.336 11.8169 li
131.096 11.8169 131.713 12.4337 131.713 13.1945 cv
131.713 20.0827 li
cp
.27451 .392157 .501961 rgb
f
134.81 24.3898 mo
134.81 24.5542 134.677 24.6875 134.512 24.6875 cv
134.348 24.6875 134.215 24.5542 134.215 24.3898 cv
134.215 14.4686 li
134.215 14.3043 134.348 14.171 134.512 14.171 cv
134.677 14.171 134.81 14.3043 134.81 14.4686 cv
134.81 24.3898 li
cp
.145098 .258824 .329412 rgb
f
136.825 24.4614 mo
136.825 24.5862 136.692 24.6875 136.528 24.6875 cv
136.363 24.6875 136.23 24.5862 136.23 24.4614 cv
136.23 16.9249 li
136.23 16.8001 136.363 16.6988 136.528 16.6988 cv
136.692 16.6988 136.825 16.8001 136.825 16.9249 cv
136.825 24.4614 li
cp
f
137.737 32.1672 mo
129.144 32.1672 li
129.144 29.2186 li
137.737 29.2186 li
137.737 32.1672 li
cp
.27451 .392157 .501961 rgb
f
137.737 31.6617 mo
129.144 31.6617 li
129.144 30.4823 li
137.737 30.4823 li
137.737 31.6617 li
cp
.145098 .258824 .329412 rgb
f
137.737 35.0315 mo
129.144 35.0315 li
129.144 32.0829 li
137.737 32.0829 li
137.737 35.0315 li
cp
.27451 .392157 .501961 rgb
f
137.737 34.526 mo
129.144 34.526 li
129.144 33.3466 li
137.737 33.3466 li
137.737 34.526 li
cp
.145098 .258824 .329412 rgb
f
137.737 37.8958 mo
129.144 37.8958 li
129.144 34.9473 li
137.737 34.9473 li
137.737 37.8958 li
cp
.27451 .392157 .501961 rgb
f
137.737 37.3904 mo
129.144 37.3904 li
129.144 36.2109 li
137.737 36.2109 li
137.737 37.3904 li
cp
.145098 .258824 .329412 rgb
f
361.587 65.0282 mo
356.944 69.1315 358.675 71.7762 356.469 71.7762 cv
8.87436 71.7762 li
6.66837 71.7762 4.87997 69.9879 4.87997 67.7819 cv
4.87997 53.1831 li
6.02746 52.5432 6.66837 52.7878 8.87436 52.7878 cv
372.612 52.7878 li
372.991 52.7878 373.438 55.8704 371.688 57.7558 cv
369.546 60.0621 367.378 59.9106 361.587 65.0282 cv
cp
.27451 .392157 .501961 rgb
f
364.35 71.9535 mo
13.7377 71.9535 li
10.2108 71.9535 7.33226 74.6982 7.10296 78.167 cv
14.1815 78.167 li
14.1815 79.9422 li
14.1815 81.4129 15.3737 82.6051 16.8444 82.6051 cv
19.9511 82.6051 li
21.4218 82.6051 22.614 81.4129 22.614 79.9422 cv
22.614 78.167 li
44.3549 78.167 li
45.8256 78.167 48.211 79.3591 49.6829 80.8298 cv
54.1247 85.2679 li
364.35 85.2679 li
368.027 85.2679 371.007 82.2874 371.007 78.6107 cv
371.007 74.9341 368.027 71.9535 364.35 71.9535 cv
cp
.894118 .207843 .360784 rgb
f
370.739 76.7505 mo
369.933 73.9801 367.38 71.9535 364.35 71.9535 cv
13.7377 71.9535 li
10.7083 71.9535 8.16236 73.9809 7.35767 76.7505 cv
370.739 76.7505 li
cp
.94902 .45098 .427451 rgb
f
118.921 52.7878 mo
118.921 69.7345 li
176.617 69.7345 li
176.617 52.7878 li
118.921 52.7878 li
cp
.231373 .34902 .447059 rgb
f
262.051 50.4286 mo
262.051 66.073 li
289.9 66.073 li
289.9 50.4286 li
262.051 50.4286 li
cp
f
55.4562 52.7878 mo
55.4562 69.7345 li
78.5345 69.7345 li
78.5345 52.7878 li
55.4562 52.7878 li
cp
f
22.614 65.2964 mo
17.2882 65.2964 li
17.2882 53.7572 li
22.614 53.7572 li
22.614 65.2964 li
cp
f
29.715 65.2964 mo
24.3892 65.2964 li
24.3892 53.7572 li
29.715 53.7572 li
29.715 65.2964 li
cp
f
36.816 65.2964 mo
31.4902 65.2964 li
31.4902 53.7572 li
36.816 53.7572 li
36.816 65.2964 li
cp
f
43.917 65.2964 mo
38.5913 65.2964 li
38.5913 53.7572 li
43.917 53.7572 li
43.917 65.2964 li
cp
f
51.018 65.2964 mo
45.6923 65.2964 li
45.6923 53.7572 li
51.018 53.7572 li
51.018 65.2964 li
cp
f
177.542 69.6851 mo
177.542 70.8411 176.605 71.7782 175.449 71.7782 cv
6.95455 71.7782 li
5.79855 71.7782 4.86146 70.8411 4.86146 69.6851 cv
4.86146 69.3362 li
4.86146 68.1802 5.79855 67.2431 6.95455 67.2431 cv
175.449 67.2431 li
176.605 67.2431 177.542 68.1802 177.542 69.3362 cv
177.542 69.6851 li
cp
.145098 .258824 .329412 rgb
f
119.071 64.0896 mo
119.071 64.9574 118.367 65.6609 117.499 65.6609 cv
79.6619 65.6609 li
78.7941 65.6609 78.0906 64.9574 78.0906 64.0896 cv
78.0906 63.8277 li
78.0906 62.9599 78.7941 62.2564 79.6619 62.2564 cv
117.499 62.2564 li
118.367 62.2564 119.071 62.9599 119.071 63.8277 cv
119.071 64.0896 li
cp
f
56.9367 66.3086 mo
56.9367 67.1764 56.2332 67.8799 55.3654 67.8799 cv
17.5281 67.8799 li
16.6603 67.8799 15.9568 67.1764 15.9568 66.3086 cv
15.9568 66.0468 li
15.9568 65.179 16.6603 64.4755 17.5281 64.4755 cv
55.3654 64.4755 li
56.2332 64.4755 56.9367 65.179 56.9367 66.0468 cv
56.9367 66.3086 li
cp
f
59.4505 61.302 mo
57.2314 61.302 li
57.2314 55.0887 li
59.4505 55.0887 li
59.4505 61.302 li
cp
.27451 .392157 .501961 rgb
f
63.6667 61.302 mo
61.4476 61.302 li
61.4476 55.0887 li
63.6667 55.0887 li
63.6667 61.302 li
cp
f
67.8829 61.302 mo
65.6639 61.302 li
65.6639 55.0887 li
67.8829 55.0887 li
67.8829 61.302 li
cp
f
72.0992 61.302 mo
69.8801 61.302 li
69.8801 55.0887 li
72.0992 55.0887 li
72.0992 61.302 li
cp
f
76.3154 61.302 mo
74.0963 61.302 li
74.0963 55.0887 li
76.3154 55.0887 li
76.3154 61.302 li
cp
f
176.395 58.4173 mo
118.845 58.4173 li
118.845 55.0887 li
176.395 55.0887 li
176.395 58.4173 li
cp
.145098 .258824 .329412 rgb
f
122.832 62.9007 mo
122.832 63.4855 122.358 63.9595 121.773 63.9595 cv
121.188 63.9595 120.714 63.4855 120.714 62.9007 cv
120.714 62.3159 121.188 61.8419 121.773 61.8419 cv
122.358 61.8419 122.832 62.3159 122.832 62.9007 cv
cp
f
127.643 62.9007 mo
127.643 63.4855 127.169 63.9595 126.584 63.9595 cv
126 63.9595 125.526 63.4855 125.526 62.9007 cv
125.526 62.3159 126 61.8419 126.584 61.8419 cv
127.169 61.8419 127.643 62.3159 127.643 62.9007 cv
cp
f
132.454 62.9007 mo
132.454 63.4855 131.98 63.9595 131.396 63.9595 cv
130.811 63.9595 130.337 63.4855 130.337 62.9007 cv
130.337 62.3159 130.811 61.8419 131.396 61.8419 cv
131.98 61.8419 132.454 62.3159 132.454 62.9007 cv
cp
f
137.266 62.9007 mo
137.266 63.4855 136.791 63.9595 136.207 63.9595 cv
135.622 63.9595 135.148 63.4855 135.148 62.9007 cv
135.148 62.3159 135.622 61.8419 136.207 61.8419 cv
136.791 61.8419 137.266 62.3159 137.266 62.9007 cv
cp
f
142.077 62.9007 mo
142.077 63.4855 141.603 63.9595 141.018 63.9595 cv
140.433 63.9595 139.959 63.4855 139.959 62.9007 cv
139.959 62.3159 140.433 61.8419 141.018 61.8419 cv
141.603 61.8419 142.077 62.3159 142.077 62.9007 cv
cp
f
146.888 62.9007 mo
146.888 63.4855 146.414 63.9595 145.829 63.9595 cv
145.244 63.9595 144.77 63.4855 144.77 62.9007 cv
144.77 62.3159 145.244 61.8419 145.829 61.8419 cv
146.414 61.8419 146.888 62.3159 146.888 62.9007 cv
cp
f
151.699 62.9007 mo
151.699 63.4855 151.225 63.9595 150.64 63.9595 cv
150.055 63.9595 149.581 63.4855 149.581 62.9007 cv
149.581 62.3159 150.055 61.8419 150.64 61.8419 cv
151.225 61.8419 151.699 62.3159 151.699 62.9007 cv
cp
f
156.51 62.9007 mo
156.51 63.4855 156.036 63.9595 155.451 63.9595 cv
154.867 63.9595 154.392 63.4855 154.392 62.9007 cv
154.392 62.3159 154.867 61.8419 155.451 61.8419 cv
156.036 61.8419 156.51 62.3159 156.51 62.9007 cv
cp
f
161.321 62.9007 mo
161.321 63.4855 160.847 63.9595 160.262 63.9595 cv
159.678 63.9595 159.204 63.4855 159.204 62.9007 cv
159.204 62.3159 159.678 61.8419 160.262 61.8419 cv
160.847 61.8419 161.321 62.3159 161.321 62.9007 cv
cp
f
166.132 62.9007 mo
166.132 63.4855 165.658 63.9595 165.074 63.9595 cv
164.489 63.9595 164.015 63.4855 164.015 62.9007 cv
164.015 62.3159 164.489 61.8419 165.074 61.8419 cv
165.658 61.8419 166.132 62.3159 166.132 62.9007 cv
cp
f
170.944 62.9007 mo
170.944 63.4855 170.47 63.9595 169.885 63.9595 cv
169.3 63.9595 168.826 63.4855 168.826 62.9007 cv
168.826 62.3159 169.3 61.8419 169.885 61.8419 cv
170.47 61.8419 170.944 62.3159 170.944 62.9007 cv
cp
f
181.934 67.2935 mo
181.934 67.8783 181.46 68.3523 180.876 68.3523 cv
180.291 68.3523 179.817 67.8783 179.817 67.2935 cv
179.817 66.7088 180.291 66.2347 180.876 66.2347 cv
181.46 66.2347 181.934 66.7088 181.934 67.2935 cv
cp
f
186.746 67.2935 mo
186.746 67.8783 186.272 68.3523 185.687 68.3523 cv
185.102 68.3523 184.628 67.8783 184.628 67.2935 cv
184.628 66.7088 185.102 66.2347 185.687 66.2347 cv
186.272 66.2347 186.746 66.7088 186.746 67.2935 cv
cp
f
191.557 67.2935 mo
191.557 67.8783 191.083 68.3523 190.498 68.3523 cv
189.913 68.3523 189.439 67.8783 189.439 67.2935 cv
189.439 66.7088 189.913 66.2347 190.498 66.2347 cv
191.083 66.2347 191.557 66.7088 191.557 67.2935 cv
cp
f
196.368 67.2935 mo
196.368 67.8783 195.894 68.3523 195.309 68.3523 cv
194.724 68.3523 194.25 67.8783 194.25 67.2935 cv
194.25 66.7088 194.724 66.2347 195.309 66.2347 cv
195.894 66.2347 196.368 66.7088 196.368 67.2935 cv
cp
f
201.179 67.2935 mo
201.179 67.8783 200.705 68.3523 200.12 68.3523 cv
199.535 68.3523 199.061 67.8783 199.061 67.2935 cv
199.061 66.7088 199.535 66.2347 200.12 66.2347 cv
200.705 66.2347 201.179 66.7088 201.179 67.2935 cv
cp
f
205.99 67.2935 mo
205.99 67.8783 205.516 68.3523 204.931 68.3523 cv
204.347 68.3523 203.873 67.8783 203.873 67.2935 cv
203.873 66.7088 204.347 66.2347 204.931 66.2347 cv
205.516 66.2347 205.99 66.7088 205.99 67.2935 cv
cp
f
210.801 67.2935 mo
210.801 67.8783 210.327 68.3523 209.742 68.3523 cv
209.158 68.3523 208.684 67.8783 208.684 67.2935 cv
208.684 66.7088 209.158 66.2347 209.742 66.2347 cv
210.327 66.2347 210.801 66.7088 210.801 67.2935 cv
cp
f
215.612 67.2935 mo
215.612 67.8783 215.138 68.3523 214.554 68.3523 cv
213.969 68.3523 213.495 67.8783 213.495 67.2935 cv
213.495 66.7088 213.969 66.2347 214.554 66.2347 cv
215.138 66.2347 215.612 66.7088 215.612 67.2935 cv
cp
f
220.424 67.2935 mo
220.424 67.8783 219.95 68.3523 219.365 68.3523 cv
218.78 68.3523 218.306 67.8783 218.306 67.2935 cv
218.306 66.7088 218.78 66.2347 219.365 66.2347 cv
219.95 66.2347 220.424 66.7088 220.424 67.2935 cv
cp
f
225.235 67.2935 mo
225.235 67.8783 224.761 68.3523 224.176 68.3523 cv
223.591 68.3523 223.117 67.8783 223.117 67.2935 cv
223.117 66.7088 223.591 66.2347 224.176 66.2347 cv
224.761 66.2347 225.235 66.7088 225.235 67.2935 cv
cp
f
230.046 67.2935 mo
230.046 67.8783 229.572 68.3523 228.987 68.3523 cv
228.402 68.3523 227.928 67.8783 227.928 67.2935 cv
227.928 66.7088 228.402 66.2347 228.987 66.2347 cv
229.572 66.2347 230.046 66.7088 230.046 67.2935 cv
cp
f
372.73 53.1831 mo
373.173 51.632 372.877 50.1249 372.612 50.1249 cv
8.87436 50.1249 li
6.99127 50.1249 5.41677 51.4296 4.99486 53.1831 cv
372.73 53.1831 li
cp
f
118.554 55.7544 mo
78.6604 55.7544 li
78.6604 54.4229 li
118.554 54.4229 li
118.554 55.7544 li
cp
f
118.554 57.5016 mo
78.6604 57.5016 li
78.6604 56.1701 li
118.554 56.1701 li
118.554 57.5016 li
cp
f
268.265 65.0745 mo
175.73 65.0745 li
175.73 60.4144 li
268.265 60.4144 li
268.265 65.0745 li
cp
.231373 .34902 .447059 rgb
f
190.177 58.4759 mo
179.159 58.4759 li
179.159 55.7216 li
190.177 55.7216 li
190.177 58.4759 li
cp
.145098 .258824 .329412 rgb
f
202.113 58.4759 mo
191.095 58.4759 li
191.095 55.7216 li
202.113 55.7216 li
202.113 58.4759 li
cp
f
214.048 58.4759 mo
203.031 58.4759 li
203.031 55.7216 li
214.048 55.7216 li
214.048 58.4759 li
cp
f
225.984 58.4759 mo
214.966 58.4759 li
214.966 55.7216 li
225.984 55.7216 li
225.984 58.4759 li
cp
f
237.461 58.4759 mo
226.443 58.4759 li
226.443 55.7216 li
237.461 55.7216 li
237.461 58.4759 li
cp
f
249.396 58.4759 mo
238.379 58.4759 li
238.379 55.7216 li
249.396 55.7216 li
249.396 58.4759 li
cp
f
261.791 58.4759 mo
250.774 58.4759 li
250.774 55.7216 li
261.791 55.7216 li
261.791 58.4759 li
cp
f
328.941 65.6907 mo
328.941 66.8467 328.004 67.7838 326.848 67.7838 cv
234.964 67.7838 li
233.808 67.7838 232.87 66.8467 232.87 65.6907 cv
232.87 65.3419 li
232.87 64.1859 233.808 63.2488 234.964 63.2488 cv
326.848 63.2488 li
328.004 63.2488 328.941 64.1859 328.941 65.3419 cv
328.941 65.6907 li
cp
f
347.214 57.0677 mo
347.214 57.7867 346.631 58.3696 345.912 58.3696 cv
288.761 58.3696 li
288.042 58.3696 287.459 57.7867 287.459 57.0677 cv
287.459 56.8507 li
287.459 56.1317 288.042 55.5488 288.761 55.5488 cv
345.912 55.5488 li
346.631 55.5488 347.214 56.1317 347.214 56.8507 cv
347.214 57.0677 li
cp
f
181.934 62.8554 mo
181.934 63.4402 181.46 63.9142 180.876 63.9142 cv
180.291 63.9142 179.817 63.4402 179.817 62.8554 cv
179.817 62.2706 180.291 61.7966 180.876 61.7966 cv
181.46 61.7966 181.934 62.2706 181.934 62.8554 cv
cp
f
186.746 62.8554 mo
186.746 63.4402 186.272 63.9142 185.687 63.9142 cv
185.102 63.9142 184.628 63.4402 184.628 62.8554 cv
184.628 62.2706 185.102 61.7966 185.687 61.7966 cv
186.272 61.7966 186.746 62.2706 186.746 62.8554 cv
cp
f
191.557 62.8554 mo
191.557 63.4402 191.083 63.9142 190.498 63.9142 cv
189.913 63.9142 189.439 63.4402 189.439 62.8554 cv
189.439 62.2706 189.913 61.7966 190.498 61.7966 cv
191.083 61.7966 191.557 62.2706 191.557 62.8554 cv
cp
f
196.368 62.8554 mo
196.368 63.4402 195.894 63.9142 195.309 63.9142 cv
194.724 63.9142 194.25 63.4402 194.25 62.8554 cv
194.25 62.2706 194.724 61.7966 195.309 61.7966 cv
195.894 61.7966 196.368 62.2706 196.368 62.8554 cv
cp
f
201.179 62.8554 mo
201.179 63.4402 200.705 63.9142 200.12 63.9142 cv
199.535 63.9142 199.061 63.4402 199.061 62.8554 cv
199.061 62.2706 199.535 61.7966 200.12 61.7966 cv
200.705 61.7966 201.179 62.2706 201.179 62.8554 cv
cp
f
205.99 62.8554 mo
205.99 63.4402 205.516 63.9142 204.931 63.9142 cv
204.347 63.9142 203.873 63.4402 203.873 62.8554 cv
203.873 62.2706 204.347 61.7966 204.931 61.7966 cv
205.516 61.7966 205.99 62.2706 205.99 62.8554 cv
cp
f
210.801 62.8554 mo
210.801 63.4402 210.327 63.9142 209.742 63.9142 cv
209.158 63.9142 208.684 63.4402 208.684 62.8554 cv
208.684 62.2706 209.158 61.7966 209.742 61.7966 cv
210.327 61.7966 210.801 62.2706 210.801 62.8554 cv
cp
f
215.612 62.8554 mo
215.612 63.4402 215.138 63.9142 214.554 63.9142 cv
213.969 63.9142 213.495 63.4402 213.495 62.8554 cv
213.495 62.2706 213.969 61.7966 214.554 61.7966 cv
215.138 61.7966 215.612 62.2706 215.612 62.8554 cv
cp
f
220.424 62.8554 mo
220.424 63.4402 219.95 63.9142 219.365 63.9142 cv
218.78 63.9142 218.306 63.4402 218.306 62.8554 cv
218.306 62.2706 218.78 61.7966 219.365 61.7966 cv
219.95 61.7966 220.424 62.2706 220.424 62.8554 cv
cp
f
225.235 62.8554 mo
225.235 63.4402 224.761 63.9142 224.176 63.9142 cv
223.591 63.9142 223.117 63.4402 223.117 62.8554 cv
223.117 62.2706 223.591 61.7966 224.176 61.7966 cv
224.761 61.7966 225.235 62.2706 225.235 62.8554 cv
cp
f
230.046 62.8554 mo
230.046 63.4402 229.572 63.9142 228.987 63.9142 cv
228.402 63.9142 227.928 63.4402 227.928 62.8554 cv
227.928 62.2706 228.402 61.7966 228.987 61.7966 cv
229.572 61.7966 230.046 62.2706 230.046 62.8554 cv
cp
f
161.511 49.6583 mo
162.367 49.6583 li
163.046 48.8022 li
159.246 48.9948 li
161.511 49.6583 li
cp
f
164.717 48.4878 mo
162.847 48.5443 155.178 48.7678 150.821 48.7678 cv
144.229 48.4749 li
144.241 48.3116 li
144.059 48.1385 143.846 47.8518 143.686 47.5542 cv
142.474 45.1712 li
142.5 45.3375 li
143.639 48.0585 li
143.769 48.3561 143.953 48.6428 144.118 48.8159 cv
144.09 48.9792 li
150.653 49.2721 li
155.641 49.2721 164.998 48.9792 164.998 48.9792 cv
164.998 48.8018 164.901 48.6397 164.717 48.4878 cv
cp
f
164.998 48.7287 mo
164.998 47.8728 162.757 47.3685 159.283 46.6961 cv
156.993 46.2529 154.002 46.6888 151.713 47.0399 cv
151.228 47.1144 146.759 47.6673 146.069 47.6673 cv
143.933 45.249 li
143.818 45.1194 143.666 45.0219 143.584 45.0219 cv
142.565 45.0219 li
142.484 45.0219 142.46 45.1194 142.517 45.249 cv
143.639 47.8079 li
143.769 48.1056 143.953 48.3923 144.118 48.5654 cv
144.09 48.7287 li
150.653 49.0216 li
155.641 49.0216 164.998 48.7287 164.998 48.7287 cv
cp
.231373 .34902 .447059 rgb
f
157.997 49.4242 mo
157.997 49.517 157.922 49.5923 157.829 49.5923 cv
147.78 49.5923 li
147.687 49.5923 147.612 49.517 147.612 49.4242 cv
147.612 49.3313 147.687 49.2561 147.78 49.2561 cv
147.78 49.2561 153.007 47.6511 154.563 47.7061 cv
157.829 49.2561 li
157.922 49.2561 157.997 49.3313 157.997 49.4242 cv
cp
.27451 .392157 .501961 rgb
f
157.997 49.4242 mo
157.997 49.517 157.922 49.5923 157.829 49.5923 cv
147.78 49.5923 li
147.687 49.5923 147.612 49.517 147.612 49.4242 cv
147.612 49.3313 147.687 49.2561 147.78 49.2561 cv
157.829 49.2561 li
157.922 49.2561 157.997 49.3313 157.997 49.4242 cv
cp
.145098 .258824 .329412 rgb
f
157.706 46.5676 mo
158.593 47.645 li
158.804 47.9005 159.157 48.0969 159.394 48.0969 cv
164.518 48.0969 li
163.684 47.5856 161.81 47.1852 159.283 46.6961 cv
158.887 46.6194 158.344 46.5794 157.706 46.5676 cv
cp
f
153.012 49.6878 mo
153.012 49.9323 152.814 50.1306 152.57 50.1306 cv
152.363 50.1306 li
152.118 50.1306 151.92 49.9323 151.92 49.6878 cv
151.92 49.4432 152.118 49.245 152.363 49.245 cv
152.57 49.245 li
152.814 49.245 153.012 49.4432 153.012 49.6878 cv
cp
.231373 .34902 .447059 rgb
f
152.481 49.6878 mo
152.481 49.9323 152.283 50.1306 152.038 50.1306 cv
151.832 50.1306 li
151.587 50.1306 151.389 49.9323 151.389 49.6878 cv
151.389 49.4432 151.587 49.245 151.832 49.245 cv
152.038 49.245 li
152.283 49.245 152.481 49.4432 152.481 49.6878 cv
cp
.145098 .258824 .329412 rgb
f
162.692 49.6878 mo
162.692 49.9323 162.494 50.1306 162.249 50.1306 cv
162.043 50.1306 li
161.798 50.1306 161.6 49.9323 161.6 49.6878 cv
161.6 49.4432 161.798 49.245 162.043 49.245 cv
162.249 49.245 li
162.494 49.245 162.692 49.4432 162.692 49.6878 cv
cp
.231373 .34902 .447059 rgb
f
162.161 49.6878 mo
162.161 49.9323 161.962 50.1306 161.718 50.1306 cv
161.511 50.1306 li
161.267 50.1306 161.068 49.9323 161.068 49.6878 cv
161.068 49.4432 161.267 49.245 161.511 49.245 cv
161.718 49.245 li
161.962 49.245 162.161 49.4432 162.161 49.6878 cv
cp
.145098 .258824 .329412 rgb
f
184.645 49.6583 mo
185.501 49.6583 li
186.18 48.8022 li
182.38 48.9948 li
184.645 49.6583 li
cp
f
187.851 48.4878 mo
185.981 48.5443 178.312 48.7678 173.954 48.7678 cv
167.362 48.4749 li
167.375 48.3116 li
167.192 48.1385 166.98 47.8518 166.819 47.5542 cv
165.607 45.1712 li
165.634 45.3375 li
166.772 48.0585 li
166.903 48.3561 167.087 48.6428 167.252 48.8159 cv
167.224 48.9792 li
173.786 49.2721 li
178.774 49.2721 188.132 48.9792 188.132 48.9792 cv
188.132 48.8018 188.034 48.6397 187.851 48.4878 cv
cp
f
188.132 48.7287 mo
188.132 47.8728 185.891 47.3685 182.417 46.6961 cv
180.127 46.2529 177.136 46.6888 174.847 47.0399 cv
174.362 47.1144 169.893 47.6673 169.203 47.6673 cv
167.067 45.249 li
166.952 45.1194 166.8 45.0219 166.718 45.0219 cv
165.699 45.0219 li
165.617 45.0219 165.594 45.1194 165.65 45.249 cv
166.772 47.8079 li
166.903 48.1056 167.087 48.3923 167.252 48.5654 cv
167.224 48.7287 li
173.786 49.0216 li
178.774 49.0216 188.132 48.7287 188.132 48.7287 cv
cp
.231373 .34902 .447059 rgb
f
181.131 49.4242 mo
181.131 49.517 181.055 49.5923 180.962 49.5923 cv
170.914 49.5923 li
170.821 49.5923 170.746 49.517 170.746 49.4242 cv
170.746 49.3313 170.821 49.2561 170.914 49.2561 cv
170.914 49.2561 176.141 47.6511 177.697 47.7061 cv
180.962 49.2561 li
181.055 49.2561 181.131 49.3313 181.131 49.4242 cv
cp
.27451 .392157 .501961 rgb
f
181.131 49.4242 mo
181.131 49.517 181.055 49.5923 180.962 49.5923 cv
170.914 49.5923 li
170.821 49.5923 170.746 49.517 170.746 49.4242 cv
170.746 49.3313 170.821 49.2561 170.914 49.2561 cv
180.962 49.2561 li
181.055 49.2561 181.131 49.3313 181.131 49.4242 cv
cp
.145098 .258824 .329412 rgb
f
180.84 46.5676 mo
181.727 47.645 li
181.937 47.9005 182.291 48.0969 182.528 48.0969 cv
187.652 48.0969 li
186.818 47.5856 184.944 47.1852 182.417 46.6961 cv
182.02 46.6194 181.478 46.5794 180.84 46.5676 cv
cp
f
176.146 49.6878 mo
176.146 49.9323 175.948 50.1306 175.703 50.1306 cv
175.497 50.1306 li
175.252 50.1306 175.054 49.9323 175.054 49.6878 cv
175.054 49.4432 175.252 49.245 175.497 49.245 cv
175.703 49.245 li
175.948 49.245 176.146 49.4432 176.146 49.6878 cv
cp
.231373 .34902 .447059 rgb
f
175.615 49.6878 mo
175.615 49.9323 175.417 50.1306 175.172 50.1306 cv
174.965 50.1306 li
174.721 50.1306 174.523 49.9323 174.523 49.6878 cv
174.523 49.4432 174.721 49.245 174.965 49.245 cv
175.172 49.245 li
175.417 49.245 175.615 49.4432 175.615 49.6878 cv
cp
.145098 .258824 .329412 rgb
f
185.826 49.6878 mo
185.826 49.9323 185.628 50.1306 185.383 50.1306 cv
185.176 50.1306 li
184.932 50.1306 184.734 49.9323 184.734 49.6878 cv
184.734 49.4432 184.932 49.245 185.176 49.245 cv
185.383 49.245 li
185.628 49.245 185.826 49.4432 185.826 49.6878 cv
cp
.231373 .34902 .447059 rgb
f
185.294 49.6878 mo
185.294 49.9323 185.096 50.1306 184.852 50.1306 cv
184.645 50.1306 li
184.4 50.1306 184.202 49.9323 184.202 49.6878 cv
184.202 49.4432 184.4 49.245 184.645 49.245 cv
184.852 49.245 li
185.096 49.245 185.294 49.4432 185.294 49.6878 cv
cp
.145098 .258824 .329412 rgb
f
207.779 49.6583 mo
208.635 49.6583 li
209.314 48.8022 li
205.514 48.9948 li
207.779 49.6583 li
cp
f
210.984 48.4878 mo
209.115 48.5443 201.446 48.7678 197.088 48.7678 cv
190.496 48.4749 li
190.508 48.3116 li
190.326 48.1385 190.113 47.8518 189.953 47.5542 cv
188.741 45.1712 li
188.767 45.3375 li
189.906 48.0585 li
190.037 48.3561 190.221 48.6428 190.386 48.8159 cv
190.357 48.9792 li
196.92 49.2721 li
201.908 49.2721 211.266 48.9792 211.266 48.9792 cv
211.266 48.8018 211.168 48.6397 210.984 48.4878 cv
cp
f
211.266 48.7287 mo
211.266 47.8728 209.024 47.3685 205.55 46.6961 cv
203.261 46.2529 200.27 46.6888 197.981 47.0399 cv
197.495 47.1144 193.027 47.6673 192.337 47.6673 cv
190.2 45.249 li
190.086 45.1194 189.933 45.0219 189.851 45.0219 cv
188.833 45.0219 li
188.751 45.0219 188.727 45.1194 188.784 45.249 cv
189.906 47.8079 li
190.037 48.1056 190.221 48.3923 190.386 48.5654 cv
190.357 48.7287 li
196.92 49.0216 li
201.908 49.0216 211.266 48.7287 211.266 48.7287 cv
cp
.231373 .34902 .447059 rgb
f
204.264 49.4242 mo
204.264 49.517 204.189 49.5923 204.096 49.5923 cv
194.048 49.5923 li
193.955 49.5923 193.879 49.517 193.879 49.4242 cv
193.879 49.3313 193.955 49.2561 194.048 49.2561 cv
194.048 49.2561 199.275 47.6511 200.831 47.7061 cv
204.096 49.2561 li
204.189 49.2561 204.264 49.3313 204.264 49.4242 cv
cp
.27451 .392157 .501961 rgb
f
204.264 49.4242 mo
204.264 49.517 204.189 49.5923 204.096 49.5923 cv
194.048 49.5923 li
193.955 49.5923 193.879 49.517 193.879 49.4242 cv
193.879 49.3313 193.955 49.2561 194.048 49.2561 cv
204.096 49.2561 li
204.189 49.2561 204.264 49.3313 204.264 49.4242 cv
cp
.145098 .258824 .329412 rgb
f
203.973 46.5676 mo
204.861 47.645 li
205.071 47.9005 205.425 48.0969 205.661 48.0969 cv
210.786 48.0969 li
209.951 47.5856 208.078 47.1852 205.55 46.6961 cv
205.154 46.6194 204.611 46.5794 203.973 46.5676 cv
cp
f
199.28 49.6878 mo
199.28 49.9323 199.082 50.1306 198.837 50.1306 cv
198.63 50.1306 li
198.386 50.1306 198.188 49.9323 198.188 49.6878 cv
198.188 49.4432 198.386 49.245 198.63 49.245 cv
198.837 49.245 li
199.082 49.245 199.28 49.4432 199.28 49.6878 cv
cp
.231373 .34902 .447059 rgb
f
198.749 49.6878 mo
198.749 49.9323 198.55 50.1306 198.306 50.1306 cv
198.099 50.1306 li
197.855 50.1306 197.656 49.9323 197.656 49.6878 cv
197.656 49.4432 197.855 49.245 198.099 49.245 cv
198.306 49.245 li
198.55 49.245 198.749 49.4432 198.749 49.6878 cv
cp
.145098 .258824 .329412 rgb
f
208.96 49.6878 mo
208.96 49.9323 208.761 50.1306 208.517 50.1306 cv
208.31 50.1306 li
208.066 50.1306 207.867 49.9323 207.867 49.6878 cv
207.867 49.4432 208.066 49.245 208.31 49.245 cv
208.517 49.245 li
208.761 49.245 208.96 49.4432 208.96 49.6878 cv
cp
.231373 .34902 .447059 rgb
f
208.428 49.6878 mo
208.428 49.9323 208.23 50.1306 207.985 50.1306 cv
207.779 50.1306 li
207.534 50.1306 207.336 49.9323 207.336 49.6878 cv
207.336 49.4432 207.534 49.245 207.779 49.245 cv
207.985 49.245 li
208.23 49.245 208.428 49.4432 208.428 49.6878 cv
cp
.145098 .258824 .329412 rgb
f
230.913 49.6583 mo
231.769 49.6583 li
232.448 48.8022 li
228.648 48.9948 li
230.913 49.6583 li
cp
f
234.118 48.4878 mo
232.248 48.5443 224.579 48.7678 220.222 48.7678 cv
213.63 48.4749 li
213.642 48.3116 li
213.46 48.1385 213.247 47.8518 213.087 47.5542 cv
211.875 45.1712 li
211.901 45.3375 li
213.04 48.0585 li
213.17 48.3561 213.355 48.6428 213.52 48.8159 cv
213.491 48.9792 li
220.054 49.2721 li
225.042 49.2721 234.4 48.9792 234.4 48.9792 cv
234.4 48.8018 234.302 48.6397 234.118 48.4878 cv
cp
f
234.4 48.7287 mo
234.4 47.8728 232.158 47.3685 228.684 46.6961 cv
226.395 46.2529 223.404 46.6888 221.115 47.0399 cv
220.629 47.1144 216.16 47.6673 215.47 47.6673 cv
213.334 45.249 li
213.22 45.1194 213.067 45.0219 212.985 45.0219 cv
211.967 45.0219 li
211.885 45.0219 211.861 45.1194 211.918 45.249 cv
213.04 47.8079 li
213.17 48.1056 213.355 48.3923 213.52 48.5654 cv
213.491 48.7287 li
220.054 49.0216 li
225.042 49.0216 234.4 48.7287 234.4 48.7287 cv
cp
.231373 .34902 .447059 rgb
f
227.398 49.4242 mo
227.398 49.517 227.323 49.5923 227.23 49.5923 cv
217.181 49.5923 li
217.088 49.5923 217.013 49.517 217.013 49.4242 cv
217.013 49.3313 217.088 49.2561 217.181 49.2561 cv
217.181 49.2561 222.408 47.6511 223.964 47.7061 cv
227.23 49.2561 li
227.323 49.2561 227.398 49.3313 227.398 49.4242 cv
cp
.27451 .392157 .501961 rgb
f
227.398 49.4242 mo
227.398 49.517 227.323 49.5923 227.23 49.5923 cv
217.181 49.5923 li
217.088 49.5923 217.013 49.517 217.013 49.4242 cv
217.013 49.3313 217.088 49.2561 217.181 49.2561 cv
227.23 49.2561 li
227.323 49.2561 227.398 49.3313 227.398 49.4242 cv
cp
.145098 .258824 .329412 rgb
f
227.107 46.5676 mo
227.994 47.645 li
228.205 47.9005 228.558 48.0969 228.795 48.0969 cv
233.919 48.0969 li
233.085 47.5856 231.211 47.1852 228.684 46.6961 cv
228.288 46.6194 227.745 46.5794 227.107 46.5676 cv
cp
f
222.414 49.6878 mo
222.414 49.9323 222.215 50.1306 221.971 50.1306 cv
221.764 50.1306 li
221.52 50.1306 221.321 49.9323 221.321 49.6878 cv
221.321 49.4432 221.52 49.245 221.764 49.245 cv
221.971 49.245 li
222.215 49.245 222.414 49.4432 222.414 49.6878 cv
cp
.231373 .34902 .447059 rgb
f
221.882 49.6878 mo
221.882 49.9323 221.684 50.1306 221.44 50.1306 cv
221.233 50.1306 li
220.988 50.1306 220.79 49.9323 220.79 49.6878 cv
220.79 49.4432 220.988 49.245 221.233 49.245 cv
221.44 49.245 li
221.684 49.245 221.882 49.4432 221.882 49.6878 cv
cp
.145098 .258824 .329412 rgb
f
232.093 49.6878 mo
232.093 49.9323 231.895 50.1306 231.651 50.1306 cv
231.444 50.1306 li
231.199 50.1306 231.001 49.9323 231.001 49.6878 cv
231.001 49.4432 231.199 49.245 231.444 49.245 cv
231.651 49.245 li
231.895 49.245 232.093 49.4432 232.093 49.6878 cv
cp
.231373 .34902 .447059 rgb
f
231.562 49.6878 mo
231.562 49.9323 231.364 50.1306 231.119 50.1306 cv
230.913 50.1306 li
230.668 50.1306 230.47 49.9323 230.47 49.6878 cv
230.47 49.4432 230.668 49.245 230.913 49.245 cv
231.119 49.245 li
231.364 49.245 231.562 49.4432 231.562 49.6878 cv
cp
.145098 .258824 .329412 rgb
f
277.18 49.6583 mo
278.036 49.6583 li
278.715 48.8022 li
274.915 48.9948 li
277.18 49.6583 li
cp
f
280.386 48.4878 mo
278.516 48.5443 270.847 48.7678 266.49 48.7678 cv
259.897 48.4749 li
259.91 48.3116 li
259.727 48.1385 259.515 47.8518 259.354 47.5542 cv
258.142 45.1712 li
258.169 45.3375 li
259.307 48.0585 li
259.438 48.3561 259.622 48.6428 259.787 48.8159 cv
259.759 48.9792 li
266.321 49.2721 li
271.309 49.2721 280.667 48.9792 280.667 48.9792 cv
280.667 48.8018 280.569 48.6397 280.386 48.4878 cv
cp
f
280.667 48.7287 mo
280.667 47.8728 278.426 47.3685 274.952 46.6961 cv
272.662 46.2529 269.671 46.6888 267.382 47.0399 cv
266.897 47.1144 262.428 47.6673 261.738 47.6673 cv
259.602 45.249 li
259.487 45.1194 259.335 45.0219 259.253 45.0219 cv
258.234 45.0219 li
258.152 45.0219 258.129 45.1194 258.186 45.249 cv
259.307 47.8079 li
259.438 48.1056 259.622 48.3923 259.787 48.5654 cv
259.759 48.7287 li
266.321 49.0216 li
271.309 49.0216 280.667 48.7287 280.667 48.7287 cv
cp
.231373 .34902 .447059 rgb
f
273.666 49.4242 mo
273.666 49.517 273.59 49.5923 273.498 49.5923 cv
263.449 49.5923 li
263.356 49.5923 263.281 49.517 263.281 49.4242 cv
263.281 49.3313 263.356 49.2561 263.449 49.2561 cv
263.449 49.2561 268.676 47.6511 270.232 47.7061 cv
273.498 49.2561 li
273.59 49.2561 273.666 49.3313 273.666 49.4242 cv
cp
.27451 .392157 .501961 rgb
f
273.666 49.4242 mo
273.666 49.517 273.59 49.5923 273.498 49.5923 cv
263.449 49.5923 li
263.356 49.5923 263.281 49.517 263.281 49.4242 cv
263.281 49.3313 263.356 49.2561 263.449 49.2561 cv
273.498 49.2561 li
273.59 49.2561 273.666 49.3313 273.666 49.4242 cv
cp
.145098 .258824 .329412 rgb
f
273.375 46.5676 mo
274.262 47.645 li
274.472 47.9005 274.826 48.0969 275.063 48.0969 cv
280.187 48.0969 li
279.353 47.5856 277.479 47.1852 274.952 46.6961 cv
274.555 46.6194 274.013 46.5794 273.375 46.5676 cv
cp
f
268.681 49.6878 mo
268.681 49.9323 268.483 50.1306 268.238 50.1306 cv
268.032 50.1306 li
267.787 50.1306 267.589 49.9323 267.589 49.6878 cv
267.589 49.4432 267.787 49.245 268.032 49.245 cv
268.238 49.245 li
268.483 49.245 268.681 49.4432 268.681 49.6878 cv
cp
.231373 .34902 .447059 rgb
f
268.15 49.6878 mo
268.15 49.9323 267.952 50.1306 267.707 50.1306 cv
267.5 50.1306 li
267.256 50.1306 267.058 49.9323 267.058 49.6878 cv
267.058 49.4432 267.256 49.245 267.5 49.245 cv
267.707 49.245 li
267.952 49.245 268.15 49.4432 268.15 49.6878 cv
cp
.145098 .258824 .329412 rgb
f
278.361 49.6878 mo
278.361 49.9323 278.163 50.1306 277.918 50.1306 cv
277.711 50.1306 li
277.467 50.1306 277.269 49.9323 277.269 49.6878 cv
277.269 49.4432 277.467 49.245 277.711 49.245 cv
277.918 49.245 li
278.163 49.245 278.361 49.4432 278.361 49.6878 cv
cp
.231373 .34902 .447059 rgb
f
277.83 49.6878 mo
277.83 49.9323 277.631 50.1306 277.387 50.1306 cv
277.18 50.1306 li
276.936 50.1306 276.737 49.9323 276.737 49.6878 cv
276.737 49.4432 276.936 49.245 277.18 49.245 cv
277.387 49.245 li
277.631 49.245 277.83 49.4432 277.83 49.6878 cv
cp
.145098 .258824 .329412 rgb
f
300.314 49.6583 mo
301.17 49.6583 li
301.849 48.8022 li
298.049 48.9948 li
300.314 49.6583 li
cp
f
303.519 48.4878 mo
301.65 48.5443 293.981 48.7678 289.623 48.7678 cv
283.031 48.4749 li
283.043 48.3116 li
282.861 48.1385 282.648 47.8518 282.488 47.5542 cv
281.276 45.1712 li
281.302 45.3375 li
282.441 48.0585 li
282.572 48.3561 282.756 48.6428 282.921 48.8159 cv
282.892 48.9792 li
289.455 49.2721 li
294.443 49.2721 303.801 48.9792 303.801 48.9792 cv
303.801 48.8018 303.703 48.6397 303.519 48.4878 cv
cp
f
303.801 48.7287 mo
303.801 47.8728 301.559 47.3685 298.085 46.6961 cv
295.796 46.2529 292.805 46.6888 290.516 47.0399 cv
290.031 47.1144 285.562 47.6673 284.872 47.6673 cv
282.735 45.249 li
282.621 45.1194 282.468 45.0219 282.387 45.0219 cv
281.368 45.0219 li
281.286 45.0219 281.262 45.1194 281.319 45.249 cv
282.441 47.8079 li
282.572 48.1056 282.756 48.3923 282.921 48.5654 cv
282.892 48.7287 li
289.455 49.0216 li
294.443 49.0216 303.801 48.7287 303.801 48.7287 cv
cp
.231373 .34902 .447059 rgb
f
296.799 49.4242 mo
296.799 49.517 296.724 49.5923 296.631 49.5923 cv
286.583 49.5923 li
286.49 49.5923 286.414 49.517 286.414 49.4242 cv
286.414 49.3313 286.49 49.2561 286.583 49.2561 cv
286.583 49.2561 291.81 47.6511 293.366 47.7061 cv
296.631 49.2561 li
296.724 49.2561 296.799 49.3313 296.799 49.4242 cv
cp
.27451 .392157 .501961 rgb
f
296.799 49.4242 mo
296.799 49.517 296.724 49.5923 296.631 49.5923 cv
286.583 49.5923 li
286.49 49.5923 286.414 49.517 286.414 49.4242 cv
286.414 49.3313 286.49 49.2561 286.583 49.2561 cv
296.631 49.2561 li
296.724 49.2561 296.799 49.3313 296.799 49.4242 cv
cp
.145098 .258824 .329412 rgb
f
296.508 46.5676 mo
297.396 47.645 li
297.606 47.9005 297.96 48.0969 298.196 48.0969 cv
303.321 48.0969 li
302.487 47.5856 300.613 47.1852 298.085 46.6961 cv
297.689 46.6194 297.146 46.5794 296.508 46.5676 cv
cp
f
291.815 49.6878 mo
291.815 49.9323 291.617 50.1306 291.372 50.1306 cv
291.166 50.1306 li
290.921 50.1306 290.723 49.9323 290.723 49.6878 cv
290.723 49.4432 290.921 49.245 291.166 49.245 cv
291.372 49.245 li
291.617 49.245 291.815 49.4432 291.815 49.6878 cv
cp
.231373 .34902 .447059 rgb
f
291.284 49.6878 mo
291.284 49.9323 291.085 50.1306 290.841 50.1306 cv
290.634 50.1306 li
290.39 50.1306 290.191 49.9323 290.191 49.6878 cv
290.191 49.4432 290.39 49.245 290.634 49.245 cv
290.841 49.245 li
291.085 49.245 291.284 49.4432 291.284 49.6878 cv
cp
.145098 .258824 .329412 rgb
f
301.495 49.6878 mo
301.495 49.9323 301.296 50.1306 301.052 50.1306 cv
300.845 50.1306 li
300.601 50.1306 300.402 49.9323 300.402 49.6878 cv
300.402 49.4432 300.601 49.245 300.845 49.245 cv
301.052 49.245 li
301.296 49.245 301.495 49.4432 301.495 49.6878 cv
cp
.231373 .34902 .447059 rgb
f
300.963 49.6878 mo
300.963 49.9323 300.765 50.1306 300.52 50.1306 cv
300.314 50.1306 li
300.069 50.1306 299.871 49.9323 299.871 49.6878 cv
299.871 49.4432 300.069 49.245 300.314 49.245 cv
300.52 49.245 li
300.765 49.245 300.963 49.4432 300.963 49.6878 cv
cp
.145098 .258824 .329412 rgb
f
346.581 49.6583 mo
347.437 49.6583 li
348.116 48.8022 li
344.317 48.9948 li
346.581 49.6583 li
cp
f
349.787 48.4878 mo
347.917 48.5443 340.248 48.7678 335.891 48.7678 cv
329.299 48.4749 li
329.311 48.3116 li
329.129 48.1385 328.916 47.8518 328.756 47.5542 cv
327.544 45.1712 li
327.57 45.3375 li
328.709 48.0585 li
328.839 48.3561 329.023 48.6428 329.188 48.8159 cv
329.16 48.9792 li
335.723 49.2721 li
340.711 49.2721 350.068 48.9792 350.068 48.9792 cv
350.068 48.8018 349.971 48.6397 349.787 48.4878 cv
cp
f
350.068 48.7287 mo
350.068 47.8728 347.827 47.3685 344.353 46.6961 cv
342.063 46.2529 339.072 46.6888 336.784 47.0399 cv
336.298 47.1144 331.829 47.6673 331.139 47.6673 cv
329.003 45.249 li
328.889 45.1194 328.736 45.0219 328.654 45.0219 cv
327.636 45.0219 li
327.554 45.0219 327.53 45.1194 327.587 45.249 cv
328.709 47.8079 li
328.839 48.1056 329.023 48.3923 329.188 48.5654 cv
329.16 48.7287 li
335.723 49.0216 li
340.711 49.0216 350.068 48.7287 350.068 48.7287 cv
cp
.231373 .34902 .447059 rgb
f
343.067 49.4242 mo
343.067 49.517 342.992 49.5923 342.899 49.5923 cv
332.85 49.5923 li
332.757 49.5923 332.682 49.517 332.682 49.4242 cv
332.682 49.3313 332.757 49.2561 332.85 49.2561 cv
332.85 49.2561 338.077 47.6511 339.633 47.7061 cv
342.899 49.2561 li
342.992 49.2561 343.067 49.3313 343.067 49.4242 cv
cp
.27451 .392157 .501961 rgb
f
343.067 49.4242 mo
343.067 49.517 342.992 49.5923 342.899 49.5923 cv
332.85 49.5923 li
332.757 49.5923 332.682 49.517 332.682 49.4242 cv
332.682 49.3313 332.757 49.2561 332.85 49.2561 cv
342.899 49.2561 li
342.992 49.2561 343.067 49.3313 343.067 49.4242 cv
cp
.145098 .258824 .329412 rgb
f
342.776 46.5676 mo
343.663 47.645 li
343.874 47.9005 344.227 48.0969 344.464 48.0969 cv
349.588 48.0969 li
348.754 47.5856 346.88 47.1852 344.353 46.6961 cv
343.957 46.6194 343.414 46.5794 342.776 46.5676 cv
cp
f
338.083 49.6878 mo
338.083 49.9323 337.884 50.1306 337.64 50.1306 cv
337.433 50.1306 li
337.189 50.1306 336.99 49.9323 336.99 49.6878 cv
336.99 49.4432 337.189 49.245 337.433 49.245 cv
337.64 49.245 li
337.884 49.245 338.083 49.4432 338.083 49.6878 cv
cp
.231373 .34902 .447059 rgb
f
337.551 49.6878 mo
337.551 49.9323 337.353 50.1306 337.108 50.1306 cv
336.902 50.1306 li
336.657 50.1306 336.459 49.9323 336.459 49.6878 cv
336.459 49.4432 336.657 49.245 336.902 49.245 cv
337.108 49.245 li
337.353 49.245 337.551 49.4432 337.551 49.6878 cv
cp
.145098 .258824 .329412 rgb
f
347.762 49.6878 mo
347.762 49.9323 347.564 50.1306 347.319 50.1306 cv
347.113 50.1306 li
346.868 50.1306 346.67 49.9323 346.67 49.6878 cv
346.67 49.4432 346.868 49.245 347.113 49.245 cv
347.319 49.245 li
347.564 49.245 347.762 49.4432 347.762 49.6878 cv
cp
.231373 .34902 .447059 rgb
f
347.231 49.6878 mo
347.231 49.9323 347.033 50.1306 346.788 50.1306 cv
346.581 50.1306 li
346.337 50.1306 346.139 49.9323 346.139 49.6878 cv
346.139 49.4432 346.337 49.245 346.581 49.245 cv
346.788 49.245 li
347.033 49.245 347.231 49.4432 347.231 49.6878 cv
cp
.145098 .258824 .329412 rgb
f
9.43277 48.3081 mo
8.86596 48.3081 li
8.86596 47.1273 li
9.05486 47.1273 li
9.43277 48.3081 li
cp
.231373 .34902 .447059 rgb
f
25.0186 48.3081 mo
25.5855 48.3081 li
25.5855 47.1273 li
25.3965 47.1273 li
25.0186 48.3081 li
cp
f
17.5598 49.9144 mo
17.5598 50.0407 17.4574 50.1431 17.3311 50.1431 cv
17.2048 50.1431 17.1024 50.0407 17.1024 49.9144 cv
17.1024 49.2856 li
17.1024 49.1593 17.2048 49.0569 17.3311 49.0569 cv
17.4574 49.0569 17.5598 49.1593 17.5598 49.2856 cv
17.5598 49.9144 li
cp
.145098 .258824 .329412 rgb
f
11.6141 49.9144 mo
11.6141 50.0407 11.5117 50.1431 11.3854 50.1431 cv
11.2591 50.1431 11.1568 50.0407 11.1568 49.9144 cv
11.1568 49.2856 li
11.1568 49.1593 11.2591 49.0569 11.3854 49.0569 cv
11.5117 49.0569 11.6141 49.1593 11.6141 49.2856 cv
11.6141 49.9144 li
cp
f
17.8779 47.7696 mo
17.6872 46.2803 17.4852 45.6135 17.3202 45.6135 cv
17.1552 45.6135 16.9532 46.2803 16.7624 47.7696 cv
17.8779 47.7696 li
cp
f
8.78417 48.2851 mo
8.89847 48.1708 li
25.6779 48.1708 li
25.7922 48.2851 li
25.6779 48.3994 li
25.6779 48.3994 19.3752 49.4285 17.2743 49.4285 cv
15.1804 49.4285 8.89847 48.3994 8.89847 48.3994 cv
8.78417 48.2851 li
cp
f
20.2958 49.1417 mo
20.0697 47.9218 18.8295 46.9856 17.3202 46.9856 cv
15.8109 46.9856 14.5706 47.9218 14.3446 49.1417 cv
20.2958 49.1417 li
cp
.231373 .34902 .447059 rgb
f
8.78417 48.2851 mo
8.89847 48.1708 li
25.6779 48.1708 li
25.7922 48.2851 li
25.6779 48.3994 li
8.89847 48.3994 li
8.78417 48.2851 li
cp
.145098 .258824 .329412 rgb
f
20.2958 49.1417 mo
20.0697 47.9218 18.8295 46.9856 17.3202 46.9856 cv
15.8109 46.9856 14.5706 47.9218 14.3446 49.1417 cv
14.3446 49.1417 16.5734 49.6576 17.3311 49.6572 cv
18.0834 49.6567 20.2958 49.1417 20.2958 49.1417 cv
cp
.231373 .34902 .447059 rgb
f
19.0697 47.6403 mo
18.5761 47.3138 17.9771 47.1131 17.3202 47.1131 cv
16.6633 47.1131 16.0643 47.3138 15.5707 47.6403 cv
15.9671 48.3222 16.5985 48.7701 17.3202 48.7701 cv
18.0419 48.7701 18.6732 48.3222 19.0697 47.6403 cv
cp
.145098 .258824 .329412 rgb
f
11.6999 49.7429 mo
11.4998 49.7429 li
11.4998 48.5709 li
11.6999 48.5709 li
11.6999 49.7429 li
cp
f
23.0195 49.9144 mo
23.0195 50.0407 23.1219 50.1431 23.2482 50.1431 cv
23.3745 50.1431 23.4769 50.0407 23.4769 49.9144 cv
23.4769 49.2856 li
23.4769 49.1593 23.3745 49.0569 23.2482 49.0569 cv
23.1219 49.0569 23.0195 49.1593 23.0195 49.2856 cv
23.0195 49.9144 li
cp
f
22.9337 49.7429 mo
23.1338 49.7429 li
23.1338 48.5709 li
22.9337 48.5709 li
22.9337 49.7429 li
cp
f
27.8235 48.3081 mo
27.2567 48.3081 li
27.2567 47.1273 li
27.4456 47.1273 li
27.8235 48.3081 li
cp
.231373 .34902 .447059 rgb
f
43.4093 48.3081 mo
43.9762 48.3081 li
43.9762 47.1273 li
43.7872 47.1273 li
43.4093 48.3081 li
cp
f
35.9505 49.9144 mo
35.9505 50.0407 35.8481 50.1431 35.7218 50.1431 cv
35.5955 50.1431 35.4931 50.0407 35.4931 49.9144 cv
35.4931 49.2856 li
35.4931 49.1593 35.5955 49.0569 35.7218 49.0569 cv
35.8481 49.0569 35.9505 49.1593 35.9505 49.2856 cv
35.9505 49.9144 li
cp
.145098 .258824 .329412 rgb
f
30.0048 49.9144 mo
30.0048 50.0407 29.9024 50.1431 29.7761 50.1431 cv
29.6498 50.1431 29.5475 50.0407 29.5475 49.9144 cv
29.5475 49.2856 li
29.5475 49.1593 29.6498 49.0569 29.7761 49.0569 cv
29.9024 49.0569 30.0048 49.1593 30.0048 49.2856 cv
30.0048 49.9144 li
cp
f
36.2686 47.7696 mo
36.0779 46.2803 35.8759 45.6135 35.7109 45.6135 cv
35.5459 45.6135 35.3439 46.2803 35.1531 47.7696 cv
36.2686 47.7696 li
cp
f
27.1749 48.2851 mo
27.2893 48.1708 li
44.0686 48.1708 li
44.1829 48.2851 li
44.0686 48.3994 li
44.0686 48.3994 37.7659 49.4285 35.665 49.4285 cv
33.5711 49.4285 27.2893 48.3994 27.2893 48.3994 cv
27.1749 48.2851 li
cp
f
38.6865 49.1417 mo
38.4604 47.9218 37.2202 46.9856 35.7109 46.9856 cv
34.2016 46.9856 32.9613 47.9218 32.7353 49.1417 cv
38.6865 49.1417 li
cp
.231373 .34902 .447059 rgb
f
27.1749 48.2851 mo
27.2893 48.1708 li
44.0686 48.1708 li
44.1829 48.2851 li
44.0686 48.3994 li
27.2893 48.3994 li
27.1749 48.2851 li
cp
.145098 .258824 .329412 rgb
f
38.6865 49.1417 mo
38.4604 47.9218 37.2202 46.9856 35.7109 46.9856 cv
34.2016 46.9856 32.9613 47.9218 32.7353 49.1417 cv
32.7353 49.1417 34.9641 49.6576 35.7218 49.6572 cv
36.4741 49.6567 38.6865 49.1417 38.6865 49.1417 cv
cp
.231373 .34902 .447059 rgb
f
37.4604 47.6403 mo
36.9668 47.3138 36.3678 47.1131 35.7109 47.1131 cv
35.054 47.1131 34.455 47.3138 33.9614 47.6403 cv
34.3578 48.3222 34.9892 48.7701 35.7109 48.7701 cv
36.4326 48.7701 37.0639 48.3222 37.4604 47.6403 cv
cp
.145098 .258824 .329412 rgb
f
30.0906 49.7429 mo
29.8905 49.7429 li
29.8905 48.5709 li
30.0906 48.5709 li
30.0906 49.7429 li
cp
f
41.4102 49.9144 mo
41.4102 50.0407 41.5126 50.1431 41.6389 50.1431 cv
41.7652 50.1431 41.8676 50.0407 41.8676 49.9144 cv
41.8676 49.2856 li
41.8676 49.1593 41.7652 49.0569 41.6389 49.0569 cv
41.5126 49.0569 41.4102 49.1593 41.4102 49.2856 cv
41.4102 49.9144 li
cp
f
41.3244 49.7429 mo
41.5245 49.7429 li
41.5245 48.5709 li
41.3244 48.5709 li
41.3244 49.7429 li
cp
f
46.0474 48.3081 mo
45.4806 48.3081 li
45.4806 47.1273 li
45.6695 47.1273 li
46.0474 48.3081 li
cp
.231373 .34902 .447059 rgb
f
61.6332 48.3081 mo
62.2001 48.3081 li
62.2001 47.1273 li
62.0111 47.1273 li
61.6332 48.3081 li
cp
f
54.1744 49.9144 mo
54.1744 50.0407 54.072 50.1431 53.9457 50.1431 cv
53.8194 50.1431 53.717 50.0407 53.717 49.9144 cv
53.717 49.2856 li
53.717 49.1593 53.8194 49.0569 53.9457 49.0569 cv
54.072 49.0569 54.1744 49.1593 54.1744 49.2856 cv
54.1744 49.9144 li
cp
.145098 .258824 .329412 rgb
f
48.2287 49.9144 mo
48.2287 50.0407 48.1263 50.1431 48 50.1431 cv
47.8737 50.1431 47.7714 50.0407 47.7714 49.9144 cv
47.7714 49.2856 li
47.7714 49.1593 47.8737 49.0569 48 49.0569 cv
48.1263 49.0569 48.2287 49.1593 48.2287 49.2856 cv
48.2287 49.9144 li
cp
f
54.4925 47.7696 mo
54.3018 46.2803 54.0998 45.6135 53.9348 45.6135 cv
53.7698 45.6135 53.5677 46.2803 53.377 47.7696 cv
54.4925 47.7696 li
cp
f
45.3988 48.2851 mo
45.5131 48.1708 li
62.2925 48.1708 li
62.4068 48.2851 li
62.2925 48.3994 li
62.2925 48.3994 55.9898 49.4285 53.8889 49.4285 cv
51.795 49.4285 45.5131 48.3994 45.5131 48.3994 cv
45.3988 48.2851 li
cp
f
56.9104 49.1417 mo
56.6843 47.9218 55.4441 46.9856 53.9348 46.9856 cv
52.4255 46.9856 51.1852 47.9218 50.9592 49.1417 cv
56.9104 49.1417 li
cp
.231373 .34902 .447059 rgb
f
45.3988 48.2851 mo
45.5131 48.1708 li
62.2925 48.1708 li
62.4068 48.2851 li
62.2925 48.3994 li
45.5131 48.3994 li
45.3988 48.2851 li
cp
.145098 .258824 .329412 rgb
f
56.9104 49.1417 mo
56.6843 47.9218 55.4441 46.9856 53.9348 46.9856 cv
52.4255 46.9856 51.1852 47.9218 50.9592 49.1417 cv
50.9592 49.1417 53.188 49.6576 53.9457 49.6572 cv
54.698 49.6567 56.9104 49.1417 56.9104 49.1417 cv
cp
.231373 .34902 .447059 rgb
f
55.6843 47.6403 mo
55.1907 47.3138 54.5917 47.1131 53.9348 47.1131 cv
53.2778 47.1131 52.6788 47.3138 52.1853 47.6403 cv
52.5817 48.3222 53.2131 48.7701 53.9348 48.7701 cv
54.6565 48.7701 55.2878 48.3222 55.6843 47.6403 cv
cp
.145098 .258824 .329412 rgb
f
48.3145 49.7429 mo
48.1144 49.7429 li
48.1144 48.5709 li
48.3145 48.5709 li
48.3145 49.7429 li
cp
f
59.6341 49.9144 mo
59.6341 50.0407 59.7365 50.1431 59.8628 50.1431 cv
59.9891 50.1431 60.0915 50.0407 60.0915 49.9144 cv
60.0915 49.2856 li
60.0915 49.1593 59.9891 49.0569 59.8628 49.0569 cv
59.7365 49.0569 59.6341 49.1593 59.6341 49.2856 cv
59.6341 49.9144 li
cp
f
59.5483 49.7429 mo
59.7484 49.7429 li
59.7484 48.5709 li
59.5483 48.5709 li
59.5483 49.7429 li
cp
f
164.513 222.982 mo
164.403 223.077 li
141.349 196.112 li
141.46 196.017 li
164.513 222.982 li
cp
f
161.197 225.499 mo
161.077 225.581 li
141.176 196.212 li
141.296 196.13 li
161.197 225.499 li
cp
f
184.482 208.238 mo
184.482 209.363 183.57 210.274 182.446 210.274 cv
181.322 210.274 180.411 209.363 180.411 208.238 cv
180.411 207.114 181.322 206.203 182.446 206.203 cv
183.57 206.203 184.482 207.114 184.482 208.238 cv
cp
f
163.836 216.526 mo
160.783 216.526 li
160.783 207.512 li
163.836 207.512 li
163.836 216.526 li
cp
.27451 .392157 .501961 rgb
f
166.307 212.988 mo
166.017 212.988 li
166.017 198.061 li
166.307 198.061 li
166.307 212.988 li
cp
.145098 .258824 .329412 rgb
f
170.669 212.988 mo
170.378 212.988 li
170.378 198.061 li
170.669 198.061 li
170.669 212.988 li
cp
f
168.188 216.526 mo
164.645 216.526 li
164.645 207.512 li
168.188 207.512 li
168.188 216.526 li
cp
.27451 .392157 .501961 rgb
f
172.696 216.526 mo
169.152 216.526 li
169.152 207.512 li
172.696 207.512 li
172.696 216.526 li
cp
f
175.329 229.938 mo
160.273 229.938 li
160.273 214.626 li
174.053 214.626 li
175.329 229.938 li
cp
.145098 .258824 .329412 rgb
f
156.19 233.51 mo
141.134 233.51 li
141.134 218.199 li
154.914 218.199 li
156.19 233.51 li
cp
f
110.186 228.739 mo
124.725 228.739 li
124.725 217.107 li
110.186 217.107 li
110.186 228.739 li
cp
f
105.97 220.888 mo
106.987 220.888 li
106.987 209.256 li
105.97 209.256 li
105.97 220.888 li
cp
f
110.711 221.324 mo
114.677 221.324 li
114.677 209.692 li
110.711 209.692 li
110.711 221.324 li
cp
f
112.021 215.654 mo
113.367 215.654 li
113.367 205.185 li
112.021 205.185 li
112.021 215.654 li
cp
f
97.1677 226.122 mo
116.874 226.122 li
116.874 213.327 li
101.026 213.327 li
97.1677 226.122 li
cp
.27451 .392157 .501961 rgb
f
191.546 232.855 mo
176.49 232.855 li
176.49 217.544 li
190.27 217.544 li
191.546 232.855 li
cp
.231373 .34902 .447059 rgb
f
198.041 229.172 mo
182.985 229.172 li
182.985 213.861 li
196.765 213.861 li
198.041 229.172 li
cp
.145098 .258824 .329412 rgb
f
122.505 233.51 mo
107.449 233.51 li
107.449 218.199 li
121.23 218.199 li
122.505 233.51 li
cp
f
129.651 242.952 mo
96.7316 242.952 li
96.7316 223.048 li
129.651 223.048 li
129.651 242.952 li
cp
.231373 .34902 .447059 rgb
f
199.317 242.952 mo
147.259 242.952 li
147.259 223.048 li
199.317 223.048 li
199.317 242.952 li
cp
f
201.868 228.917 mo
181.709 236.828 li
181.709 218.199 li
199.827 218.199 li
201.868 228.917 li
cp
.27451 .392157 .501961 rgb
f
183.75 227.386 mo
125.057 227.386 li
125.057 231.214 li
99.2834 231.214 li
99.2834 245.249 li
157.976 245.249 li
157.976 241.421 li
183.75 241.421 li
183.75 227.386 li
cp
f
201.868 248.821 mo
148.024 248.821 li
148.024 228.917 li
201.868 228.917 li
201.868 248.821 li
cp
.145098 .258824 .329412 rgb
f
133.734 246.014 mo
133.478 235.041 li
122.357 235.041 li
119.954 232.745 li
61.2607 232.745 li
61.2607 243.718 li
74.7856 243.718 li
74.7856 246.014 li
133.734 246.014 li
cp
f
106.067 217.156 mo
101.705 217.156 li
101.705 215.993 li
106.067 215.993 li
106.067 217.156 li
cp
f
111.01 217.156 mo
106.648 217.156 li
106.648 215.993 li
111.01 215.993 li
111.01 217.156 li
cp
f
115.953 217.156 mo
111.591 217.156 li
111.591 215.993 li
115.953 215.993 li
115.953 217.156 li
cp
f
106.163 214.38 mo
101.802 214.38 li
101.802 213.923 li
106.163 213.923 li
106.163 214.38 li
cp
f
111.107 214.38 mo
106.745 214.38 li
106.745 213.923 li
111.107 213.923 li
111.107 214.38 li
cp
f
116.05 214.38 mo
111.688 214.38 li
111.688 213.923 li
116.05 213.923 li
116.05 214.38 li
cp
f
113.733 218.21 mo
113.733 212.312 li
111.502 212.312 li
111.502 218.21 li
113.733 218.21 li
cp
.231373 .34902 .447059 rgb
f
116.915 218.21 mo
116.915 212.312 li
114.324 212.312 li
114.324 218.21 li
116.915 218.21 li
cp
f
120.209 218.21 mo
120.209 212.312 li
117.619 212.312 li
117.619 218.21 li
120.209 218.21 li
cp
f
109.674 231.647 mo
109.674 232.048 109.513 232.374 109.314 232.374 cv
107.589 232.374 li
107.391 232.374 107.23 232.048 107.23 231.647 cv
107.23 231.245 107.391 230.92 107.589 230.92 cv
109.314 230.92 li
109.513 230.92 109.674 231.245 109.674 231.647 cv
cp
.145098 .258824 .329412 rgb
f
112.261 231.647 mo
112.261 232.048 112.1 232.374 111.902 232.374 cv
110.177 232.374 li
109.978 232.374 109.817 232.048 109.817 231.647 cv
109.817 231.245 109.978 230.92 110.177 230.92 cv
111.902 230.92 li
112.1 230.92 112.261 231.245 112.261 231.647 cv
cp
f
114.849 231.647 mo
114.849 232.048 114.688 232.374 114.49 232.374 cv
112.764 232.374 li
112.566 232.374 112.405 232.048 112.405 231.647 cv
112.405 231.245 112.566 230.92 112.764 230.92 cv
114.49 230.92 li
114.688 230.92 114.849 231.245 114.849 231.647 cv
cp
f
117.437 231.647 mo
117.437 232.048 117.276 232.374 117.077 232.374 cv
115.352 232.374 li
115.154 232.374 114.993 232.048 114.993 231.647 cv
114.993 231.245 115.154 230.92 115.352 230.92 cv
117.077 230.92 li
117.276 230.92 117.437 231.245 117.437 231.647 cv
cp
f
120.024 231.647 mo
120.024 232.048 119.863 232.374 119.665 232.374 cv
117.94 232.374 li
117.741 232.374 117.58 232.048 117.58 231.647 cv
117.58 231.245 117.741 230.92 117.94 230.92 cv
119.665 230.92 li
119.863 230.92 120.024 231.245 120.024 231.647 cv
cp
f
109.674 229.999 mo
109.674 230.4 109.513 230.726 109.314 230.726 cv
107.589 230.726 li
107.391 230.726 107.23 230.4 107.23 229.999 cv
107.23 229.597 107.391 229.272 107.589 229.272 cv
109.314 229.272 li
109.513 229.272 109.674 229.597 109.674 229.999 cv
cp
f
112.261 229.999 mo
112.261 230.4 112.1 230.726 111.902 230.726 cv
110.177 230.726 li
109.978 230.726 109.817 230.4 109.817 229.999 cv
109.817 229.597 109.978 229.272 110.177 229.272 cv
111.902 229.272 li
112.1 229.272 112.261 229.597 112.261 229.999 cv
cp
f
114.849 229.999 mo
114.849 230.4 114.688 230.726 114.49 230.726 cv
112.764 230.726 li
112.566 230.726 112.405 230.4 112.405 229.999 cv
112.405 229.597 112.566 229.272 112.764 229.272 cv
114.49 229.272 li
114.688 229.272 114.849 229.597 114.849 229.999 cv
cp
f
117.437 229.999 mo
117.437 230.4 117.276 230.726 117.077 230.726 cv
115.352 230.726 li
115.154 230.726 114.993 230.4 114.993 229.999 cv
114.993 229.597 115.154 229.272 115.352 229.272 cv
117.077 229.272 li
117.276 229.272 117.437 229.597 117.437 229.999 cv
cp
f
120.024 229.999 mo
120.024 230.4 119.863 230.726 119.665 230.726 cv
117.94 230.726 li
117.741 230.726 117.58 230.4 117.58 229.999 cv
117.58 229.597 117.741 229.272 117.94 229.272 cv
119.665 229.272 li
119.863 229.272 120.024 229.597 120.024 229.999 cv
cp
f
122.096 230.477 mo
122.261 231.899 122.985 232.97 123.853 232.97 cv
135.872 232.97 li
136.74 232.97 137.464 231.899 137.629 230.477 cv
122.096 230.477 li
cp
f
86.487 236.154 mo
85.0331 236.154 li
85.0331 233.537 li
86.487 233.537 li
86.487 236.154 li
cp
.231373 .34902 .447059 rgb
f
88.9587 236.154 mo
87.5047 236.154 li
87.5047 233.537 li
88.9587 233.537 li
88.9587 236.154 li
cp
f
91.4303 236.154 mo
89.9764 236.154 li
89.9764 233.537 li
91.4303 233.537 li
91.4303 236.154 li
cp
f
93.902 236.154 mo
92.4481 236.154 li
92.4481 233.537 li
93.902 233.537 li
93.902 236.154 li
cp
f
96.3737 236.154 mo
94.9197 236.154 li
94.9197 233.537 li
96.3737 233.537 li
96.3737 236.154 li
cp
f
98.8453 236.154 mo
97.3914 236.154 li
97.3914 233.537 li
98.8453 233.537 li
98.8453 236.154 li
cp
f
101.317 236.154 mo
99.8631 236.154 li
99.8631 233.537 li
101.317 233.537 li
101.317 236.154 li
cp
f
103.789 236.154 mo
102.335 236.154 li
102.335 233.537 li
103.789 233.537 li
103.789 236.154 li
cp
f
106.26 236.154 mo
104.806 236.154 li
104.806 233.537 li
106.26 233.537 li
106.26 236.154 li
cp
f
108.732 236.154 mo
107.278 236.154 li
107.278 233.537 li
108.732 233.537 li
108.732 236.154 li
cp
f
111.204 236.154 mo
109.75 236.154 li
109.75 233.537 li
111.204 233.537 li
111.204 236.154 li
cp
f
113.675 236.154 mo
112.221 236.154 li
112.221 233.537 li
113.675 233.537 li
113.675 236.154 li
cp
f
116.147 236.154 mo
114.693 236.154 li
114.693 233.537 li
116.147 233.537 li
116.147 236.154 li
cp
f
118.619 236.154 mo
117.165 236.154 li
117.165 233.537 li
118.619 233.537 li
118.619 236.154 li
cp
f
109.895 224.377 mo
97.246 224.377 li
97.246 223.65 li
109.895 223.65 li
109.895 224.377 li
cp
.145098 .258824 .329412 rgb
f
105.679 228.448 mo
103.062 228.448 li
103.062 225.54 li
105.679 225.54 li
105.679 228.448 li
cp
f
101.753 232.519 mo
101.026 232.519 li
101.026 228.012 li
101.753 228.012 li
101.753 232.519 li
cp
f
103.498 221.76 mo
102.189 221.76 li
102.189 218.271 li
103.498 218.271 li
103.498 221.76 li
cp
f
105.388 221.76 mo
104.08 221.76 li
104.08 218.271 li
105.388 218.271 li
105.388 221.76 li
cp
f
107.278 221.76 mo
105.97 221.76 li
105.97 218.271 li
107.278 218.271 li
107.278 221.76 li
cp
f
109.168 221.76 mo
107.86 221.76 li
107.86 218.271 li
109.168 218.271 li
109.168 221.76 li
cp
f
112.221 222.051 mo
110.913 222.051 li
110.913 220.015 li
112.221 220.015 li
112.221 222.051 li
cp
f
114.402 222.051 mo
113.094 222.051 li
113.094 220.015 li
114.402 220.015 li
114.402 222.051 li
cp
f
116.583 222.051 mo
115.275 222.051 li
115.275 220.015 li
116.583 220.015 li
116.583 222.051 li
cp
f
88.5952 230.847 mo
86.0872 230.847 li
85.8691 230.847 li
83.3611 230.847 li
83.143 230.847 li
80.6349 230.847 li
80.4169 230.847 li
77.9088 230.847 li
77.6907 230.847 li
75.1827 230.847 li
74.9646 230.847 li
72.4566 230.847 li
72.2385 230.847 li
69.7305 230.847 li
69.5124 230.847 li
67.0044 230.847 li
66.7863 230.847 li
64.2783 230.847 li
64.0602 230.847 li
61.5522 230.847 li
61.3341 230.847 li
61.3341 231.065 li
61.3341 232.737 li
61.5522 232.737 li
61.5522 231.065 li
64.0602 231.065 li
64.0602 232.737 li
64.2783 232.737 li
64.2783 231.065 li
66.7863 231.065 li
66.7863 232.737 li
67.0044 232.737 li
67.0044 231.065 li
69.5124 231.065 li
69.5124 232.737 li
69.7305 232.737 li
69.7305 231.065 li
69.985 231.065 li
69.985 232.664 li
70.6392 232.664 li
70.6392 231.065 li
72.2385 231.065 li
72.2385 232.737 li
72.4566 232.737 li
72.4566 231.065 li
74.9646 231.065 li
74.9646 232.737 li
75.1827 232.737 li
75.1827 231.065 li
75.8733 231.065 li
75.8733 232.664 li
76.5276 232.664 li
76.5276 231.065 li
77.6907 231.065 li
77.6907 232.737 li
77.9088 232.737 li
77.9088 231.065 li
80.4169 231.065 li
80.4169 232.737 li
80.6349 232.737 li
80.6349 231.065 li
83.143 231.065 li
83.143 232.737 li
83.3611 232.737 li
83.3611 231.065 li
85.8691 231.065 li
85.8691 232.737 li
86.0872 232.737 li
86.0872 231.065 li
88.5952 231.065 li
88.5952 232.737 li
88.8133 232.737 li
88.8133 230.847 li
88.5952 230.847 li
cp
.231373 .34902 .447059 rgb
f
110.801 222.606 mo
109.392 222.606 li
109.392 219.692 li
110.801 219.692 li
110.801 222.606 li
cp
.27451 .392157 .501961 rgb
f
113.812 222.606 mo
112.404 222.606 li
112.404 219.692 li
113.812 219.692 li
113.812 222.606 li
cp
f
116.823 222.606 mo
115.415 222.606 li
115.415 219.692 li
116.823 219.692 li
116.823 222.606 li
cp
f
119.834 222.606 mo
118.426 222.606 li
118.426 219.692 li
119.834 219.692 li
119.834 222.606 li
cp
f
123.74 217.103 mo
122.568 217.103 li
122.568 215.625 li
123.74 215.625 li
123.74 217.103 li
cp
.145098 .258824 .329412 rgb
f
121.864 217.103 mo
120.692 217.103 li
120.692 215.625 li
121.864 215.625 li
121.864 217.103 li
cp
f
152.301 227.333 mo
150.557 227.333 li
150.557 214.733 li
152.301 214.733 li
152.301 227.333 li
cp
.27451 .392157 .501961 rgb
f
153.271 223.65 mo
149.393 223.65 li
149.393 220.645 li
153.271 220.645 li
153.271 223.65 li
cp
f
154.143 225.007 mo
148.424 225.007 li
148.424 222.875 li
154.143 222.875 li
154.143 225.007 li
cp
.145098 .258824 .329412 rgb
f
155.015 227.261 mo
147.746 227.261 li
147.746 224.595 li
155.015 224.595 li
155.015 227.261 li
cp
.27451 .392157 .501961 rgb
f
173.378 237.073 mo
173.006 237.073 li
173.006 228.135 li
173.378 228.135 li
173.378 237.073 li
cp
f
176.078 237.073 mo
175.706 237.073 li
175.706 228.135 li
176.078 228.135 li
176.078 237.073 li
cp
f
142.748 236.887 mo
142.283 236.887 li
142.283 227.483 li
142.748 227.483 li
142.748 236.887 li
cp
.145098 .258824 .329412 rgb
f
145.681 236.887 mo
145.215 236.887 li
145.215 227.483 li
145.681 227.483 li
145.681 236.887 li
cp
f
181.757 221.711 mo
154.013 221.711 li
154.013 221.246 li
181.757 221.246 li
181.757 221.711 li
cp
.27451 .392157 .501961 rgb
f
155.41 223.026 mo
155.131 223.026 li
155.131 221.237 li
155.41 221.237 li
155.41 223.026 li
cp
f
158.669 223.026 mo
158.389 223.026 li
158.389 221.237 li
158.669 221.237 li
158.669 223.026 li
cp
f
161.927 223.026 mo
161.648 223.026 li
161.648 221.237 li
161.927 221.237 li
161.927 223.026 li
cp
f
165.186 223.026 mo
164.907 223.026 li
164.907 221.237 li
165.186 221.237 li
165.186 223.026 li
cp
f
168.445 223.026 mo
168.166 223.026 li
168.166 221.237 li
168.445 221.237 li
168.445 223.026 li
cp
f
171.704 223.026 mo
171.424 223.026 li
171.424 221.237 li
171.704 221.237 li
171.704 223.026 li
cp
f
174.962 223.026 mo
174.683 223.026 li
174.683 221.237 li
174.962 221.237 li
174.962 223.026 li
cp
f
178.221 223.026 mo
177.942 223.026 li
177.942 221.237 li
178.221 221.237 li
178.221 223.026 li
cp
f
147.552 236.922 mo
147.552 236.549 li
201.788 236.549 li
201.788 236.922 li
147.552 236.922 li
cp
f
234.458 233.595 mo
252.128 233.595 li
252.128 233.333 li
234.458 233.333 li
234.458 233.595 li
cp
.145098 .258824 .329412 rgb
f
237.086 234.033 mo
241.028 234.033 li
241.028 232.807 li
237.086 232.807 li
237.086 234.033 li
cp
.231373 .34902 .447059 rgb
f
238.967 236.661 mo
234.704 236.661 li
233.792 236.203 233.051 235.341 232.837 234.34 cv
232.523 232.865 233.464 231.668 234.94 231.668 cv
237.689 231.668 li
239.164 231.668 239.531 232.865 239.845 234.34 cv
240.058 235.341 239.685 236.203 238.967 236.661 cv
cp
.27451 .392157 .501961 rgb
f
139.991 249.53 mo
31.2379 249.53 li
31.2379 235.572 li
139.991 235.572 li
139.991 249.53 li
cp
f
236.891 234.67 mo
234.787 237.026 li
42.5464 237.026 li
41.3855 239.782 35.8115 241.873 29.1054 241.873 cv
5.63621 241.873 li
6.52121 248.658 li
272.88 248.658 li
287.419 232.374 li
236.891 234.67 li
cp
.160784 .317647 .415686 rgb
f
26.8105 253.884 mo
35.0675 254.481 44.8596 255.227 54.4258 255.967 cv
26.8105 255.967 li
26.8105 253.884 li
cp
272.81 248.311 mo
6.39561 248.311 li
6.6508 252.649 li
6.85951 252.649 7.12911 252.655 7.42671 252.663 cv
8.94751 260.05 li
13.5408 260.05 li
14.9783 253.067 li
17.5743 253.234 20.6295 253.443 24.0035 253.683 cv
24.0035 255.967 li
20.4308 255.967 li
20.4308 257.243 li
69.0891 257.243 li
79.0114 258.387 80.91 259.539 80.91 259.539 cv
80.91 259.539 179.507 259.539 241.167 259.539 cv
246.46 259.539 253.315 264.133 260.816 264.133 cv
271.024 264.133 272.048 264.393 269.493 259.794 cv
266.941 255.201 272.81 248.311 272.81 248.311 cv
cp
.894118 .207843 .360784 rgb
f
43.9124 235.567 mo
43.9124 232.907 li
38.6783 232.907 li
38.6783 235.567 li
43.9124 235.567 li
cp
.145098 .258824 .329412 rgb
f
42.9662 232.077 mo
42.9662 230.435 li
39.6245 230.435 li
39.6245 232.077 li
42.9662 232.077 li
cp
f
44.7594 234.021 mo
44.7594 232.81 li
37.9767 232.81 li
37.9767 234.021 li
44.7594 234.021 li
cp
.231373 .34902 .447059 rgb
f
10.6797 241.942 mo
7.19031 241.942 li
7.19031 236.998 li
10.6797 236.998 li
10.6797 241.942 li
cp
.27451 .392157 .501961 rgb
f
16.5486 241.942 mo
13.0592 241.942 li
13.0592 236.998 li
16.5486 236.998 li
16.5486 241.942 li
cp
f
10.6797 238.476 mo
7.19031 238.476 li
7.19031 237.486 li
10.6797 237.486 li
10.6797 238.476 li
cp
.145098 .258824 .329412 rgb
f
27.1799 238.8 mo
17.1941 238.8 li
17.1941 238.537 li
27.1799 238.537 li
27.1799 238.8 li
cp
f
24.552 239.238 mo
20.6103 239.238 li
20.6103 238.011 li
24.552 238.011 li
24.552 239.238 li
cp
.231373 .34902 .447059 rgb
f
22.6705 241.865 mo
26.9335 241.865 li
27.846 241.408 28.587 240.546 28.8004 239.544 cv
29.1148 238.069 28.1736 236.873 26.6981 236.873 cv
23.9491 236.873 li
22.4736 236.873 22.1073 238.069 21.7928 239.544 cv
21.5794 240.546 21.9529 241.408 22.6705 241.865 cv
cp
.27451 .392157 .501961 rgb
f
16.5486 238.476 mo
13.0592 238.476 li
13.0592 237.486 li
16.5486 237.486 li
16.5486 238.476 li
cp
.145098 .258824 .329412 rgb
f
37.9259 240.806 mo
5.6488 240.806 li
5.6488 239.934 li
37.9259 239.934 li
37.9259 240.806 li
cp
f
45.0179 233.269 mo
41.6739 233.269 38.0723 233.269 35.1789 233.269 cv
33.1338 233.269 35.4189 231.102 39.9186 231.102 cv
43.9932 231.102 45.1984 231.234 46.8203 231.234 cv
47.3291 231.234 48.0782 233.269 45.0179 233.269 cv
cp
.27451 .392157 .501961 rgb
f
177.503 219.288 mo
176.63 219.288 li
176.63 200.969 li
177.503 200.969 li
177.503 219.288 li
cp
.145098 .258824 .329412 rgb
f
182.155 206.267 mo
175.467 206.267 li
175.467 204.031 li
182.155 204.031 li
182.155 206.267 li
cp
.27451 .392157 .501961 rgb
f
175.467 205.978 mo
175.467 206.267 li
182.155 206.267 li
182.155 205.978 li
175.467 205.978 li
cp
.145098 .258824 .329412 rgb
f
177.067 208.885 mo
177.067 209.174 li
182.155 206.267 li
182.155 205.978 li
177.067 208.885 li
cp
f
184.918 210.856 mo
175.322 210.856 li
175.322 209.256 li
184.918 209.256 li
184.918 210.856 li
cp
.27451 .392157 .501961 rgb
f
184.918 210.867 mo
175.322 210.867 li
175.322 210.553 li
184.918 210.553 li
184.918 210.867 li
cp
.145098 .258824 .329412 rgb
f
184.041 218.271 mo
183.459 218.271 li
181.714 210.71 li
182.296 210.71 li
184.041 218.271 li
cp
f
182.882 214.49 mo
177.067 214.49 li
177.067 214.2 li
182.882 214.2 li
182.882 214.49 li
cp
f
183.318 214.636 mo
177.067 211.001 li
177.067 210.71 li
183.318 214.345 li
183.318 214.636 li
cp
f
183.682 218.198 mo
177.43 214.563 li
177.43 214.272 li
183.682 217.907 li
183.682 218.198 li
cp
f
183.366 214.272 mo
177.114 217.907 li
177.114 218.198 li
183.366 214.563 li
183.366 214.272 li
cp
f
182.155 210.71 mo
177.067 214.345 li
177.067 214.636 li
182.155 211.001 li
182.155 210.71 li
cp
f
186.967 217.046 mo
186.687 216.711 li
198.053 207.186 li
198.333 207.52 li
186.967 217.046 li
cp
f
194.514 226.849 mo
189.279 226.849 li
189.279 220.015 li
194.514 220.015 li
194.514 226.849 li
cp
.231373 .34902 .447059 rgb
f
140.895 183.134 mo
141.414 183.134 li
141.414 227.285 li
140.895 227.285 li
140.895 183.134 li
cp
.145098 .258824 .329412 rgb
f
134.643 195.589 mo
135.162 195.589 li
132.109 227.285 li
131.59 227.285 li
134.643 195.589 li
cp
f
146.776 196.072 mo
133.11 196.072 li
133.11 195.582 li
146.776 195.582 li
146.776 196.072 li
cp
f
146.292 192.17 mo
138.731 192.17 li
138.731 190.502 li
146.292 190.502 li
146.292 192.17 li
cp
f
141.353 200.417 mo
134.492 200.417 li
134.492 199.927 li
141.353 199.927 li
141.353 200.417 li
cp
f
141.353 204.698 mo
123.998 204.698 li
123.998 204.208 li
141.353 204.208 li
141.353 204.698 li
cp
f
141.353 209.065 mo
128.651 209.065 li
128.478 208.575 li
141.353 208.575 li
141.353 209.065 li
cp
f
141.353 213.912 mo
130.529 213.912 li
130.529 213.421 li
141.353 213.421 li
141.353 213.912 li
cp
f
141.353 219.094 mo
132.528 219.094 li
132.528 218.604 li
141.353 218.604 li
141.353 219.094 li
cp
f
141.353 223.656 mo
132.237 223.656 li
132.237 223.165 li
141.353 223.165 li
141.353 223.656 li
cp
f
141.353 227.41 mo
132.237 223.992 li
132.237 223.502 li
141.353 226.92 li
141.353 227.41 li
cp
f
141.252 222.801 mo
132.78 219.383 li
132.78 218.893 li
141.252 222.311 li
141.252 222.801 li
cp
f
141.296 213.806 mo
133.697 209.225 li
133.697 208.735 li
141.296 213.316 li
141.296 213.806 li
cp
f
141.184 218.811 mo
133.197 214.23 li
133.197 213.74 li
141.184 218.321 li
141.184 218.811 li
cp
f
141.058 208.972 mo
134.145 204.972 li
134.145 204.482 li
141.058 208.481 li
141.058 208.972 li
cp
f
141.155 204.652 mo
134.622 200.749 li
134.622 200.259 li
141.155 204.162 li
141.155 204.652 li
cp
f
141.445 200.238 mo
134.959 196.335 li
134.959 195.845 li
141.445 199.747 li
141.445 200.238 li
cp
f
134.629 200.225 mo
141.115 196.322 li
141.115 195.832 li
134.629 199.734 li
134.629 200.225 li
cp
f
141.3 200.258 mo
144.543 196.355 li
144.543 195.865 li
141.3 199.767 li
141.3 200.258 li
cp
f
133.982 204.518 mo
141.035 200.615 li
141.035 200.125 li
133.982 204.028 li
133.982 204.518 li
cp
f
133.557 208.981 mo
141.095 204.691 li
141.095 204.201 li
133.557 208.491 li
133.557 208.981 li
cp
f
133.11 213.559 mo
141.205 209.269 li
141.205 208.779 li
133.11 213.069 li
133.11 213.559 li
cp
f
132.505 218.847 mo
140.988 214.072 li
140.988 213.582 li
132.505 218.357 li
132.505 218.847 li
cp
f
132.067 223.472 mo
141.034 219.181 li
141.034 218.691 li
132.067 222.982 li
132.067 223.472 li
cp
f
131.606 227.295 mo
141.058 223.489 li
141.058 222.999 li
131.606 226.804 li
131.606 227.295 li
cp
f
132.63 218.946 mo
126.716 204.885 li
126.809 204.401 li
132.723 218.462 li
132.63 218.946 li
cp
f
142.851 184.103 mo
139.458 184.103 li
139.458 183.605 li
142.851 183.605 li
142.851 184.103 li
cp
f
142.269 183.176 mo
139.846 183.176 li
139.846 182.511 li
142.269 182.511 li
142.269 183.176 li
cp
f
141.736 188.368 mo
140.379 188.368 li
140.379 187.205 li
141.736 187.205 li
141.736 188.368 li
cp
f
141.252 195.735 mo
139.991 195.735 li
139.991 190.016 li
141.252 190.016 li
141.252 195.735 li
cp
f
133.11 193.699 mo
133.11 195.929 li
133.497 195.929 li
133.497 193.99 li
146.195 193.99 li
146.195 195.929 li
146.583 195.929 li
146.583 193.699 li
133.11 193.699 li
cp
f
146.292 194.862 mo
133.303 194.862 li
133.303 194.669 li
146.292 194.669 li
146.292 194.862 li
cp
f
143.772 196.026 mo
143.578 196.026 li
143.578 193.796 li
143.772 193.796 li
143.772 196.026 li
cp
f
136.987 196.026 mo
136.793 196.026 li
136.793 193.796 li
136.987 193.796 li
136.987 196.026 li
cp
f
140.09 195.636 mo
139.896 195.636 li
139.02 192.053 li
139.214 192.053 li
140.09 195.636 li
cp
f
140.817 195.394 mo
140.623 195.394 li
144.885 191.617 li
145.078 191.617 li
140.817 195.394 li
cp
f
131.631 202.248 mo
125.598 202.248 li
124.411 202.248 123.446 201.283 123.446 200.097 cv
123.446 198.91 124.411 197.945 125.598 197.945 cv
131.631 197.945 li
132.818 197.945 133.783 198.91 133.783 200.097 cv
133.783 201.283 132.818 202.248 131.631 202.248 cv
cp
131.631 197.77 mo
125.598 197.77 li
124.313 197.77 123.271 198.812 123.271 200.097 cv
123.271 201.381 124.313 202.423 125.598 202.423 cv
131.631 202.423 li
132.916 202.423 133.958 201.381 133.958 200.097 cv
133.958 198.812 132.916 197.77 131.631 197.77 cv
cp
f
133.74 199.515 mo
123.489 199.515 li
123.489 199.297 li
133.74 199.297 li
133.74 199.515 li
cp
f
133.74 200.678 mo
123.489 200.678 li
123.489 200.46 li
133.74 200.46 li
133.74 200.678 li
cp
f
133.231 201.841 mo
123.998 201.841 li
123.998 201.623 li
133.231 201.623 li
133.231 201.841 li
cp
f
133.231 198.643 mo
123.998 198.643 li
123.998 198.425 li
133.231 198.425 li
133.231 198.643 li
cp
f
125.089 202.277 mo
125.016 202.277 li
125.016 197.916 li
125.089 197.916 li
125.089 202.277 li
cp
f
126.143 202.277 mo
126.07 202.277 li
126.07 197.916 li
126.143 197.916 li
126.143 202.277 li
cp
f
127.197 202.277 mo
127.124 202.277 li
127.124 197.916 li
127.197 197.916 li
127.197 202.277 li
cp
f
128.251 202.277 mo
128.178 202.277 li
128.178 197.916 li
128.251 197.916 li
128.251 202.277 li
cp
f
129.305 202.277 mo
129.232 202.277 li
129.232 197.916 li
129.305 197.916 li
129.305 202.277 li
cp
f
130.359 202.277 mo
130.287 202.277 li
130.287 197.916 li
130.359 197.916 li
130.359 202.277 li
cp
f
131.413 202.277 mo
131.34 202.277 li
131.34 197.916 li
131.413 197.916 li
131.413 202.277 li
cp
f
132.467 202.277 mo
132.395 202.277 li
132.395 197.916 li
132.467 197.916 li
132.467 202.277 li
cp
f
133.521 201.187 mo
133.449 201.187 li
133.449 199.006 li
133.521 199.006 li
133.521 201.187 li
cp
f
124.107 201.696 mo
124.035 201.696 li
124.035 198.497 li
124.107 198.497 li
124.107 201.696 li
cp
f
129.014 202.314 mo
128.433 202.314 li
128.433 198.97 li
129.014 198.97 li
129.014 202.314 li
cp
f
127.052 201.296 mo
127.052 200.714 li
130.396 200.714 li
130.396 201.296 li
127.052 201.296 li
cp
f
130.105 204.313 mo
127.415 204.313 li
127.415 203.222 li
130.105 203.222 li
130.105 204.313 li
cp
f
128.069 203.586 mo
127.706 203.586 li
127.706 200.896 li
128.069 200.896 li
128.069 203.586 li
cp
f
129.814 203.586 mo
129.45 203.586 li
129.45 200.896 li
129.814 200.896 li
129.814 203.586 li
cp
f
28.4783 257.243 mo
27.865 257.185 27.2572 257.129 26.659 257.073 cv
26.659 257.243 li
28.4783 257.243 li
cp
.94902 .45098 .427451 rgb
f
268.854 256.973 mo
268.972 252.819 272.81 248.311 272.81 248.311 cv
6.39561 248.311 li
6.55651 251.046 li
268.854 256.973 li
cp
f
5.83221 243.376 mo
6.52121 248.658 li
272.88 248.658 li
280.008 240.675 li
5.83221 243.376 li
cp
.145098 .258824 .329412 rgb
f
174.259 316.753 mo
174.259 317.162 173.822 317.52 173.284 317.52 cv
167.674 317.52 li
167.135 317.52 166.958 317.162 167.255 316.753 cv
168.98 314.375 li
169.137 314.159 169.546 313.993 169.902 313.993 cv
173.614 313.993 li
173.97 313.993 174.259 314.159 174.259 314.375 cv
174.259 316.753 li
cp
.309804 .427451 .54902 rgb
f
158.043 322.313 mo
142.775 322.313 li
142.775 319.56 li
158.043 319.56 li
158.043 322.313 li
cp
f
233.131 289.393 mo
229.877 289.393 li
229.877 286.778 li
233.131 286.778 li
233.131 289.393 li
cp
.211765 .333333 .431373 rgb
f
234.377 286.876 mo
234.219 287.033 li
228.877 287.033 li
228.72 286.876 li
228.72 284.938 li
228.877 284.781 li
234.219 284.781 li
234.377 284.938 li
234.377 286.876 li
cp
.309804 .427451 .54902 rgb
f
278.78 310.167 mo
276.102 310.167 li
276.102 308.015 li
278.78 308.015 li
278.78 310.167 li
cp
.211765 .333333 .431373 rgb
f
279.805 308.096 mo
279.676 308.225 li
275.279 308.225 li
275.149 308.096 li
275.149 306.501 li
275.279 306.372 li
279.676 306.372 li
279.805 306.501 li
279.805 308.096 li
cp
.309804 .427451 .54902 rgb
f
184.585 310.033 mo
183.155 310.033 li
183.155 308.884 li
184.585 308.884 li
184.585 310.033 li
cp
.211765 .333333 .431373 rgb
f
185.132 308.927 mo
185.063 308.996 li
182.716 308.996 li
182.647 308.927 li
182.647 308.076 li
182.716 308.007 li
185.063 308.007 li
185.132 308.076 li
185.132 308.927 li
cp
.309804 .427451 .54902 rgb
f
251.595 300.672 mo
253.453 300.672 li
253.453 296.883 li
252.635 296.883 li
251.595 300.672 li
cp
f
255.598 300.672 mo
253.741 300.672 li
253.741 296.883 li
254.558 296.883 li
255.598 300.672 li
cp
f
292.393 317.442 mo
296.381 317.442 li
296.381 312.176 li
294.627 312.176 li
292.393 317.442 li
cp
f
299.987 317.442 mo
295.999 317.442 li
295.999 312.176 li
297.754 312.176 li
299.987 317.442 li
cp
.211765 .333333 .431373 rgb
f
210.855 289.393 mo
207.601 289.393 li
207.601 286.778 li
210.855 286.778 li
210.855 289.393 li
cp
f
246.021 311.05 mo
235.423 289.27 li
235.274 289.064 234.512 288.899 233.72 288.899 cv
206.543 288.899 li
205.752 288.899 204.99 289.064 204.84 289.27 cv
191.239 311.05 li
246.021 311.05 li
cp
.360784 .470588 .603922 rgb
f
245.316 309.6 mo
235.423 289.27 li
235.331 289.143 230.55 289.031 230.128 288.964 cv
238.638 309.6 li
245.316 309.6 li
cp
.223529 .388235 .517647 rgb
f
268.386 321.238 mo
259.827 300.965 li
259.678 300.728 258.916 300.537 258.124 300.537 cv
234.692 300.537 li
243.432 321.238 li
268.386 321.238 li
cp
.309804 .427451 .54902 rgb
f
286.174 318.235 mo
281.208 310.351 li
281.059 310.114 280.297 309.923 279.505 309.923 cv
184.017 309.923 li
183.225 309.923 182.463 310.114 182.314 310.351 cv
177.347 318.235 li
286.174 318.235 li
cp
.211765 .333333 .431373 rgb
f
330.294 316.416 mo
337.664 310.814 li
337.537 310.647 li
330.167 316.249 li
330.294 316.416 li
cp
f
332.178 315.424 mo
334.687 313.517 li
334.094 312.737 li
331.585 314.643 li
332.178 315.424 li
cp
.309804 .427451 .54902 rgb
f
333.742 319.662 mo
326.37 320.881 li
324.947 319.892 325.478 318.351 326.07 316.731 cv
326.678 315.068 327.262 313.874 328.681 313.874 cv
331.081 313.874 li
332.255 313.874 332.818 314.677 333.597 315.987 cv
334.304 317.178 334.402 318.594 333.742 319.662 cv
cp
.360784 .470588 .603922 rgb
f
309.645 314.351 mo
317.015 308.749 li
316.888 308.582 li
309.518 314.184 li
309.645 314.351 li
cp
.211765 .333333 .431373 rgb
f
311.529 313.359 mo
314.038 311.452 li
313.444 310.672 li
310.936 312.579 li
311.529 313.359 li
cp
.309804 .427451 .54902 rgb
f
313.093 317.597 mo
305.721 318.816 li
304.298 317.827 304.829 316.286 305.421 314.666 cv
306.028 313.003 306.612 311.809 308.031 311.809 cv
310.432 311.809 li
311.605 311.809 312.169 312.612 312.947 313.922 cv
313.655 315.113 313.753 316.529 313.093 317.597 cv
cp
.360784 .470588 .603922 rgb
f
324.281 328.151 mo
166.024 328.151 li
166.024 316.994 li
324.281 316.994 li
324.281 328.151 li
cp
.309804 .427451 .54902 rgb
f
330.407 316.273 mo
328.726 318.156 li
175.064 318.156 li
174.136 320.359 169.68 322.03 164.32 322.03 cv
141.776 322.03 li
143.637 327.453 li
359.174 327.453 li
370.796 314.437 li
330.407 316.273 li
cp
.152941 .254902 .321569 rgb
f
162.486 331.631 mo
169.086 332.108 176.913 332.704 184.559 333.296 cv
162.486 333.296 li
162.486 331.631 li
cp
359.118 327.176 mo
143.478 327.176 li
144.419 330.644 li
144.586 330.644 146.754 330.648 146.992 330.655 cv
148.207 336.559 li
151.879 336.559 li
153.028 330.978 li
155.103 331.111 157.545 331.278 160.242 331.47 cv
160.242 333.296 li
157.386 333.296 li
157.386 334.316 li
196.28 334.316 li
204.211 335.23 205.728 336.151 205.728 336.151 cv
205.728 336.151 284.539 336.151 333.825 336.151 cv
338.056 336.151 343.535 339.823 349.531 339.823 cv
357.69 339.823 358.509 340.031 356.467 336.355 cv
354.427 332.684 359.118 327.176 359.118 327.176 cv
cp
.894118 .207843 .360784 rgb
f
171.37 321.178 mo
141.605 321.178 li
141.457 320.48 li
171.37 320.48 li
171.37 321.178 li
cp
.0156863 .0352941 .0509804 rgb
f
355.956 334.1 mo
356.05 330.779 359.118 327.176 359.118 327.176 cv
143.478 327.176 li
144.071 329.363 li
355.956 334.1 li
cp
.94902 .45098 .427451 rgb
f
142.188 323.231 mo
143.637 327.453 li
359.174 327.453 li
369.871 315.473 li
309.471 323.439 li
142.188 323.231 li
cp
.0980392 .192157 .239216 rgb
f
236.385 288.648 mo
236.385 288.925 236.161 289.149 235.884 289.149 cv
203.597 289.149 li
203.32 289.149 203.096 288.925 203.096 288.648 cv
203.096 288.372 203.32 288.148 203.597 288.148 cv
235.884 288.148 li
236.161 288.148 236.385 288.372 236.385 288.648 cv
cp
.309804 .427451 .54902 rgb
f
260.57 300.584 mo
260.57 300.861 260.346 301.085 260.069 301.085 cv
234.522 301.085 li
234.245 301.085 234.021 300.861 234.021 300.584 cv
234.021 300.308 234.245 300.084 234.522 300.084 cv
260.069 300.084 li
260.346 300.084 260.57 300.308 260.57 300.584 cv
cp
.211765 .333333 .431373 rgb
f
281.743 310.189 mo
281.743 310.466 281.519 310.69 281.242 310.69 cv
182.36 310.69 li
182.084 310.69 181.86 310.466 181.86 310.189 cv
181.86 309.913 182.084 309.689 182.36 309.689 cv
281.242 309.689 li
281.519 309.689 281.743 309.913 281.743 310.189 cv
cp
.309804 .427451 .54902 rgb
f
229.127 294.28 mo
229.127 294.487 228.958 294.655 228.751 294.655 cv
210.48 294.655 li
210.272 294.655 210.104 294.487 210.104 294.28 cv
210.104 291.527 li
210.104 291.319 210.272 291.151 210.48 291.151 cv
228.751 291.151 li
228.958 291.151 229.127 291.319 229.127 291.527 cv
229.127 294.28 li
cp
f
229.127 300.913 mo
229.127 301.12 228.958 301.288 228.751 301.288 cv
210.48 301.288 li
210.272 301.288 210.104 301.12 210.104 300.913 cv
210.104 296.282 li
210.104 296.075 210.272 295.907 210.48 295.907 cv
228.751 295.907 li
228.958 295.907 229.127 296.075 229.127 296.282 cv
229.127 300.913 li
cp
f
212.1 286.876 mo
211.943 287.033 li
206.601 287.033 li
206.444 286.876 li
206.444 284.938 li
206.601 284.781 li
211.943 284.781 li
212.1 284.938 li
212.1 286.876 li
cp
f
208.352 294.405 mo
204.848 294.405 li
204.848 291.652 li
208.352 291.652 li
208.352 294.405 li
cp
f
208.352 298.41 mo
204.848 298.41 li
204.848 295.657 li
208.352 295.657 li
208.352 298.41 li
cp
f
206.85 302.857 mo
204.848 302.857 li
204.848 299.219 li
206.85 299.219 li
206.85 302.857 li
cp
f
236.404 294.655 mo
234.402 294.655 li
233.362 291.017 li
235.365 291.017 li
236.404 294.655 li
cp
.211765 .333333 .431373 rgb
f
237.906 298.978 mo
235.904 298.978 li
234.864 295.339 li
236.866 295.339 li
237.906 298.978 li
cp
f
258.661 303.416 mo
243.143 303.416 li
243.143 302.665 li
258.661 302.665 li
258.661 303.416 li
cp
f
216.58 288.398 mo
219.18 288.398 li
219.18 283.094 li
218.036 283.094 li
216.58 288.398 li
cp
.309804 .427451 .54902 rgb
f
222.184 288.398 mo
219.584 288.398 li
219.584 283.094 li
220.728 283.094 li
222.184 288.398 li
cp
f
298.744 309.387 mo
298.799 309.582 298.831 309.789 298.831 310.006 cv
298.831 311.081 298.088 311.952 297.171 311.952 cv
295.24 311.952 li
294.323 311.952 293.58 311.081 293.58 310.006 cv
293.58 309.789 293.611 309.582 293.667 309.387 cv
293.333 309.737 293.127 310.209 293.127 310.73 cv
293.127 311.805 293.999 312.677 295.074 312.677 cv
297.337 312.677 li
298.412 312.677 299.284 311.805 299.284 310.73 cv
299.284 310.209 299.078 309.737 298.744 309.387 cv
cp
.211765 .333333 .431373 rgb
f
298.695 309.576 mo
298.695 310.913 297.611 311.998 296.273 311.998 cv
294.936 311.998 293.852 310.913 293.852 309.576 cv
293.852 308.238 294.936 307.154 296.273 307.154 cv
297.611 307.154 298.695 308.238 298.695 309.576 cv
cp
.360784 .470588 .603922 rgb
f
227.374 304.417 mo
220.366 304.417 li
220.366 302.915 li
227.374 302.915 li
227.374 304.417 li
cp
.211765 .333333 .431373 rgb
f
218.114 305.919 mo
212.607 305.919 li
212.607 304.918 li
218.114 304.918 li
218.114 305.919 li
cp
f
234.132 307.671 mo
222.869 307.671 li
222.869 306.67 li
234.132 306.67 li
234.132 307.671 li
cp
f
208.102 303.416 mo
198.841 303.416 li
198.841 301.163 li
208.102 301.163 li
208.102 303.416 li
cp
f
179.64 319.973 mo
176.493 319.973 li
176.493 318.897 li
179.64 318.897 li
179.64 319.973 li
cp
.0156863 .0352941 .0509804 rgb
f
184.395 319.973 mo
181.249 319.973 li
181.249 318.897 li
184.395 318.897 li
184.395 319.973 li
cp
f
189.151 319.973 mo
186.004 319.973 li
186.004 318.897 li
189.151 318.897 li
189.151 319.973 li
cp
f
193.907 319.973 mo
190.76 319.973 li
190.76 318.897 li
193.907 318.897 li
193.907 319.973 li
cp
f
198.662 319.973 mo
195.516 319.973 li
195.516 318.897 li
198.662 318.897 li
198.662 319.973 li
cp
f
203.418 319.973 mo
200.271 319.973 li
200.271 318.897 li
203.418 318.897 li
203.418 319.973 li
cp
f
214.86 323.318 mo
214.86 320.185 li
203.847 320.185 li
203.847 323.318 li
214.86 323.318 li
cp
.211765 .333333 .431373 rgb
f
216.245 320.23 mo
202.228 320.23 li
202.228 319.729 li
216.245 319.729 li
216.245 320.23 li
cp
.360784 .470588 .603922 rgb
f
231.379 323.318 mo
231.379 320.185 li
220.366 320.185 li
220.366 323.318 li
231.379 323.318 li
cp
.211765 .333333 .431373 rgb
f
232.764 320.23 mo
218.748 320.23 li
218.748 319.729 li
232.764 319.729 li
232.764 320.23 li
cp
.360784 .470588 .603922 rgb
f
171.309 160.035 mo
171.309 160.575 170.871 161.013 170.331 161.013 cv
169.792 161.013 169.354 160.575 169.354 160.035 cv
169.354 147.82 li
169.354 147.28 169.792 146.842 170.331 146.842 cv
170.871 146.842 171.309 147.28 171.309 147.82 cv
171.309 160.035 li
cp
.266667 .447059 .517647 rgb
f
174.206 155.769 mo
174.339 155.996 174.263 156.288 174.035 156.422 cv
173.808 156.555 173.516 156.479 173.383 156.252 cv
170.366 151.109 li
170.233 150.882 170.309 150.589 170.537 150.456 cv
170.764 150.323 171.056 150.399 171.189 150.626 cv
174.206 155.769 li
cp
f
175.721 161.53 mo
175.721 161.942 175.386 162.277 174.973 162.277 cv
174.561 162.277 174.226 161.942 174.226 161.53 cv
174.226 152.189 li
174.226 151.777 174.561 151.442 174.973 151.442 cv
175.386 151.442 175.721 151.777 175.721 152.189 cv
175.721 161.53 li
cp
f
178.408 161.53 mo
178.408 161.942 178.074 162.277 177.661 162.277 cv
177.248 162.277 176.914 161.942 176.914 161.53 cv
176.914 152.189 li
176.914 151.777 177.248 151.442 177.661 151.442 cv
178.074 151.442 178.408 151.777 178.408 152.189 cv
178.408 161.53 li
cp
f
357.292 154.163 mo
357.292 156.912 355.064 159.141 352.315 159.141 cv
336.301 159.141 li
333.552 159.141 331.324 156.912 331.324 154.163 cv
331.324 151.414 333.552 149.186 336.301 149.186 cv
352.315 149.186 li
355.064 149.186 357.292 151.414 357.292 154.163 cv
cp
f
318.556 144.209 mo
325.609 140.763 li
325.53 140.603 li
318.478 144.049 li
318.556 144.209 li
cp
.117647 .270588 .34902 rgb
f
320.287 143.694 mo
322.687 142.521 li
322.322 141.774 li
319.922 142.947 li
320.287 143.694 li
cp
.160784 .317647 .415686 rgb
f
321.373 144.396 mo
320.942 143.178 320.605 142.417 319.629 142.223 cv
317.633 141.828 li
316.452 141.594 315.77 142.492 314.991 143.774 cv
314.231 145.024 313.536 146.219 314.556 147.275 cv
320.889 147.476 li
321.614 146.697 321.766 145.502 321.373 144.396 cv
cp
.266667 .447059 .517647 rgb
f
327.789 154.091 mo
327.789 155.286 326.82 156.255 325.625 156.255 cv
309.467 156.255 li
308.272 156.255 307.303 155.286 307.303 154.091 cv
307.303 147.743 li
307.303 146.548 308.272 145.579 309.467 145.579 cv
325.625 145.579 li
326.82 145.579 327.789 146.548 327.789 147.743 cv
327.789 154.091 li
cp
.345098 .513726 .6 rgb
f
263.747 138.654 mo
263.43 138.654 li
263.43 118.802 li
263.747 118.802 li
263.747 138.654 li
cp
.160784 .317647 .415686 rgb
f
267.932 134.442 mo
267.615 134.442 li
267.615 114.59 li
267.932 114.59 li
267.932 134.442 li
cp
f
254.934 134.471 mo
253.852 134.471 li
253.852 129.061 li
254.934 129.061 li
254.934 134.471 li
cp
f
254.934 131.225 mo
252.986 131.225 li
252.986 127.762 li
254.934 127.762 li
254.934 131.225 li
cp
f
257.162 132.197 mo
256.452 132.197 li
256.452 128.644 li
257.162 128.644 li
257.162 132.197 li
cp
f
257.162 130.065 mo
255.883 130.065 li
255.883 127.791 li
257.162 127.791 li
257.162 130.065 li
cp
f
259.911 132.793 mo
258.883 132.793 li
258.883 127.654 li
259.911 127.654 li
259.911 132.793 li
cp
f
273.977 134.687 mo
271.597 134.687 li
271.597 117.158 li
272.246 117.158 li
273.977 134.687 li
cp
f
246.509 114.949 mo
240.283 114.949 li
240.283 115.117 li
246.509 115.117 li
246.509 114.949 li
cp
f
247.013 117.557 mo
239.862 117.557 li
239.862 117.725 li
247.013 117.725 li
247.013 117.557 li
cp
f
247.182 120.417 mo
239.4 120.417 li
239.4 120.586 li
247.182 120.586 li
247.182 120.417 li
cp
f
247.686 123.53 mo
239.063 123.53 li
239.063 123.698 li
247.686 123.698 li
247.686 123.53 li
cp
f
247.309 123.761 mo
238.22 126.888 li
238.261 127.052 li
247.349 123.924 li
247.309 123.761 li
cp
f
247.667 120.539 mo
238.579 123.666 li
238.619 123.829 li
247.708 120.702 li
247.667 120.539 li
cp
f
246.912 117.736 mo
239.42 120.469 li
239.46 120.633 li
246.952 117.899 li
246.912 117.736 li
cp
f
246.141 115.32 mo
239.882 117.748 li
239.922 117.912 li
246.181 115.483 li
246.141 115.32 li
cp
f
240.202 115.32 mo
246.461 117.748 li
246.421 117.912 li
240.162 115.483 li
240.202 115.32 li
cp
f
239.882 118.192 mo
247.302 120.334 li
247.245 120.501 li
239.825 118.359 li
239.882 118.192 li
cp
f
239.722 120.579 mo
248.138 123.716 li
248.067 123.869 li
239.651 120.732 li
239.722 120.579 li
cp
f
239.151 123.565 mo
248.382 126.5 li
248.3 126.657 li
239.068 123.721 li
239.151 123.565 li
cp
f
238.593 128.993 mo
237.504 128.993 li
239.864 112.295 li
240.953 112.295 li
238.593 128.993 li
cp
f
248.221 128.993 mo
249.31 128.993 li
246.951 112.295 li
245.862 112.295 li
248.221 128.993 li
cp
f
247.124 112.374 mo
247.124 110.661 li
247.124 108.656 245.499 107.031 243.494 107.031 cv
241.489 107.031 239.864 108.656 239.864 110.661 cv
239.864 112.374 li
247.124 112.374 li
cp
.647059 .756863 .8 rgb
f
248.394 112.113 mo
233.874 112.113 li
233.874 112.658 li
248.394 112.658 li
248.394 112.113 li
cp
.160784 .317647 .415686 rgb
f
251.48 136.071 mo
237.141 136.071 li
237.141 127.904 li
251.48 127.904 li
251.48 136.071 li
cp
.27451 .392157 .501961 rgb
f
277.796 139.594 mo
277.796 139.834 277.602 140.027 277.363 140.027 cv
236.246 140.027 li
236.007 140.027 235.813 139.834 235.813 139.594 cv
235.813 132.67 li
235.813 132.431 236.007 132.237 236.246 132.237 cv
277.363 132.237 li
277.602 132.237 277.796 132.431 277.796 132.67 cv
277.796 139.594 li
cp
.160784 .317647 .415686 rgb
f
276.062 132.6 mo
247.681 132.6 li
247.442 132.6 247.248 132.794 247.248 133.033 cv
247.248 139.957 li
247.248 140.196 247.442 140.39 247.681 140.39 cv
276.062 140.39 li
276.062 132.6 li
cp
.27451 .392157 .501961 rgb
f
234.602 137.419 mo
235.502 139.158 234.645 140.746 232.575 140.746 cv
224.706 140.746 li
222.636 140.746 220.958 139.158 220.958 137.419 cv
220.958 129.543 li
220.958 128.773 221.927 128.195 223.122 128.195 cv
227.667 128.195 li
228.862 128.195 230.13 128.773 230.528 129.543 cv
234.602 137.419 li
cp
.160784 .317647 .415686 rgb
f
210.355 134.903 mo
211.653 134.903 li
211.653 126.897 li
210.355 126.897 li
210.355 134.903 li
cp
.117647 .270588 .34902 rgb
f
213.817 134.687 mo
204.728 134.687 li
204.728 132.09 li
213.817 132.09 li
213.817 134.687 li
cp
.27451 .392157 .501961 rgb
f
214.899 140.313 mo
208.407 140.313 li
208.407 130.359 li
214.899 130.359 li
214.899 140.313 li
cp
.117647 .270588 .34902 rgb
f
203.863 143.127 mo
203.863 143.366 203.669 143.56 203.43 143.56 cv
198.02 143.56 li
197.781 143.56 197.587 143.366 197.587 143.127 cv
197.587 140.746 li
197.587 140.507 197.781 140.313 198.02 140.313 cv
203.43 140.313 li
203.669 140.313 203.863 140.507 203.863 140.746 cv
203.863 143.127 li
cp
.27451 .392157 .501961 rgb
f
204.295 150.917 mo
197.587 150.917 li
197.587 143.992 li
204.295 143.992 li
204.295 150.917 li
cp
.231373 .34902 .447059 rgb
f
205.377 144.209 mo
196.505 144.209 li
196.505 143.127 li
205.377 143.127 li
205.377 144.209 li
cp
.117647 .270588 .34902 rgb
f
203.747 155.447 mo
203.652 155.893 203.8 156.255 204.078 156.255 cv
294.113 156.255 li
294.391 156.255 294.539 155.893 294.444 155.447 cv
290.787 138.178 li
290.708 137.803 290.439 137.5 290.186 137.5 cv
208.005 137.5 li
207.752 137.5 207.483 137.803 207.404 138.178 cv
203.747 155.447 li
cp
.27451 .392157 .501961 rgb
f
214.556 153.186 mo
214.467 153.446 214.606 153.658 214.868 153.658 cv
299.904 153.658 li
300.166 153.658 300.306 153.446 300.217 153.186 cv
296.763 143.09 li
296.688 142.871 296.433 142.694 296.194 142.694 cv
218.578 142.694 li
218.339 142.694 218.085 142.871 218.009 143.09 cv
214.556 153.186 li
cp
.160784 .317647 .415686 rgb
f
255.411 159.048 mo
255.411 159.048 li
182.401 159.048 li
181.392 159.048 li
189.13 150.637 li
255.411 150.637 li
255.411 159.048 li
cp
.231373 .34902 .447059 rgb
f
282.894 157.966 mo
282.894 157.966 li
209.885 157.966 li
208.875 157.966 li
216.614 149.555 li
282.894 149.555 li
282.894 157.966 li
cp
.117647 .270588 .34902 rgb
f
323.373 159.384 mo
314.625 161.067 li
215.037 159.384 li
215.037 159.384 226.567 155.229 226.567 149.291 cv
307.56 149.291 li
323.373 159.384 li
cp
.266667 .447059 .517647 rgb
f
330.111 155.229 mo
301.818 155.229 168.047 155.229 168.047 155.229 cv
167.501 154.683 167.598 161.153 167.598 161.153 cv
168.299 166.528 li
168.299 166.528 360.141 167.16 378.258 167.16 cv
385.455 156.47 392.405 147.535 396.624 144.309 cv
398.792 142.651 342.974 155.229 330.111 155.229 cv
cp
.345098 .513726 .6 rgb
f
330.111 156.383 mo
341.541 156.383 386.883 146.453 395.325 145.403 cv
395.781 144.988 396.216 144.621 396.624 144.309 cv
398.792 142.651 342.974 155.229 330.111 155.229 cv
301.818 155.229 168.047 155.229 168.047 155.229 cv
167.875 155.057 167.767 155.583 167.699 156.383 cv
186.365 156.383 304.081 156.383 330.111 156.383 cv
cp
.647059 .756863 .8 rgb
f
230.215 150.84 mo
228.062 150.84 li
228.062 150.162 li
230.215 150.162 li
230.215 150.84 li
cp
.160784 .317647 .415686 rgb
f
233.228 150.84 mo
231.075 150.84 li
231.075 150.162 li
233.228 150.162 li
233.228 150.84 li
cp
f
236.241 150.84 mo
234.088 150.84 li
234.088 150.162 li
236.241 150.162 li
236.241 150.84 li
cp
f
239.254 150.84 mo
237.101 150.84 li
237.101 150.162 li
239.254 150.162 li
239.254 150.84 li
cp
f
242.267 150.84 mo
240.114 150.84 li
240.114 150.162 li
242.267 150.162 li
242.267 150.84 li
cp
f
245.279 150.84 mo
243.127 150.84 li
243.127 150.162 li
245.279 150.162 li
245.279 150.84 li
cp
f
248.292 150.84 mo
246.14 150.84 li
246.14 150.162 li
248.292 150.162 li
248.292 150.84 li
cp
f
251.305 150.84 mo
249.153 150.84 li
249.153 150.162 li
251.305 150.162 li
251.305 150.84 li
cp
f
254.318 150.84 mo
252.165 150.84 li
252.165 150.162 li
254.318 150.162 li
254.318 150.84 li
cp
f
257.331 150.84 mo
255.178 150.84 li
255.178 150.162 li
257.331 150.162 li
257.331 150.84 li
cp
f
260.344 150.84 mo
258.191 150.84 li
258.191 150.162 li
260.344 150.162 li
260.344 150.84 li
cp
f
263.357 150.84 mo
261.204 150.84 li
261.204 150.162 li
263.357 150.162 li
263.357 150.84 li
cp
f
266.37 150.84 mo
264.217 150.84 li
264.217 150.162 li
266.37 150.162 li
266.37 150.84 li
cp
f
269.382 150.84 mo
267.23 150.84 li
267.23 150.162 li
269.382 150.162 li
269.382 150.84 li
cp
f
272.395 150.84 mo
270.243 150.84 li
270.243 150.162 li
272.395 150.162 li
272.395 150.84 li
cp
f
275.408 150.84 mo
273.256 150.84 li
273.256 150.162 li
275.408 150.162 li
275.408 150.84 li
cp
f
278.421 150.84 mo
276.269 150.84 li
276.269 150.162 li
278.421 150.162 li
278.421 150.84 li
cp
f
281.434 150.84 mo
279.281 150.84 li
279.281 150.162 li
281.434 150.162 li
281.434 150.84 li
cp
f
284.447 150.84 mo
282.294 150.84 li
282.294 150.162 li
284.447 150.162 li
284.447 150.84 li
cp
f
287.46 150.84 mo
285.307 150.84 li
285.307 150.162 li
287.46 150.162 li
287.46 150.84 li
cp
f
290.473 150.84 mo
288.32 150.84 li
288.32 150.162 li
290.473 150.162 li
290.473 150.84 li
cp
f
293.486 150.84 mo
291.333 150.84 li
291.333 150.162 li
293.486 150.162 li
293.486 150.84 li
cp
f
296.498 150.84 mo
294.346 150.84 li
294.346 150.162 li
296.498 150.162 li
296.498 150.84 li
cp
f
299.511 150.84 mo
297.359 150.84 li
297.359 150.162 li
299.511 150.162 li
299.511 150.84 li
cp
f
302.524 150.84 mo
300.372 150.84 li
300.372 150.162 li
302.524 150.162 li
302.524 150.84 li
cp
f
305.537 150.84 mo
303.384 150.84 li
303.384 150.162 li
305.537 150.162 li
305.537 150.84 li
cp
f
391.211 144.907 mo
382.438 149.304 370.604 155.673 357.772 162.832 cv
343.199 162.832 216.689 162.423 167.742 162.263 cv
168.299 166.528 li
168.299 166.528 360.141 167.16 378.258 167.16 cv
385.455 156.47 392.405 147.535 396.624 144.309 cv
397.08 143.96 394.957 144.244 391.211 144.907 cv
cp
.266667 .447059 .517647 rgb
f
369.466 160.853 mo
366.167 163.409 li
362.286 158.871 li
365.585 156.315 li
369.466 160.853 li
cp
.160784 .317647 .415686 rgb
f
183.683 170.668 mo
190.224 171.141 194.107 173.328 194.113 172.318 cv
183.683 172.318 li
183.683 170.668 li
cp
379.235 166.253 mo
168.199 166.253 li
168.401 169.69 li
168.567 169.69 168.78 169.694 169.016 169.701 cv
170.221 175.552 li
173.859 175.552 li
174.998 170.021 li
177.054 170.153 175.55 170.319 178.223 170.509 cv
178.223 172.318 li
175.393 172.318 li
175.393 173.328 li
183.75 173.264 li
191.61 174.171 193.114 175.084 193.114 175.084 cv
193.114 175.084 327.942 174.836 376.785 174.836 cv
380.75 174.836 381.093 172.016 377.265 170.368 cv
375.971 169.811 379.235 166.253 379.235 166.253 cv
cp
.894118 .207843 .360784 rgb
f
168.401 169.69 mo
168.397 169.613 li
376.996 169.613 li
376.915 169.966 376.975 170.243 377.265 170.368 cv
377.641 170.53 377.965 170.705 378.261 170.886 cv
185.79 170.886 li
185.122 170.796 184.42 170.721 183.683 170.668 cv
183.683 170.886 li
178.223 170.886 li
178.223 170.509 li
175.55 170.319 177.054 170.153 174.998 170.021 cv
174.82 170.886 li
169.26 170.886 li
169.016 169.701 li
168.78 169.694 168.567 169.69 168.401 169.69 cv
cp
.94902 .45098 .427451 rgb
f
260.344 149.402 mo
240.218 149.402 li
240.218 143.776 li
260.344 143.776 li
260.344 149.402 li
cp
.117647 .270588 .34902 rgb
f
270.082 143.776 mo
270.082 146.589 li
279.387 146.589 li
279.387 149.402 li
290.207 149.402 li
290.207 143.776 li
270.082 143.776 li
cp
f
222.322 143.406 mo
222.322 144.028 221.818 144.532 221.196 144.532 cv
219.055 144.532 li
218.433 144.532 217.929 144.028 217.929 143.406 cv
217.929 142.783 218.433 142.279 219.055 142.279 cv
221.196 142.279 li
221.818 142.279 222.322 142.783 222.322 143.406 cv
cp
.647059 .756863 .8 rgb
f
227.516 143.406 mo
227.516 144.028 227.012 144.532 226.39 144.532 cv
224.249 144.532 li
223.627 144.532 223.122 144.028 223.122 143.406 cv
223.122 142.783 223.627 142.279 224.249 142.279 cv
226.39 142.279 li
227.012 142.279 227.516 142.783 227.516 143.406 cv
cp
f
232.71 143.406 mo
232.71 144.028 232.205 144.532 231.583 144.532 cv
229.443 144.532 li
228.82 144.532 228.316 144.028 228.316 143.406 cv
228.316 142.783 228.82 142.279 229.443 142.279 cv
231.583 142.279 li
232.205 142.279 232.71 142.783 232.71 143.406 cv
cp
f
237.903 143.406 mo
237.903 144.028 237.399 144.532 236.777 144.532 cv
234.636 144.532 li
234.014 144.532 233.51 144.028 233.51 143.406 cv
233.51 142.783 234.014 142.279 234.636 142.279 cv
236.777 142.279 li
237.399 142.279 237.903 142.783 237.903 143.406 cv
cp
f
243.097 143.406 mo
243.097 144.028 242.593 144.532 241.971 144.532 cv
239.83 144.532 li
239.208 144.532 238.703 144.028 238.703 143.406 cv
238.703 142.783 239.208 142.279 239.83 142.279 cv
241.971 142.279 li
242.593 142.279 243.097 142.783 243.097 143.406 cv
cp
f
248.291 143.406 mo
248.291 144.028 247.786 144.532 247.164 144.532 cv
245.024 144.532 li
244.401 144.532 243.897 144.028 243.897 143.406 cv
243.897 142.783 244.401 142.279 245.024 142.279 cv
247.164 142.279 li
247.786 142.279 248.291 142.783 248.291 143.406 cv
cp
f
253.485 143.406 mo
253.485 144.028 252.98 144.532 252.358 144.532 cv
250.217 144.532 li
249.595 144.532 249.091 144.028 249.091 143.406 cv
249.091 142.783 249.595 142.279 250.217 142.279 cv
252.358 142.279 li
252.98 142.279 253.485 142.783 253.485 143.406 cv
cp
f
258.678 143.406 mo
258.678 144.028 258.174 144.532 257.552 144.532 cv
255.411 144.532 li
254.789 144.532 254.284 144.028 254.284 143.406 cv
254.284 142.783 254.789 142.279 255.411 142.279 cv
257.552 142.279 li
258.174 142.279 258.678 142.783 258.678 143.406 cv
cp
f
274.226 143.406 mo
274.226 144.028 273.722 144.532 273.1 144.532 cv
270.959 144.532 li
270.337 144.532 269.833 144.028 269.833 143.406 cv
269.833 142.783 270.337 142.279 270.959 142.279 cv
273.1 142.279 li
273.722 142.279 274.226 142.783 274.226 143.406 cv
cp
f
279.42 143.406 mo
279.42 144.028 278.916 144.532 278.293 144.532 cv
276.153 144.532 li
275.531 144.532 275.026 144.028 275.026 143.406 cv
275.026 142.783 275.531 142.279 276.153 142.279 cv
278.293 142.279 li
278.916 142.279 279.42 142.783 279.42 143.406 cv
cp
f
284.614 143.406 mo
284.614 144.028 284.109 144.532 283.487 144.532 cv
281.346 144.532 li
280.724 144.532 280.22 144.028 280.22 143.406 cv
280.22 142.783 280.724 142.279 281.346 142.279 cv
283.487 142.279 li
284.109 142.279 284.614 142.783 284.614 143.406 cv
cp
f
289.807 143.406 mo
289.807 144.028 289.303 144.532 288.681 144.532 cv
286.54 144.532 li
285.918 144.532 285.414 144.028 285.414 143.406 cv
285.414 142.783 285.918 142.279 286.54 142.279 cv
288.681 142.279 li
289.303 142.279 289.807 142.783 289.807 143.406 cv
cp
f
295.001 143.406 mo
295.001 144.028 294.497 144.532 293.874 144.532 cv
291.734 144.532 li
291.112 144.532 290.607 144.028 290.607 143.406 cv
290.607 142.783 291.112 142.279 291.734 142.279 cv
293.874 142.279 li
294.497 142.279 295.001 142.783 295.001 143.406 cv
cp
f
250.755 138.149 mo
243.964 138.149 li
243.964 141.612 li
250.755 141.612 li
250.755 138.149 li
cp
.117647 .270588 .34902 rgb
f
258.762 138.149 mo
251.322 138.149 li
251.322 141.612 li
258.762 141.612 li
258.762 138.149 li
cp
f
266.769 138.149 mo
259.329 138.149 li
259.329 141.612 li
266.769 141.612 li
266.769 138.149 li
cp
f
273.477 138.149 mo
267.336 138.149 li
267.336 141.612 li
273.477 141.612 li
273.477 138.149 li
cp
f
274.044 138.149 mo
274.044 141.612 li
280.469 141.612 li
280.469 138.149 li
274.044 138.149 li
cp
f
243.397 138.149 mo
234.592 138.149 li
234.592 141.612 li
243.397 141.612 li
243.397 138.149 li
cp
f
213.168 128.087 mo
213.168 128.983 212.441 129.71 211.545 129.71 cv
209.164 129.71 li
208.268 129.71 207.541 128.983 207.541 128.087 cv
207.541 127.19 208.268 126.464 209.164 126.464 cv
211.545 126.464 li
212.441 126.464 213.168 127.19 213.168 128.087 cv
cp
.27451 .392157 .501961 rgb
f
221.824 130.575 mo
226.368 130.575 li
227.564 130.575 229.067 131.154 229.779 131.923 cv
234.27 136.778 li
230.528 129.543 li
230.13 128.773 228.862 128.195 227.667 128.195 cv
223.122 128.195 li
221.927 128.195 220.958 128.773 220.958 129.543 cv
220.958 130.703 li
221.205 130.623 221.495 130.575 221.824 130.575 cv
cp
f
237.208 103.436 mo
236.052 103.436 li
236.049 103.519 li
237.211 103.519 li
237.208 103.436 li
cp
.160784 .317647 .415686 rgb
f
237.297 104.985 mo
235.911 104.985 li
235.907 105.086 li
237.301 105.086 li
237.297 104.985 li
cp
f
237.481 107.071 mo
235.756 107.071 li
235.75 107.199 li
237.487 107.199 li
237.481 107.071 li
cp
f
237.413 107.247 mo
235.427 109.991 li
235.427 110.156 li
237.426 107.373 li
237.413 107.247 li
cp
f
237.386 105.058 mo
235.654 107.174 li
235.655 107.299 li
237.398 105.156 li
237.386 105.058 li
cp
f
237.195 103.525 mo
235.914 105.016 li
235.917 105.114 li
237.204 103.606 li
237.195 103.525 li
cp
f
237.037 102.41 mo
236.051 103.531 li
236.055 103.612 li
237.045 102.48 li
237.037 102.41 li
cp
f
236.142 102.41 mo
237.121 103.531 li
237.117 103.612 li
236.133 102.48 li
236.142 102.41 li
cp
f
236.043 103.755 mo
237.316 104.935 li
237.31 105.035 li
236.031 103.841 li
236.043 103.755 li
cp
f
235.965 105.082 mo
237.578 107.212 li
237.57 107.33 li
235.949 105.175 li
235.965 105.082 li
cp
f
235.772 107.097 mo
237.754 109.608 li
237.743 109.761 li
235.75 107.216 li
235.772 107.097 li
cp
f
235.394 112.329 mo
235.116 112.329 li
236.135 101.223 li
236.286 101.223 li
235.394 112.329 li
cp
f
237.855 112.329 mo
238.134 112.329 li
237.115 101.223 li
236.964 101.223 li
237.855 112.329 li
cp
f
238.775 101.586 mo
230.426 101.586 li
230.426 101.223 li
238.775 101.223 li
238.775 101.586 li
cp
f
237.504 101.405 mo
236.052 101.405 li
236.415 99.2268 li
237.504 101.405 li
cp
f
251.729 116.651 mo
246.761 116.651 li
247.305 119.192 li
251.389 117.558 li
251.729 117.433 li
251.729 116.651 li
cp
f
253.027 120.099 mo
247.305 120.099 li
247.976 122.64 li
253.002 121.007 li
253.027 120.999 li
253.027 120.099 li
cp
f
259.911 129.71 mo
258.061 129.71 li
258.061 126.421 li
259.911 126.421 li
259.911 129.71 li
cp
f
320.72 154.163 mo
311.415 148.537 li
311.415 147.671 li
320.72 153.298 li
320.72 154.163 li
cp
.266667 .447059 .517647 rgb
f
326.671 147.671 mo
317.149 147.671 li
317.149 146.806 li
326.671 146.806 li
326.671 147.671 li
cp
f
103.438 149.281 mo
103.16 149.281 li
103.16 134.776 li
103.438 134.776 li
103.438 149.281 li
cp
.160784 .317647 .415686 rgb
f
135.237 143.563 mo
134.958 143.563 li
134.958 138.821 li
135.237 138.821 li
135.237 143.563 li
cp
f
133.564 145.515 mo
133.285 145.515 li
133.285 140.773 li
133.564 140.773 li
133.564 145.515 li
cp
f
116.827 143.005 mo
116.548 143.005 li
116.548 138.263 li
116.827 138.263 li
116.827 143.005 li
cp
f
110.412 143.842 mo
110.133 143.842 li
110.133 139.1 li
110.412 139.1 li
110.412 143.842 li
cp
f
106.507 142.726 mo
106.228 142.726 li
106.228 137.984 li
106.507 137.984 li
106.507 142.726 li
cp
f
27.847 142.726 mo
27.5681 142.726 li
27.5681 137.984 li
27.847 137.984 li
27.847 142.726 li
cp
f
24.7787 142.447 mo
24.4998 142.447 li
24.4998 137.705 li
24.7787 137.705 li
24.7787 142.447 li
cp
f
28.5443 144.818 mo
30.2179 144.818 li
30.2179 138.402 li
28.5443 138.402 li
28.5443 144.818 li
cp
f
113.62 145.655 mo
115.293 145.655 li
115.293 139.239 li
113.62 139.239 li
113.62 145.655 li
cp
f
123.661 147.189 mo
131.49 147.189 li
131.49 140.773 li
123.661 140.773 li
123.661 147.189 li
cp
f
136.762 145.256 mo
140.128 145.256 li
140.128 141.59 li
136.762 141.59 li
136.762 145.256 li
cp
f
52.0679 110.044 mo
52.0679 111.328 53.1086 112.368 54.3923 112.368 cv
55.6761 112.368 56.7168 111.328 56.7168 110.044 cv
56.7168 108.76 55.6761 107.719 54.3923 107.719 cv
53.1086 107.719 52.0679 108.76 52.0679 110.044 cv
cp
.419608 .6 .709804 rgb
f
42.798 132.427 mo
42.6785 133.192 43.2238 133.816 44.0166 133.816 cv
57.9488 133.816 li
58.8602 133.816 59.5246 133.102 59.4341 132.235 cv
57.518 113.883 li
57.4571 113.3 56.8142 112.833 56.0813 112.833 cv
47.1858 112.833 li
46.4528 112.833 45.7751 113.368 45.6715 114.031 cv
42.798 132.427 li
cp
f
53.6065 129.573 mo
51.9393 113.604 li
51.9072 113.297 51.7112 113.025 51.428 112.833 cv
56.0813 112.833 li
56.8142 112.833 57.4571 113.3 57.518 113.883 cv
59.1561 129.573 li
53.6065 129.573 li
cp
.615686 .752941 .882353 rgb
f
41.4033 141.074 mo
41.2838 141.839 41.8291 142.463 42.6219 142.463 cv
83.1954 142.463 li
83.9881 142.463 84.6308 141.839 84.6308 141.074 cv
84.6308 122.678 li
84.6308 122.015 84.0366 121.48 83.3037 121.48 cv
45.7911 121.48 li
45.0582 121.48 44.3804 122.015 44.2769 122.678 cv
41.4033 141.074 li
cp
.419608 .6 .709804 rgb
f
76.2627 121.48 mo
83.3037 121.48 li
84.0366 121.48 84.6308 122.015 84.6308 122.678 cv
84.6308 141.074 li
84.6308 141.839 83.9881 142.463 83.1954 142.463 cv
76.2627 142.463 li
76.2627 121.48 li
cp
.615686 .752941 .882353 rgb
f
40.5519 148.766 mo
40.4422 149.612 41.0461 150.304 41.9016 150.304 cv
91.0574 150.304 li
91.9129 150.304 92.5169 149.612 92.4072 148.766 cv
90.167 131.485 li
90.0762 130.784 89.3786 130.22 88.6084 130.22 cv
44.3507 130.22 li
43.5804 130.22 42.8829 130.784 42.7921 131.485 cv
40.5519 148.766 li
cp
.160784 .317647 .415686 rgb
f
84.7789 130.22 mo
88.6084 130.22 li
89.3786 130.22 90.0762 130.784 90.167 131.485 cv
92.4072 148.766 li
92.5169 149.612 91.9129 150.304 91.0574 150.304 cv
86.8017 150.304 li
84.7789 130.22 li
cp
.27451 .392157 .501961 rgb
f
85.5401 142.4 mo
85.5401 143.171 86.1645 143.795 86.9348 143.795 cv
96.9764 143.795 li
97.7467 143.795 98.3711 143.171 98.3711 142.4 cv
98.3711 137.008 li
98.3711 136.237 97.7467 135.613 96.9764 135.613 cv
86.9348 135.613 li
86.1645 135.613 85.5401 136.237 85.5401 137.008 cv
85.5401 142.4 li
cp
.419608 .6 .709804 rgb
f
61.9236 146.12 mo
61.9236 146.89 62.548 147.514 63.3183 147.514 cv
73.3599 147.514 li
74.1302 147.514 74.7546 146.89 74.7546 146.12 cv
74.7546 140.727 li
74.7546 139.957 74.1302 139.332 73.3599 139.332 cv
63.3183 139.332 li
62.548 139.332 61.9236 139.957 61.9236 140.727 cv
61.9236 146.12 li
cp
f
32.9143 145.934 mo
32.9143 146.704 33.5387 147.328 34.309 147.328 cv
44.3507 147.328 li
45.1209 147.328 45.7453 146.704 45.7453 145.934 cv
45.7453 140.541 li
45.7453 139.771 45.1209 139.146 44.3507 139.146 cv
34.309 139.146 li
33.5387 139.146 32.9143 139.771 32.9143 140.541 cv
32.9143 145.934 li
cp
f
50.2083 130.499 mo
50.2083 131.064 50.6662 131.522 51.2311 131.522 cv
76.3352 131.522 li
76.9001 131.522 77.358 131.064 77.358 130.499 cv
77.358 129.934 76.9001 129.476 76.3352 129.476 cv
51.2311 129.476 li
50.6662 129.476 50.2083 129.934 50.2083 130.499 cv
cp
.345098 .513726 .6 rgb
f
80.8879 122.596 mo
83.4946 122.596 li
83.4946 124.828 li
80.8879 124.828 li
80.8879 122.596 li
cp
.145098 .258824 .329412 rgb
f
80.5226 122.596 mo
80.5226 124.828 li
76.7968 124.828 li
76.7968 122.596 li
80.5226 122.596 li
cp
f
76.4315 122.596 mo
76.4315 124.828 li
71.59 124.828 li
71.59 122.596 li
76.4315 122.596 li
cp
f
71.2247 122.596 mo
71.2247 124.828 li
66.2006 124.828 li
66.2006 122.596 li
71.2247 122.596 li
cp
f
52.8117 124.27 mo
62.6674 124.27 li
62.6674 122.968 li
52.8117 122.968 li
52.8117 124.27 li
cp
f
45.9313 131.522 mo
71.5933 131.522 li
71.5933 133.01 li
45.9313 133.01 li
45.9313 131.522 li
cp
f
45.2611 112.808 mo
45.2611 113.267 45.633 113.639 46.0919 113.639 cv
57.9315 113.639 li
58.3903 113.639 58.7623 113.267 58.7623 112.808 cv
58.7623 112.349 58.3903 111.977 57.9315 111.977 cv
46.0919 111.977 li
45.633 111.977 45.2611 112.349 45.2611 112.808 cv
cp
.160784 .317647 .415686 rgb
f
7.99611 130.685 mo
7.99611 131.455 8.62051 132.08 9.39081 132.08 cv
17.201 132.08 li
17.9712 132.08 18.5956 131.455 18.5956 130.685 cv
18.5956 129.383 li
18.5956 128.613 17.9712 127.989 17.201 127.989 cv
9.39081 127.989 li
8.62051 127.989 7.99611 128.613 7.99611 129.383 cv
7.99611 130.685 li
cp
.27451 .392157 .501961 rgb
f
13.5748 142.4 mo
13.5748 143.171 12.9504 143.795 12.1801 143.795 cv
11.8082 143.795 li
11.038 143.795 10.4135 143.171 10.4135 142.4 cv
10.4135 131.987 li
10.4135 131.217 11.038 130.592 11.8082 130.592 cv
12.1801 130.592 li
12.9504 130.592 13.5748 131.217 13.5748 131.987 cv
13.5748 142.4 li
cp
.419608 .6 .709804 rgb
f
21.199 137.619 mo
21.199 138.462 20.5198 139.075 19.6941 138.989 cv
13.5642 138.351 li
12.8468 138.276 12.2731 137.592 12.2731 136.822 cv
12.2731 121.945 li
12.2731 121.175 12.8468 120.502 13.5642 120.442 cv
19.6941 119.927 li
20.5198 119.858 21.199 120.485 21.199 121.328 cv
21.199 137.619 li
cp
.345098 .513726 .6 rgb
f
3.53311 158.486 mo
81.8233 158.486 li
81.8733 154.677 84.9742 151.605 88.7943 151.605 cv
134.354 151.605 li
138.205 151.605 141.327 154.727 141.327 158.579 cv
141.327 162.43 138.205 165.552 134.354 165.552 cv
107.49 165.552 li
88.7943 165.552 li
3.53311 165.552 li
1.58181 165.552 -8.73115e-011 163.97 0 162.019 cv
8.73115e-011 160.068 1.58181 158.486 3.53311 158.486 cv
cp
.145098 .258824 .329412 rgb
f
8.73991 158.869 mo
8.73991 159.069 9.09481 159.23 9.53251 159.23 cv
78.4737 159.23 li
87.7716 159.23 113.057 158.844 133.145 151.791 cv
141.692 148.791 153.673 145.712 145.418 143.981 cv
144.51 143.791 107.788 141.192 105.252 141.192 cv
9.85571 141.192 li
9.23951 141.192 8.73991 141.887 8.73991 142.724 cv
8.73991 158.869 li
cp
.345098 .513726 .6 rgb
f
138.305 148.862 mo
118.217 155.915 92.9319 156.301 83.6341 156.301 cv
14.6928 156.301 li
14.2551 156.301 13.9002 156.14 13.9002 155.94 cv
13.9002 141.192 li
9.85571 141.192 li
9.23951 141.192 8.73991 141.887 8.73991 142.724 cv
8.73991 158.869 li
8.73991 159.069 9.09481 159.23 9.53251 159.23 cv
78.4738 159.23 li
87.7716 159.23 113.057 158.844 133.145 151.791 cv
139.561 149.539 147.911 147.243 148.185 145.505 cv
145.252 146.584 141.534 147.729 138.305 148.862 cv
cp
.145098 .258824 .329412 rgb
f
124.405 149.371 mo
128.496 149.371 135.356 151.013 133.145 151.791 cv
113.062 158.858 87.7716 159.23 78.4737 159.23 cv
2.83811 159.23 li
2.40031 159.23 2.04551 159.069 2.04551 158.869 cv
8.73991 149.371 li
124.405 149.371 li
cp
.419608 .6 .709804 rgb
f
80.8912 148.63 mo
80.8912 149.246 81.3907 149.746 82.0069 149.746 cv
91.8626 149.746 li
92.4788 149.746 92.9784 149.246 92.9784 148.63 cv
92.9784 148.014 92.4788 147.514 91.8626 147.514 cv
82.0069 147.514 li
81.3907 147.514 80.8912 148.014 80.8912 148.63 cv
cp
.27451 .392157 .501961 rgb
f
43.4209 148.63 mo
43.4209 149.246 43.9204 149.746 44.5366 149.746 cv
54.3923 149.746 li
55.0085 149.746 55.5081 149.246 55.5081 148.63 cv
55.5081 148.014 55.0085 147.514 54.3923 147.514 cv
44.5366 147.514 li
43.9204 147.514 43.4209 148.014 43.4209 148.63 cv
cp
f
94.0941 156.068 mo
96.1396 156.068 li
96.1396 151.791 li
94.0941 151.791 li
94.0941 156.068 li
cp
f
91.1188 156.068 mo
93.1643 156.068 li
93.1643 151.791 li
91.1188 151.791 li
91.1188 156.068 li
cp
f
14.1327 156.068 mo
16.1782 156.068 li
16.1782 151.791 li
14.1327 151.791 li
14.1327 156.068 li
cp
f
11.1574 156.068 mo
13.2029 156.068 li
13.2029 151.791 li
11.1574 151.791 li
11.1574 156.068 li
cp
f
.642414 159.991 mo
.991 161.576 2.40151 162.763 4.091 162.763 cv
89.3522 162.763 li
108.048 162.763 li
134.912 162.763 li
137.791 162.763 140.261 161.018 141.326 158.528 cv
141.327 158.579 li
141.327 162.43 138.205 165.552 134.354 165.552 cv
107.49 165.552 li
88.7943 165.552 li
3.53311 165.552 li
1.58181 165.552 -8.73115e-011 163.97 0 162.019 cv
3.27418e-011 161.264 .238914 160.565 .642414 159.991 cv
cp
.0862745 .168627 .207843 rgb
f
57.5091 126.473 mo
64.5876 126.473 li
64.5876 125.765 li
57.5091 125.765 li
57.5091 126.473 li
cp
.345098 .513726 .6 rgb
f
71.9315 128.4 mo
75.3822 128.4 li
75.3822 127.111 li
71.9315 127.111 li
71.9315 128.4 li
cp
f
67.242 128.666 mo
70.6928 128.666 li
70.6928 127.376 li
67.242 127.376 li
67.242 128.666 li
cp
f
146.73 145.097 mo
145.794 144.906 107.97 142.307 105.358 142.307 cv
8.78331 142.307 li
8.91631 141.669 9.34561 141.192 9.85571 141.192 cv
105.252 141.192 li
107.788 141.192 144.51 143.791 145.418 143.981 cv
147.436 144.404 148.242 144.908 148.188 145.471 cv
147.793 145.34 147.312 145.215 146.73 145.097 cv
cp
.894118 .207843 .360784 rgb
f
92.3792 133.684 mo
98.4586 130.714 li
98.3912 130.576 li
92.3118 133.546 li
92.3792 133.684 li
cp
.117647 .270588 .34902 rgb
f
93.8711 133.24 mo
95.9403 132.229 li
95.6258 131.585 li
93.5565 132.596 li
93.8711 133.24 li
cp
.160784 .317647 .415686 rgb
f
88.5252 135.613 mo
88.3599 134.891 88.8171 134.114 89.3057 133.309 cv
89.9775 132.203 90.5658 131.43 91.5833 131.631 cv
93.3044 131.972 li
94.1458 132.139 94.4356 132.795 94.8078 133.845 cv
95.0188 134.44 95.0472 135.064 94.887 135.613 cv
88.5252 135.613 li
cp
.615686 .752941 .882353 rgb
f
133.145 151.791 mo
132.789 151.916 132.432 152.039 132.073 152.16 cv
130.058 151.69 127.381 151.323 125.353 151.323 cv
7.36381 151.323 li
8.73991 149.371 li
124.405 149.371 li
128.496 149.371 135.356 151.013 133.145 151.791 cv
cp
.94902 .45098 .427451 rgb
f
20.399 124.111 mo
12.2731 124.579 li
12.2731 121.945 li
12.2731 121.175 12.8468 120.502 13.5642 120.442 cv
19.6941 119.927 li
20.5198 119.858 21.199 120.485 21.199 121.328 cv
21.199 124.172 li
20.9504 124.118 20.681 124.095 20.399 124.111 cv
cp
.419608 .6 .709804 rgb
f
21.0812 135.27 mo
21.199 135.275 li
21.199 137.619 li
21.199 138.462 20.5198 139.075 19.6941 138.989 cv
13.5642 138.351 li
12.8468 138.276 12.2731 137.592 12.2731 136.822 cv
12.2731 134.632 li
21.0812 135.27 li
cp
.266667 .447059 .517647 rgb
f
54.5948 294.807 mo
54.5948 295.942 55.5147 296.862 56.6493 296.862 cv
57.784 296.862 58.7039 295.942 58.7039 294.807 cv
58.7039 288.644 li
58.7039 287.509 57.784 286.589 56.6493 286.589 cv
55.5147 286.589 54.5948 287.509 54.5948 288.644 cv
54.5948 294.807 li
.94902 .45098 .427451 rgb
f
43.9124 322.973 mo
69.3757 322.973 li
61.3493 290.59 li
51.9389 290.59 li
43.9124 322.973 li
.913725 .952941 .956863 rgb
f
50.9028 294.771 mo
51.9389 290.59 li
61.3493 290.59 li
62.3853 294.771 li
50.9028 294.771 li
.145098 .258824 .329412 rgb
f
64.1095 301.727 mo
65.7463 308.33 li
47.5418 308.33 li
49.1787 301.727 li
64.1095 301.727 li
f
67.4705 315.286 mo
69.3757 322.973 li
43.9124 322.973 li
45.8177 315.286 li
67.4705 315.286 li
f
69.3757 322.973 mo
67.4705 315.286 li
57.0456 315.286 li
57.0456 308.33 li
65.7463 308.33 li
69.3757 322.973 li
65.3443 306.708 mo
64.1095 301.727 li
57.0456 301.727 li
57.0456 294.771 li
62.3853 294.771 li
61.3493 290.59 li
65.3443 306.708 li
.941176 .968627 .968627 rgb
f
62.3853 294.771 mo
57.0456 294.771 li
57.0456 290.59 li
61.3493 290.59 li
62.3853 294.771 li
.403922 .482353 .533333 rgb
f
65.7463 308.33 mo
57.0456 308.33 li
57.0456 301.727 li
64.1095 301.727 li
65.3443 306.708 li
65.7463 308.33 li
f
69.3757 322.973 mo
57.0456 322.973 li
57.0456 315.286 li
67.4705 315.286 li
69.3757 322.973 li
f
50.4858 289.825 mo
50.4858 290.279 50.8537 290.647 51.3076 290.647 cv
61.7856 290.647 li
62.2395 290.647 62.6074 290.279 62.6074 289.825 cv
62.6074 289.371 62.2395 289.003 61.7856 289.003 cv
51.3076 289.003 li
50.8537 289.003 50.4858 289.371 50.4858 289.825 cv
cp
.913725 .952941 .956863 rgb
f
360.197 228.323 mo
360.197 229.458 361.117 230.378 362.252 230.378 cv
363.387 230.378 364.306 229.458 364.306 228.323 cv
364.306 222.16 li
364.306 221.025 363.387 220.105 362.252 220.105 cv
361.117 220.105 360.197 221.025 360.197 222.16 cv
360.197 228.323 li
.94902 .45098 .427451 rgb
f
349.515 256.489 mo
374.978 256.489 li
366.952 224.106 li
357.542 224.106 li
349.515 256.489 li
.913725 .952941 .956863 rgb
f
356.505 228.286 mo
357.542 224.106 li
366.952 224.106 li
367.988 228.286 li
356.505 228.286 li
.894118 .207843 .360784 rgb
f
369.712 235.242 mo
371.349 241.846 li
353.144 241.846 li
354.781 235.242 li
369.712 235.242 li
f
373.073 248.802 mo
374.978 256.489 li
349.515 256.489 li
351.42 248.802 li
373.073 248.802 li
f
374.978 256.489 mo
373.073 248.802 li
362.648 248.802 li
362.648 241.846 li
371.349 241.846 li
369.712 235.242 li
362.648 235.242 li
362.648 228.286 li
367.988 228.286 li
366.952 224.106 li
374.978 256.489 li
.941176 .968627 .968627 rgb
f
367.988 228.286 mo
362.648 228.286 li
362.648 224.106 li
366.952 224.106 li
367.988 228.286 li
.92549 .447059 .552941 rgb
f
371.349 241.846 mo
362.648 241.846 li
362.648 235.242 li
369.712 235.242 li
371.349 241.846 li
f
374.978 256.489 mo
362.648 256.489 li
362.648 248.802 li
373.073 248.802 li
374.978 256.489 li
f
356.088 223.341 mo
356.088 223.795 356.456 224.163 356.91 224.163 cv
367.388 224.163 li
367.842 224.163 368.21 223.795 368.21 223.341 cv
368.21 222.887 367.842 222.519 367.388 222.519 cv
356.91 222.519 li
356.456 222.519 356.088 222.887 356.088 223.341 cv
cp
.913725 .952941 .956863 rgb
f
101.321 305.409 mo
101.321 304.848 101.765 304.392 102.31 304.392 cv
102.854 304.392 103.298 304.848 103.298 305.409 cv
103.298 305.97 102.854 306.427 102.31 306.427 cv
101.765 306.427 101.321 305.97 101.321 305.409 cv
100.409 305.409 mo
100.409 306.49 101.26 307.367 102.31 307.367 cv
103.359 307.367 104.209 306.49 104.209 305.409 cv
104.209 304.328 103.359 303.452 102.31 303.452 cv
101.26 303.452 100.409 304.328 100.409 305.409 cv
.894118 .207843 .360784 rgb
f
102.357 306.426 mo
102.357 306.422 li
102.863 306.397 103.271 305.981 103.296 305.46 cv
103.271 305.982 102.863 306.401 102.357 306.426 cv
104.2 305.607 mo
104.2 305.606 104.2 305.606 104.2 305.606 cv
104.2 305.606 104.2 305.606 104.2 305.607 cv
104.201 305.594 mo
104.201 305.594 104.201 305.594 104.201 305.594 cv
104.201 305.594 104.201 305.594 104.201 305.594 cv
104.202 305.582 mo
104.202 305.582 104.202 305.581 104.202 305.581 cv
104.202 305.581 104.202 305.582 104.202 305.582 cv
104.203 305.57 mo
104.203 305.57 104.203 305.569 104.203 305.568 cv
104.203 305.569 104.203 305.57 104.203 305.57 cv
104.204 305.558 mo
104.204 305.557 104.204 305.556 104.204 305.555 cv
104.204 305.556 104.204 305.557 104.204 305.558 cv
104.205 305.546 mo
104.205 305.545 104.205 305.544 104.205 305.543 cv
104.205 305.544 104.205 305.545 104.205 305.546 cv
104.206 305.534 mo
104.206 305.532 104.206 305.531 104.206 305.53 cv
104.206 305.531 104.206 305.532 104.206 305.534 cv
104.206 305.521 mo
104.206 305.52 104.207 305.519 104.207 305.517 cv
104.207 305.519 104.206 305.52 104.206 305.521 cv
104.207 305.509 mo
104.207 305.507 104.207 305.506 104.207 305.504 cv
104.207 305.506 104.207 305.507 104.207 305.509 cv
104.208 305.497 mo
104.208 305.495 104.208 305.493 104.208 305.492 cv
104.208 305.493 104.208 305.495 104.208 305.497 cv
104.208 305.484 mo
104.208 305.482 104.208 305.481 104.208 305.479 cv
104.208 305.481 104.208 305.482 104.208 305.484 cv
104.209 305.472 mo
104.209 305.47 104.209 305.468 104.209 305.466 cv
104.209 305.468 104.209 305.47 104.209 305.472 cv
103.296 305.46 mo
103.296 305.458 103.296 305.456 103.297 305.454 cv
103.296 305.456 103.296 305.458 103.296 305.46 cv
104.209 305.459 mo
104.209 305.457 104.209 305.455 104.209 305.453 cv
104.209 305.455 104.209 305.457 104.209 305.459 cv
103.297 305.453 mo
103.297 305.451 103.297 305.449 103.297 305.448 cv
103.297 305.449 103.297 305.451 103.297 305.453 cv
104.209 305.447 mo
104.209 305.444 104.209 305.442 104.209 305.439 cv
104.209 305.442 104.209 305.444 104.209 305.447 cv
103.297 305.446 mo
103.297 305.444 103.297 305.443 103.297 305.441 cv
103.297 305.443 103.297 305.445 103.297 305.446 cv
103.297 305.439 mo
103.297 305.438 103.297 305.436 103.297 305.435 cv
103.297 305.436 103.297 305.438 103.297 305.439 cv
104.209 305.434 mo
104.209 305.432 104.209 305.429 104.209 305.426 cv
104.209 305.429 104.209 305.432 104.209 305.434 cv
103.297 305.432 mo
103.297 305.431 103.297 305.43 103.297 305.429 cv
103.297 305.43 103.297 305.431 103.297 305.432 cv
103.297 305.425 mo
103.297 305.424 103.297 305.423 103.297 305.422 cv
103.297 305.423 103.297 305.424 103.297 305.425 cv
104.209 305.422 mo
104.209 305.418 104.209 305.413 104.209 305.409 cv
104.209 305.409 li
104.209 305.413 104.209 305.418 104.209 305.422 cv
103.297 305.418 mo
103.297 305.417 103.297 305.416 103.297 305.416 cv
103.297 305.417 103.297 305.417 103.297 305.418 cv
104.209 305.409 mo
104.209 305.405 104.209 305.401 104.209 305.397 cv
104.209 305.401 104.209 305.405 104.209 305.409 cv
103.297 305.403 mo
103.297 305.402 103.297 305.401 103.297 305.401 cv
103.297 305.401 103.297 305.402 103.297 305.403 cv
103.297 305.396 mo
103.297 305.395 103.297 305.395 103.297 305.394 cv
103.297 305.395 103.297 305.395 103.297 305.396 cv
104.209 305.393 mo
104.209 305.39 104.209 305.387 104.209 305.384 cv
104.209 305.387 104.209 305.39 104.209 305.393 cv
103.297 305.39 mo
103.297 305.389 103.297 305.388 103.297 305.387 cv
103.297 305.388 103.297 305.389 103.297 305.39 cv
103.297 305.384 mo
103.297 305.382 103.297 305.381 103.297 305.379 cv
103.297 305.381 103.297 305.382 103.297 305.384 cv
104.209 305.379 mo
104.209 305.377 104.209 305.374 104.209 305.372 cv
104.209 305.374 104.209 305.377 104.209 305.379 cv
103.297 305.377 mo
103.297 305.376 103.297 305.374 103.297 305.372 cv
103.297 305.374 103.297 305.376 103.297 305.377 cv
103.297 305.371 mo
103.297 305.369 103.297 305.367 103.297 305.365 cv
103.297 305.367 103.297 305.369 103.297 305.371 cv
104.209 305.366 mo
104.209 305.364 104.209 305.361 104.209 305.359 cv
104.209 305.361 104.209 305.364 104.209 305.366 cv
103.297 305.365 mo
103.296 305.363 103.296 305.361 103.296 305.359 cv
103.296 305.361 103.296 305.363 103.297 305.365 cv
103.296 305.358 mo
103.271 304.837 102.863 304.422 102.357 304.396 cv
102.357 304.393 li
102.863 304.417 103.271 304.837 103.296 305.358 cv
104.209 305.353 mo
104.209 305.351 104.209 305.349 104.209 305.347 cv
104.209 305.349 104.209 305.351 104.209 305.353 cv
104.208 305.34 mo
104.208 305.338 104.208 305.336 104.208 305.334 cv
104.208 305.336 104.208 305.338 104.208 305.34 cv
104.208 305.327 mo
104.208 305.325 104.208 305.324 104.208 305.322 cv
104.208 305.323 104.208 305.325 104.208 305.327 cv
104.207 305.314 mo
104.207 305.313 104.207 305.311 104.207 305.31 cv
104.207 305.311 104.207 305.313 104.207 305.314 cv
104.207 305.301 mo
104.207 305.3 104.206 305.299 104.206 305.297 cv
104.206 305.299 104.207 305.3 104.207 305.301 cv
104.206 305.289 mo
104.206 305.287 104.206 305.286 104.206 305.285 cv
104.206 305.286 104.206 305.287 104.206 305.289 cv
104.205 305.276 mo
104.205 305.275 104.205 305.274 104.205 305.273 cv
104.205 305.274 104.205 305.275 104.205 305.276 cv
104.204 305.263 mo
104.204 305.262 104.204 305.261 104.204 305.26 cv
104.204 305.261 104.204 305.262 104.204 305.263 cv
104.203 305.25 mo
104.203 305.25 104.203 305.249 104.203 305.248 cv
104.203 305.249 104.203 305.25 104.203 305.25 cv
104.202 305.238 mo
104.202 305.237 104.202 305.237 104.202 305.236 cv
104.202 305.237 104.202 305.237 104.202 305.238 cv
104.201 305.225 mo
104.201 305.225 104.201 305.224 104.201 305.224 cv
104.201 305.224 104.201 305.225 104.201 305.225 cv
104.2 305.212 mo
104.2 305.212 104.2 305.212 104.2 305.212 cv
104.2 305.212 104.2 305.212 104.2 305.212 cv
.973948 .98579 .986974 rgb
f
103.646 306.8 mo
103.258 306.733 102.86 306.695 102.455 306.689 cv
102.452 306.689 102.45 306.689 102.448 306.689 cv
102.442 306.689 102.436 306.689 102.43 306.689 cv
102.426 306.689 102.421 306.689 102.417 306.688 cv
102.414 306.688 102.412 306.688 102.409 306.688 cv
102.403 306.688 102.396 306.688 102.389 306.688 cv
102.387 306.688 102.385 306.688 102.383 306.688 cv
102.376 306.688 102.369 306.688 102.362 306.688 cv
102.361 306.688 102.359 306.688 102.358 306.688 cv
102.357 306.688 102.357 306.688 102.357 306.688 cv
102.357 306.426 li
102.863 306.401 103.271 305.982 103.296 305.46 cv
103.296 305.46 103.296 305.46 103.296 305.46 cv
103.296 305.458 103.296 305.456 103.297 305.454 cv
103.297 305.454 103.297 305.453 103.297 305.453 cv
103.297 305.451 103.297 305.449 103.297 305.448 cv
103.297 305.447 103.297 305.447 103.297 305.446 cv
103.297 305.445 103.297 305.443 103.297 305.441 cv
103.297 305.441 103.297 305.44 103.297 305.439 cv
103.297 305.438 103.297 305.436 103.297 305.435 cv
103.297 305.434 103.297 305.433 103.297 305.432 cv
103.297 305.431 103.297 305.43 103.297 305.429 cv
103.297 305.427 103.297 305.426 103.297 305.425 cv
103.297 305.424 103.297 305.423 103.297 305.422 cv
103.297 305.421 103.297 305.419 103.297 305.418 cv
103.297 305.417 103.297 305.417 103.297 305.416 cv
103.297 305.414 103.298 305.411 103.298 305.409 cv
103.298 305.409 li
103.298 305.409 li
103.298 305.409 li
103.298 305.407 103.297 305.405 103.297 305.403 cv
103.297 305.402 103.297 305.401 103.297 305.401 cv
103.297 305.399 103.297 305.398 103.297 305.396 cv
103.297 305.395 103.297 305.395 103.297 305.394 cv
103.297 305.392 103.297 305.391 103.297 305.39 cv
103.297 305.389 103.297 305.388 103.297 305.387 cv
103.297 305.386 103.297 305.385 103.297 305.384 cv
103.297 305.382 103.297 305.381 103.297 305.379 cv
103.297 305.379 103.297 305.378 103.297 305.377 cv
103.297 305.376 103.297 305.374 103.297 305.372 cv
103.297 305.372 103.297 305.371 103.297 305.371 cv
103.297 305.369 103.297 305.367 103.297 305.365 cv
103.297 305.365 103.297 305.365 103.297 305.365 cv
103.296 305.363 103.296 305.361 103.296 305.359 cv
103.296 305.359 103.296 305.359 103.296 305.358 cv
103.271 304.837 102.863 304.417 102.357 304.393 cv
102.357 303.454 li
103.32 303.479 104.105 304.24 104.2 305.212 cv
104.2 305.212 104.2 305.212 104.2 305.212 cv
104.2 305.216 104.201 305.22 104.201 305.224 cv
104.201 305.224 104.201 305.225 104.201 305.225 cv
104.201 305.229 104.202 305.232 104.202 305.236 cv
104.202 305.237 104.202 305.237 104.202 305.238 cv
104.203 305.241 104.203 305.245 104.203 305.248 cv
104.203 305.249 104.203 305.25 104.203 305.25 cv
104.204 305.254 104.204 305.257 104.204 305.26 cv
104.204 305.261 104.204 305.262 104.204 305.263 cv
104.204 305.266 104.205 305.27 104.205 305.273 cv
104.205 305.274 104.205 305.275 104.205 305.276 cv
104.205 305.279 104.206 305.282 104.206 305.285 cv
104.206 305.286 104.206 305.287 104.206 305.289 cv
104.206 305.291 104.206 305.294 104.206 305.297 cv
104.206 305.299 104.207 305.3 104.207 305.301 cv
104.207 305.304 104.207 305.307 104.207 305.31 cv
104.207 305.311 104.207 305.313 104.207 305.314 cv
104.207 305.317 104.208 305.319 104.208 305.322 cv
104.208 305.324 104.208 305.325 104.208 305.327 cv
104.208 305.329 104.208 305.332 104.208 305.334 cv
104.208 305.336 104.208 305.338 104.208 305.34 cv
104.208 305.342 104.208 305.344 104.209 305.347 cv
104.209 305.349 104.209 305.351 104.209 305.353 cv
104.209 305.355 104.209 305.357 104.209 305.359 cv
104.209 305.361 104.209 305.364 104.209 305.366 cv
104.209 305.368 104.209 305.37 104.209 305.372 cv
104.209 305.374 104.209 305.377 104.209 305.379 cv
104.209 305.381 104.209 305.382 104.209 305.384 cv
104.209 305.387 104.209 305.39 104.209 305.393 cv
104.209 305.394 104.209 305.395 104.209 305.397 cv
104.209 305.401 104.209 305.405 104.209 305.409 cv
104.209 305.409 li
104.209 305.413 104.209 305.418 104.209 305.422 cv
104.209 305.423 104.209 305.425 104.209 305.426 cv
104.209 305.429 104.209 305.432 104.209 305.434 cv
104.209 305.436 104.209 305.438 104.209 305.439 cv
104.209 305.442 104.209 305.444 104.209 305.447 cv
104.209 305.449 104.209 305.451 104.209 305.453 cv
104.209 305.455 104.209 305.457 104.209 305.459 cv
104.209 305.461 104.209 305.464 104.209 305.466 cv
104.209 305.468 104.209 305.47 104.209 305.472 cv
104.208 305.474 104.208 305.476 104.208 305.479 cv
104.208 305.481 104.208 305.482 104.208 305.484 cv
104.208 305.487 104.208 305.489 104.208 305.492 cv
104.208 305.493 104.208 305.495 104.208 305.497 cv
104.208 305.499 104.207 305.502 104.207 305.504 cv
104.207 305.506 104.207 305.507 104.207 305.509 cv
104.207 305.512 104.207 305.515 104.207 305.517 cv
104.207 305.519 104.206 305.52 104.206 305.521 cv
104.206 305.524 104.206 305.527 104.206 305.53 cv
104.206 305.531 104.206 305.532 104.206 305.534 cv
104.206 305.537 104.205 305.54 104.205 305.543 cv
104.205 305.544 104.205 305.545 104.205 305.546 cv
104.205 305.549 104.204 305.552 104.204 305.555 cv
104.204 305.556 104.204 305.557 104.204 305.558 cv
104.204 305.561 104.204 305.565 104.203 305.568 cv
104.203 305.569 104.203 305.57 104.203 305.57 cv
104.203 305.574 104.203 305.577 104.202 305.581 cv
104.202 305.581 104.202 305.582 104.202 305.582 cv
104.202 305.586 104.201 305.59 104.201 305.594 cv
104.201 305.594 104.201 305.594 104.201 305.594 cv
104.201 305.598 104.2 305.602 104.2 305.606 cv
104.2 305.606 104.2 305.606 104.2 305.607 cv
104.155 306.072 103.951 306.489 103.646 306.8 cv
.901961 .431373 .541176 rgb
f
94.4305 314.83 mo
94.4305 319.328 97.9695 322.973 102.335 322.973 cv
106.7 322.973 110.239 319.328 110.239 314.83 cv
110.239 310.334 106.7 306.688 102.335 306.688 cv
97.9695 306.688 94.4305 310.334 94.4305 314.83 cv
.913725 .952941 .956863 rgb
f
98.7986 307.55 mo
99.8626 307 101.063 306.688 102.335 306.688 cv
103.607 306.688 104.807 307 105.871 307.55 cv
98.7986 307.55 li
.894118 .207843 .360784 rgb
f
109.46 311.312 mo
109.928 312.317 110.204 313.434 110.234 314.616 cv
94.4358 314.616 li
94.4655 313.434 94.7414 312.317 95.2093 311.312 cv
109.46 311.312 li
f
107.104 321.319 mo
97.5652 321.319 li
96.564 320.536 95.7484 319.513 95.2015 318.332 cv
109.468 318.332 li
108.921 319.513 108.106 320.536 107.104 321.319 cv
f
110.212 315.506 mo
110.212 315.506 110.212 315.506 110.212 315.506 cv
110.212 315.506 li
110.214 315.48 mo
110.214 315.48 li
110.214 315.48 li
110.216 315.455 mo
110.216 315.454 110.216 315.453 110.216 315.453 cv
110.216 315.453 110.216 315.454 110.216 315.455 cv
110.218 315.429 mo
110.218 315.428 li
110.218 315.429 110.218 315.429 110.218 315.429 cv
110.22 315.403 mo
110.22 315.403 110.22 315.403 110.22 315.402 cv
110.22 315.403 110.22 315.403 110.22 315.403 cv
110.221 315.377 mo
110.221 315.377 110.222 315.376 110.222 315.376 cv
110.222 315.376 110.221 315.377 110.221 315.377 cv
110.223 315.352 mo
110.223 315.35 110.223 315.349 110.223 315.348 cv
110.223 315.349 110.223 315.351 110.223 315.352 cv
110.225 315.326 mo
110.225 315.325 110.225 315.324 110.225 315.323 cv
110.225 315.324 110.225 315.325 110.225 315.326 cv
110.226 315.3 mo
110.226 315.299 110.226 315.297 110.226 315.296 cv
110.226 315.297 110.226 315.299 110.226 315.3 cv
110.227 315.274 mo
110.228 315.273 110.228 315.271 110.228 315.269 cv
110.228 315.271 110.228 315.273 110.227 315.274 cv
110.229 315.248 mo
110.229 315.246 110.229 315.245 110.229 315.242 cv
110.229 315.244 110.229 315.246 110.229 315.248 cv
110.23 315.222 mo
110.23 315.22 110.23 315.218 110.23 315.217 cv
110.23 315.218 110.23 315.22 110.23 315.222 cv
110.231 315.196 mo
110.231 315.194 110.231 315.192 110.231 315.19 cv
110.231 315.192 110.231 315.194 110.231 315.196 cv
110.232 315.17 mo
110.232 315.168 110.232 315.166 110.232 315.164 cv
110.232 315.166 110.232 315.168 110.232 315.17 cv
110.233 315.144 mo
110.233 315.142 110.233 315.141 110.233 315.139 cv
110.233 315.141 110.233 315.142 110.233 315.144 cv
110.234 315.118 mo
110.234 315.116 110.234 315.113 110.234 315.111 cv
110.234 315.113 110.234 315.116 110.234 315.118 cv
110.235 315.092 mo
110.235 315.09 110.235 315.088 110.235 315.086 cv
110.235 315.088 110.235 315.09 110.235 315.092 cv
110.236 315.066 mo
110.236 315.064 110.236 315.061 110.236 315.059 cv
110.236 315.061 110.236 315.064 110.236 315.066 cv
110.236 315.04 mo
110.237 315.038 110.237 315.035 110.237 315.032 cv
110.237 315.035 110.237 315.037 110.236 315.04 cv
110.237 315.014 mo
110.237 315.012 110.237 315.011 110.237 315.009 cv
110.237 315.011 110.237 315.012 110.237 315.014 cv
110.238 314.988 mo
110.238 314.985 110.238 314.982 110.238 314.98 cv
110.238 314.983 110.238 314.985 110.238 314.988 cv
110.238 314.962 mo
110.238 314.958 110.238 314.955 110.238 314.951 cv
110.238 314.955 110.238 314.958 110.238 314.962 cv
110.238 314.936 mo
110.238 314.93 110.238 314.925 110.239 314.919 cv
110.238 314.925 110.238 314.93 110.238 314.936 cv
110.239 314.909 mo
110.239 314.904 110.239 314.898 110.239 314.893 cv
110.239 314.898 110.239 314.904 110.239 314.909 cv
110.239 314.883 mo
110.239 314.876 110.239 314.868 110.239 314.861 cv
110.239 314.868 110.239 314.876 110.239 314.883 cv
110.239 314.857 mo
110.239 314.848 110.239 314.839 110.239 314.83 cv
110.239 314.83 li
110.239 314.839 110.239 314.848 110.239 314.857 cv
110.239 314.83 mo
110.239 314.822 110.239 314.813 110.239 314.804 cv
110.239 314.813 110.239 314.822 110.239 314.83 cv
110.239 314.801 mo
110.239 314.793 110.239 314.786 110.239 314.778 cv
110.239 314.786 110.239 314.793 110.239 314.801 cv
110.239 314.769 mo
110.239 314.763 110.239 314.757 110.239 314.752 cv
110.239 314.757 110.239 314.763 110.239 314.769 cv
110.239 314.743 mo
110.239 314.737 110.238 314.731 110.238 314.725 cv
110.238 314.731 110.239 314.737 110.239 314.743 cv
110.238 314.711 mo
110.238 314.707 110.238 314.703 110.238 314.699 cv
110.238 314.703 110.238 314.707 110.238 314.711 cv
110.238 314.683 mo
110.238 314.68 110.238 314.676 110.238 314.673 cv
110.238 314.676 110.238 314.68 110.238 314.683 cv
110.237 314.654 mo
110.237 314.652 110.237 314.649 110.237 314.647 cv
110.237 314.649 110.237 314.652 110.237 314.654 cv
110.237 314.631 mo
110.237 314.628 110.237 314.624 110.236 314.621 cv
110.237 314.624 110.237 314.628 110.237 314.631 cv
110.236 314.605 mo
110.236 314.602 110.236 314.598 110.236 314.595 cv
110.236 314.598 110.236 314.602 110.236 314.605 cv
110.235 314.578 mo
110.235 314.575 110.235 314.572 110.235 314.569 cv
110.235 314.572 110.235 314.575 110.235 314.578 cv
110.235 314.553 mo
110.234 314.55 110.234 314.546 110.234 314.542 cv
110.234 314.546 110.234 314.549 110.235 314.553 cv
110.234 314.526 mo
110.233 314.523 110.233 314.52 110.233 314.516 cv
110.233 314.519 110.233 314.523 110.234 314.526 cv
110.233 314.5 mo
110.232 314.497 110.232 314.494 110.232 314.49 cv
110.232 314.494 110.232 314.497 110.233 314.5 cv
110.232 314.475 mo
110.231 314.472 110.231 314.468 110.231 314.464 cv
110.231 314.468 110.231 314.471 110.232 314.475 cv
110.23 314.449 mo
110.23 314.445 110.23 314.442 110.23 314.438 cv
110.23 314.442 110.23 314.445 110.23 314.449 cv
110.229 314.423 mo
110.229 314.419 110.229 314.416 110.229 314.412 cv
110.229 314.416 110.229 314.419 110.229 314.423 cv
110.228 314.397 mo
110.228 314.393 110.228 314.39 110.227 314.386 cv
110.228 314.39 110.228 314.393 110.228 314.397 cv
110.227 314.37 mo
110.226 314.367 110.226 314.364 110.226 314.361 cv
110.226 314.364 110.226 314.367 110.227 314.37 cv
110.225 314.344 mo
110.225 314.341 110.225 314.338 110.225 314.335 cv
110.225 314.338 110.225 314.341 110.225 314.344 cv
110.224 314.318 mo
110.223 314.315 110.223 314.312 110.223 314.309 cv
110.223 314.312 110.223 314.315 110.224 314.318 cv
110.222 314.292 mo
110.222 314.289 110.222 314.286 110.221 314.283 cv
110.222 314.286 110.222 314.289 110.222 314.292 cv
110.22 314.265 mo
110.22 314.262 110.22 314.26 110.22 314.257 cv
110.22 314.26 110.22 314.262 110.22 314.265 cv
110.218 314.239 mo
110.218 314.237 110.218 314.234 110.218 314.231 cv
110.218 314.234 110.218 314.237 110.218 314.239 cv
110.217 314.215 mo
110.217 314.212 110.216 314.208 110.216 314.205 cv
110.216 314.208 110.217 314.212 110.217 314.215 cv
110.215 314.188 mo
110.215 314.186 110.214 314.182 110.214 314.18 cv
110.214 314.183 110.215 314.185 110.215 314.188 cv
110.213 314.163 mo
110.213 314.16 110.212 314.157 110.212 314.154 cv
110.212 314.157 110.213 314.16 110.213 314.163 cv
110.211 314.136 mo
110.21 314.133 110.21 314.131 110.21 314.128 cv
110.21 314.131 110.21 314.133 110.211 314.136 cv
110.209 314.11 mo
110.208 314.108 110.208 314.105 110.208 314.103 cv
110.208 314.105 110.208 314.108 110.209 314.11 cv
110.206 314.085 mo
110.206 314.082 110.206 314.08 110.206 314.077 cv
110.206 314.08 110.206 314.082 110.206 314.085 cv
110.204 314.059 mo
110.204 314.057 110.204 314.054 110.203 314.051 cv
110.204 314.054 110.204 314.057 110.204 314.059 cv
110.202 314.033 mo
110.201 314.031 110.201 314.028 110.201 314.026 cv
110.201 314.028 110.201 314.031 110.202 314.033 cv
110.199 314.007 mo
110.199 314.005 110.199 314.003 110.198 314 cv
110.199 314.003 110.199 314.005 110.199 314.007 cv
110.197 313.981 mo
110.196 313.979 110.196 313.977 110.196 313.975 cv
110.196 313.977 110.196 313.979 110.197 313.981 cv
110.194 313.956 mo
110.194 313.954 110.193 313.951 110.193 313.949 cv
110.193 313.951 110.194 313.954 110.194 313.956 cv
110.191 313.929 mo
110.191 313.927 110.191 313.926 110.191 313.924 cv
110.191 313.926 110.191 313.927 110.191 313.929 cv
110.188 313.903 mo
110.188 313.901 110.188 313.9 110.188 313.898 cv
110.188 313.9 110.188 313.901 110.188 313.903 cv
110.185 313.877 mo
110.185 313.876 110.185 313.874 110.185 313.873 cv
110.185 313.874 110.185 313.876 110.185 313.877 cv
110.183 313.852 mo
110.182 313.851 110.182 313.849 110.182 313.847 cv
110.182 313.849 110.182 313.851 110.183 313.852 cv
110.179 313.826 mo
110.179 313.825 110.179 313.823 110.179 313.822 cv
110.179 313.823 110.179 313.825 110.179 313.826 cv
110.176 313.8 mo
110.176 313.799 110.176 313.798 110.176 313.797 cv
110.176 313.798 110.176 313.799 110.176 313.8 cv
110.173 313.773 mo
110.173 313.772 110.173 313.772 110.173 313.772 cv
110.173 313.772 110.173 313.773 110.173 313.773 cv
110.17 313.748 mo
110.17 313.747 110.17 313.747 110.17 313.746 cv
110.17 313.747 110.17 313.747 110.17 313.748 cv
110.166 313.722 mo
110.166 313.721 110.166 313.721 110.166 313.721 cv
110.166 313.721 110.166 313.721 110.166 313.722 cv
110.163 313.697 mo
110.163 313.696 110.163 313.696 110.163 313.696 cv
110.163 313.696 110.163 313.696 110.163 313.697 cv
110.159 313.671 mo
110.159 313.671 li
110.159 313.671 li
110.152 313.62 mo
110.152 313.62 110.152 313.62 110.152 313.62 cv
110.152 313.62 li
.973948 .98579 .986974 rgb
f
102.382 322.972 mo
102.382 321.319 li
107.104 321.319 li
108.106 320.536 108.921 319.513 109.468 318.332 cv
102.382 318.332 li
102.382 314.616 li
110.234 314.616 li
110.234 314.616 li
110.204 313.434 109.928 312.317 109.46 311.312 cv
102.382 311.312 li
102.382 307.55 li
105.871 307.55 li
105.871 307.55 li
105.246 307.227 104.573 306.986 103.867 306.842 cv
107.121 307.5 109.66 310.216 110.152 313.62 cv
110.152 313.62 110.152 313.62 110.152 313.62 cv
110.155 313.637 110.157 313.654 110.159 313.671 cv
110.159 313.671 li
110.161 313.679 110.162 313.687 110.163 313.696 cv
110.163 313.696 110.163 313.696 110.163 313.697 cv
110.164 313.705 110.165 313.713 110.166 313.721 cv
110.166 313.721 110.166 313.721 110.166 313.722 cv
110.167 313.73 110.168 313.738 110.17 313.746 cv
110.17 313.747 110.17 313.747 110.17 313.748 cv
110.171 313.756 110.172 313.764 110.173 313.772 cv
110.173 313.772 110.173 313.772 110.173 313.773 cv
110.174 313.781 110.175 313.789 110.176 313.797 cv
110.176 313.798 110.176 313.799 110.176 313.8 cv
110.177 313.807 110.178 313.815 110.179 313.822 cv
110.179 313.823 110.179 313.825 110.179 313.826 cv
110.18 313.833 110.181 313.84 110.182 313.847 cv
110.182 313.849 110.182 313.851 110.183 313.852 cv
110.183 313.859 110.184 313.866 110.185 313.873 cv
110.185 313.874 110.185 313.876 110.185 313.877 cv
110.186 313.884 110.187 313.891 110.188 313.898 cv
110.188 313.9 110.188 313.901 110.188 313.903 cv
110.189 313.91 110.19 313.917 110.191 313.924 cv
110.191 313.926 110.191 313.927 110.191 313.929 cv
110.192 313.936 110.193 313.942 110.193 313.949 cv
110.193 313.951 110.194 313.954 110.194 313.956 cv
110.195 313.962 110.195 313.968 110.196 313.975 cv
110.196 313.977 110.196 313.979 110.197 313.981 cv
110.197 313.988 110.198 313.994 110.198 314 cv
110.199 314.003 110.199 314.005 110.199 314.007 cv
110.2 314.013 110.2 314.02 110.201 314.026 cv
110.201 314.028 110.201 314.031 110.202 314.033 cv
110.202 314.039 110.203 314.045 110.203 314.051 cv
110.204 314.054 110.204 314.057 110.204 314.059 cv
110.205 314.065 110.205 314.071 110.206 314.077 cv
110.206 314.08 110.206 314.082 110.206 314.085 cv
110.207 314.091 110.207 314.097 110.208 314.103 cv
110.208 314.105 110.208 314.108 110.209 314.11 cv
110.209 314.116 110.21 314.122 110.21 314.128 cv
110.21 314.131 110.21 314.133 110.211 314.136 cv
110.211 314.142 110.212 314.148 110.212 314.154 cv
110.212 314.157 110.213 314.16 110.213 314.163 cv
110.213 314.168 110.214 314.174 110.214 314.18 cv
110.214 314.182 110.215 314.186 110.215 314.188 cv
110.215 314.194 110.216 314.2 110.216 314.205 cv
110.216 314.208 110.217 314.212 110.217 314.215 cv
110.217 314.22 110.218 314.226 110.218 314.231 cv
110.218 314.234 110.218 314.237 110.218 314.239 cv
110.219 314.245 110.219 314.251 110.22 314.257 cv
110.22 314.26 110.22 314.262 110.22 314.265 cv
110.221 314.271 110.221 314.277 110.221 314.283 cv
110.222 314.286 110.222 314.289 110.222 314.292 cv
110.222 314.297 110.223 314.303 110.223 314.309 cv
110.223 314.312 110.223 314.315 110.224 314.318 cv
110.224 314.324 110.224 314.329 110.225 314.335 cv
110.225 314.338 110.225 314.341 110.225 314.344 cv
110.225 314.349 110.226 314.355 110.226 314.361 cv
110.226 314.364 110.226 314.367 110.227 314.37 cv
110.227 314.375 110.227 314.381 110.227 314.386 cv
110.228 314.39 110.228 314.393 110.228 314.397 cv
110.228 314.402 110.229 314.407 110.229 314.412 cv
110.229 314.416 110.229 314.419 110.229 314.423 cv
110.23 314.428 110.23 314.433 110.23 314.438 cv
110.23 314.442 110.23 314.445 110.23 314.449 cv
110.231 314.454 110.231 314.459 110.231 314.464 cv
110.231 314.468 110.231 314.472 110.232 314.475 cv
110.232 314.48 110.232 314.486 110.232 314.49 cv
110.232 314.494 110.232 314.497 110.233 314.5 cv
110.233 314.506 110.233 314.511 110.233 314.516 cv
110.233 314.52 110.233 314.523 110.234 314.526 cv
110.234 314.532 110.234 314.537 110.234 314.542 cv
110.234 314.546 110.234 314.55 110.235 314.553 cv
110.235 314.558 110.235 314.563 110.235 314.569 cv
110.235 314.572 110.235 314.575 110.235 314.578 cv
110.235 314.584 110.236 314.589 110.236 314.595 cv
110.236 314.598 110.236 314.602 110.236 314.605 cv
110.236 314.61 110.236 314.615 110.236 314.621 cv
110.237 314.624 110.237 314.628 110.237 314.631 cv
110.237 314.636 110.237 314.642 110.237 314.647 cv
110.237 314.649 110.237 314.652 110.237 314.654 cv
110.237 314.661 110.237 314.667 110.238 314.673 cv
110.238 314.676 110.238 314.68 110.238 314.683 cv
110.238 314.688 110.238 314.694 110.238 314.699 cv
110.238 314.703 110.238 314.707 110.238 314.711 cv
110.238 314.716 110.238 314.721 110.238 314.725 cv
110.238 314.731 110.239 314.737 110.239 314.743 cv
110.239 314.746 110.239 314.749 110.239 314.752 cv
110.239 314.757 110.239 314.763 110.239 314.769 cv
110.239 314.772 110.239 314.775 110.239 314.778 cv
110.239 314.786 110.239 314.793 110.239 314.801 cv
110.239 314.802 110.239 314.803 110.239 314.804 cv
110.239 314.813 110.239 314.822 110.239 314.83 cv
110.239 314.83 li
110.239 314.839 110.239 314.848 110.239 314.857 cv
110.239 314.858 110.239 314.859 110.239 314.861 cv
110.239 314.868 110.239 314.876 110.239 314.883 cv
110.239 314.886 110.239 314.889 110.239 314.893 cv
110.239 314.898 110.239 314.904 110.239 314.909 cv
110.239 314.913 110.239 314.916 110.239 314.919 cv
110.238 314.925 110.238 314.93 110.238 314.936 cv
110.238 314.941 110.238 314.946 110.238 314.951 cv
110.238 314.955 110.238 314.958 110.238 314.962 cv
110.238 314.968 110.238 314.974 110.238 314.98 cv
110.238 314.982 110.238 314.985 110.238 314.988 cv
110.237 314.995 110.237 315.002 110.237 315.009 cv
110.237 315.011 110.237 315.012 110.237 315.014 cv
110.237 315.02 110.237 315.026 110.237 315.032 cv
110.237 315.035 110.237 315.038 110.236 315.04 cv
110.236 315.047 110.236 315.053 110.236 315.059 cv
110.236 315.061 110.236 315.064 110.236 315.066 cv
110.236 315.073 110.235 315.079 110.235 315.086 cv
110.235 315.088 110.235 315.09 110.235 315.092 cv
110.235 315.098 110.235 315.105 110.234 315.111 cv
110.234 315.113 110.234 315.116 110.234 315.118 cv
110.234 315.125 110.234 315.132 110.233 315.139 cv
110.233 315.141 110.233 315.142 110.233 315.144 cv
110.233 315.151 110.233 315.158 110.232 315.164 cv
110.232 315.166 110.232 315.168 110.232 315.17 cv
110.232 315.177 110.232 315.183 110.231 315.19 cv
110.231 315.192 110.231 315.194 110.231 315.196 cv
110.231 315.203 110.231 315.21 110.23 315.217 cv
110.23 315.218 110.23 315.22 110.23 315.222 cv
110.23 315.229 110.229 315.236 110.229 315.242 cv
110.229 315.245 110.229 315.246 110.229 315.248 cv
110.228 315.255 110.228 315.262 110.228 315.269 cv
110.228 315.271 110.228 315.273 110.227 315.274 cv
110.227 315.282 110.227 315.289 110.226 315.296 cv
110.226 315.297 110.226 315.299 110.226 315.3 cv
110.226 315.308 110.225 315.315 110.225 315.323 cv
110.225 315.324 110.225 315.325 110.225 315.326 cv
110.224 315.333 110.224 315.34 110.223 315.348 cv
110.223 315.349 110.223 315.35 110.223 315.352 cv
110.223 315.36 110.222 315.368 110.222 315.376 cv
110.222 315.376 110.221 315.377 110.221 315.377 cv
110.221 315.386 110.22 315.394 110.22 315.402 cv
110.22 315.403 110.22 315.403 110.22 315.403 cv
110.219 315.412 110.219 315.42 110.218 315.428 cv
110.218 315.429 li
110.217 315.437 110.217 315.445 110.216 315.453 cv
110.216 315.453 110.216 315.454 110.216 315.455 cv
110.215 315.463 110.215 315.472 110.214 315.48 cv
110.214 315.48 li
110.214 315.489 110.213 315.497 110.212 315.506 cv
110.212 315.506 110.212 315.506 110.212 315.506 cv
109.88 319.671 106.505 322.947 102.382 322.972 cv
.913725 .952941 .956863 rgb
f
105.871 307.55 mo
102.382 307.55 li
102.382 306.689 li
102.89 306.692 103.386 306.745 103.867 306.842 cv
104.573 306.986 105.246 307.227 105.871 307.55 cv
.901961 .431373 .541176 rgb
f
110.234 314.616 mo
102.382 314.616 li
102.382 311.312 li
109.46 311.312 li
109.928 312.317 110.204 313.434 110.234 314.616 cv
f
107.104 321.319 mo
102.382 321.319 li
102.382 318.332 li
109.468 318.332 li
108.921 319.513 108.106 320.536 107.104 321.319 cv
f
318.909 238.925 mo
318.909 238.364 319.352 237.907 319.897 237.907 cv
320.441 237.907 320.885 238.364 320.885 238.925 cv
320.885 239.486 320.441 239.943 319.897 239.943 cv
319.352 239.943 318.909 239.486 318.909 238.925 cv
317.996 238.925 mo
317.996 240.006 318.847 240.882 319.897 240.882 cv
320.946 240.882 321.797 240.006 321.797 238.925 cv
321.797 237.844 320.946 236.968 319.897 236.968 cv
318.847 236.968 317.996 237.844 317.996 238.925 cv
.145098 .258824 .329412 rgb
f
319.944 239.942 mo
319.944 239.938 li
320.448 239.913 320.855 239.5 320.883 238.982 cv
320.855 239.501 320.448 239.917 319.944 239.942 cv
321.784 239.147 mo
321.785 239.146 321.785 239.146 321.785 239.146 cv
321.785 239.146 321.785 239.146 321.784 239.147 cv
321.786 239.135 mo
321.786 239.134 321.786 239.134 321.786 239.133 cv
321.786 239.134 321.786 239.134 321.786 239.135 cv
321.787 239.123 mo
321.787 239.122 321.787 239.121 321.787 239.121 cv
321.787 239.121 321.787 239.122 321.787 239.123 cv
321.788 239.11 mo
321.788 239.11 321.788 239.109 321.788 239.108 cv
321.788 239.109 321.788 239.11 321.788 239.11 cv
321.789 239.098 mo
321.789 239.097 321.789 239.096 321.789 239.095 cv
321.789 239.096 321.789 239.097 321.789 239.098 cv
321.79 239.086 mo
321.79 239.085 321.79 239.084 321.79 239.083 cv
321.79 239.084 321.79 239.085 321.79 239.086 cv
321.791 239.074 mo
321.791 239.073 321.791 239.071 321.791 239.07 cv
321.791 239.071 321.791 239.073 321.791 239.074 cv
321.792 239.062 mo
321.792 239.06 321.792 239.059 321.792 239.058 cv
321.792 239.059 321.792 239.06 321.792 239.062 cv
321.793 239.049 mo
321.793 239.048 321.793 239.046 321.793 239.045 cv
321.793 239.046 321.793 239.048 321.793 239.049 cv
321.793 239.037 mo
321.794 239.036 321.794 239.034 321.794 239.032 cv
321.794 239.034 321.794 239.036 321.793 239.037 cv
321.794 239.025 mo
321.794 239.023 321.794 239.021 321.794 239.02 cv
321.794 239.021 321.794 239.023 321.794 239.025 cv
321.795 239.012 mo
321.795 239.011 321.795 239.009 321.795 239.007 cv
321.795 239.009 321.795 239.011 321.795 239.012 cv
321.795 239 mo
321.795 238.998 321.795 238.996 321.795 238.994 cv
321.795 238.996 321.795 238.998 321.795 239 cv
321.796 238.988 mo
321.796 238.985 321.796 238.983 321.796 238.981 cv
321.796 238.983 321.796 238.985 321.796 238.988 cv
320.883 238.982 mo
320.883 238.98 320.883 238.978 320.883 238.976 cv
320.883 238.978 320.883 238.98 320.883 238.982 cv
320.883 238.975 mo
320.883 238.973 320.884 238.971 320.884 238.97 cv
320.884 238.971 320.883 238.973 320.883 238.975 cv
321.796 238.975 mo
321.796 238.973 321.796 238.97 321.796 238.968 cv
321.796 238.97 321.796 238.973 321.796 238.975 cv
320.884 238.969 mo
320.884 238.967 320.884 238.965 320.884 238.963 cv
320.884 238.965 320.884 238.967 320.884 238.969 cv
321.796 238.963 mo
321.796 238.96 321.796 238.958 321.796 238.955 cv
321.796 238.957 321.796 238.96 321.796 238.963 cv
320.884 238.962 mo
320.884 238.96 320.884 238.959 320.884 238.957 cv
320.884 238.959 320.884 238.96 320.884 238.962 cv
320.884 238.955 mo
320.884 238.954 320.884 238.952 320.884 238.951 cv
320.884 238.952 320.884 238.954 320.884 238.955 cv
321.796 238.95 mo
321.796 238.947 321.796 238.944 321.796 238.942 cv
321.796 238.944 321.796 238.947 321.796 238.95 cv
320.884 238.947 mo
320.884 238.946 320.884 238.945 320.884 238.944 cv
320.884 238.945 320.884 238.946 320.884 238.947 cv
320.884 238.941 mo
320.884 238.94 320.884 238.939 320.884 238.938 cv
320.884 238.939 320.884 238.94 320.884 238.941 cv
321.797 238.938 mo
321.797 238.933 321.797 238.929 321.797 238.925 cv
321.797 238.925 li
321.797 238.929 321.797 238.933 321.797 238.938 cv
320.885 238.934 mo
320.885 238.933 320.885 238.932 320.885 238.931 cv
320.885 238.932 320.885 238.933 320.885 238.934 cv
321.797 238.925 mo
321.797 238.921 321.797 238.917 321.797 238.912 cv
321.797 238.917 321.797 238.921 321.797 238.925 cv
320.885 238.919 mo
320.885 238.918 320.885 238.917 320.885 238.916 cv
320.885 238.917 320.885 238.918 320.885 238.919 cv
320.884 238.912 mo
320.884 238.911 320.884 238.91 320.884 238.909 cv
320.884 238.91 320.884 238.911 320.884 238.912 cv
321.796 238.908 mo
321.796 238.906 321.796 238.903 321.796 238.9 cv
321.796 238.903 321.796 238.905 321.796 238.908 cv
320.884 238.906 mo
320.884 238.905 320.884 238.904 320.884 238.903 cv
320.884 238.904 320.884 238.905 320.884 238.906 cv
320.884 238.899 mo
320.884 238.898 320.884 238.896 320.884 238.895 cv
320.884 238.896 320.884 238.898 320.884 238.899 cv
321.796 238.895 mo
321.796 238.892 321.796 238.89 321.796 238.887 cv
321.796 238.89 321.796 238.892 321.796 238.895 cv
320.884 238.893 mo
320.884 238.891 320.884 238.89 320.884 238.888 cv
320.884 238.89 320.884 238.891 320.884 238.893 cv
320.884 238.887 mo
320.884 238.885 320.884 238.883 320.884 238.881 cv
320.884 238.883 320.884 238.885 320.884 238.887 cv
321.796 238.882 mo
321.796 238.879 321.796 238.877 321.796 238.875 cv
321.796 238.877 321.796 238.879 321.796 238.882 cv
320.884 238.88 mo
320.884 238.878 320.883 238.877 320.883 238.875 cv
320.883 238.877 320.884 238.878 320.884 238.88 cv
320.883 238.874 mo
320.883 238.872 320.883 238.87 320.883 238.868 cv
320.883 238.87 320.883 238.872 320.883 238.874 cv
321.796 238.869 mo
321.796 238.867 321.796 238.864 321.796 238.862 cv
321.796 238.864 321.796 238.867 321.796 238.869 cv
320.883 238.868 mo
320.855 238.35 320.448 237.937 319.944 237.912 cv
319.944 237.908 li
320.448 237.933 320.855 238.349 320.883 238.868 cv
321.795 238.855 mo
321.795 238.854 321.795 238.852 321.795 238.85 cv
321.795 238.852 321.795 238.854 321.795 238.855 cv
321.795 238.842 mo
321.795 238.841 321.795 238.839 321.795 238.838 cv
321.795 238.839 321.795 238.841 321.795 238.842 cv
321.794 238.83 mo
321.794 238.828 321.794 238.827 321.794 238.825 cv
321.794 238.827 321.794 238.828 321.794 238.83 cv
321.794 238.817 mo
321.794 238.816 321.794 238.814 321.793 238.813 cv
321.794 238.814 321.794 238.816 321.794 238.817 cv
321.793 238.804 mo
321.793 238.803 321.793 238.802 321.793 238.801 cv
321.793 238.802 321.793 238.803 321.793 238.804 cv
321.792 238.792 mo
321.792 238.791 321.792 238.789 321.792 238.788 cv
321.792 238.79 321.792 238.791 321.792 238.792 cv
321.791 238.779 mo
321.791 238.778 321.791 238.777 321.791 238.776 cv
321.791 238.777 321.791 238.778 321.791 238.779 cv
321.79 238.766 mo
321.79 238.766 321.79 238.765 321.79 238.764 cv
321.79 238.765 321.79 238.766 321.79 238.766 cv
321.789 238.754 mo
321.789 238.753 321.789 238.752 321.789 238.752 cv
321.789 238.752 321.789 238.753 321.789 238.754 cv
321.788 238.741 mo
321.788 238.74 321.788 238.74 321.788 238.74 cv
321.788 238.74 321.788 238.74 321.788 238.741 cv
321.787 238.728 mo
321.787 238.728 321.787 238.728 321.787 238.728 cv
321.787 238.728 321.787 238.728 321.787 238.728 cv
.973948 .98579 .986974 rgb
f
321.233 240.315 mo
320.845 240.248 320.447 240.211 320.042 240.205 cv
320.04 240.205 320.037 240.205 320.035 240.205 cv
320.029 240.204 320.023 240.204 320.017 240.204 cv
320.013 240.204 320.008 240.204 320.004 240.204 cv
320.001 240.204 319.999 240.204 319.996 240.204 cv
319.99 240.204 319.983 240.204 319.976 240.204 cv
319.975 240.204 319.972 240.204 319.97 240.204 cv
319.963 240.204 319.956 240.204 319.949 240.204 cv
319.948 240.204 319.946 240.204 319.945 240.204 cv
319.945 240.204 319.944 240.204 319.944 240.204 cv
319.944 239.942 li
320.448 239.917 320.855 239.501 320.883 238.982 cv
320.883 238.982 320.883 238.982 320.883 238.982 cv
320.883 238.98 320.883 238.978 320.883 238.976 cv
320.883 238.976 320.883 238.975 320.883 238.975 cv
320.883 238.973 320.884 238.971 320.884 238.97 cv
320.884 238.969 320.884 238.969 320.884 238.969 cv
320.884 238.967 320.884 238.965 320.884 238.963 cv
320.884 238.963 320.884 238.962 320.884 238.962 cv
320.884 238.96 320.884 238.959 320.884 238.957 cv
320.884 238.956 320.884 238.956 320.884 238.955 cv
320.884 238.954 320.884 238.952 320.884 238.951 cv
320.884 238.95 320.884 238.949 320.884 238.947 cv
320.884 238.946 320.884 238.945 320.884 238.944 cv
320.884 238.943 320.884 238.942 320.884 238.941 cv
320.884 238.94 320.884 238.939 320.884 238.938 cv
320.884 238.936 320.885 238.935 320.885 238.934 cv
320.885 238.933 320.885 238.932 320.885 238.931 cv
320.885 238.929 320.885 238.927 320.885 238.925 cv
320.885 238.925 li
320.885 238.925 li
320.885 238.925 li
320.885 238.923 320.885 238.921 320.885 238.919 cv
320.885 238.918 320.885 238.917 320.885 238.916 cv
320.885 238.915 320.884 238.913 320.884 238.912 cv
320.884 238.911 320.884 238.91 320.884 238.909 cv
320.884 238.908 320.884 238.907 320.884 238.906 cv
320.884 238.905 320.884 238.904 320.884 238.903 cv
320.884 238.901 320.884 238.9 320.884 238.899 cv
320.884 238.898 320.884 238.896 320.884 238.895 cv
320.884 238.894 320.884 238.894 320.884 238.893 cv
320.884 238.891 320.884 238.89 320.884 238.888 cv
320.884 238.888 320.884 238.887 320.884 238.887 cv
320.884 238.885 320.884 238.883 320.884 238.881 cv
320.884 238.881 320.884 238.881 320.884 238.88 cv
320.884 238.878 320.883 238.877 320.883 238.875 cv
320.883 238.875 320.883 238.874 320.883 238.874 cv
320.883 238.872 320.883 238.87 320.883 238.868 cv
320.883 238.868 320.883 238.868 320.883 238.868 cv
320.855 238.349 320.448 237.933 319.944 237.908 cv
319.944 236.97 li
320.907 236.995 321.693 237.756 321.787 238.728 cv
321.787 238.728 321.787 238.728 321.787 238.728 cv
321.787 238.732 321.788 238.736 321.788 238.74 cv
321.788 238.74 321.788 238.74 321.788 238.741 cv
321.789 238.744 321.789 238.748 321.789 238.752 cv
321.789 238.752 321.789 238.753 321.789 238.754 cv
321.79 238.757 321.79 238.761 321.79 238.764 cv
321.79 238.765 321.79 238.766 321.79 238.766 cv
321.791 238.77 321.791 238.773 321.791 238.776 cv
321.791 238.777 321.791 238.778 321.791 238.779 cv
321.792 238.782 321.792 238.785 321.792 238.788 cv
321.792 238.789 321.792 238.791 321.792 238.792 cv
321.792 238.795 321.793 238.798 321.793 238.801 cv
321.793 238.802 321.793 238.803 321.793 238.804 cv
321.793 238.807 321.793 238.81 321.793 238.813 cv
321.794 238.814 321.794 238.816 321.794 238.817 cv
321.794 238.82 321.794 238.823 321.794 238.825 cv
321.794 238.827 321.794 238.828 321.794 238.83 cv
321.794 238.832 321.795 238.835 321.795 238.838 cv
321.795 238.839 321.795 238.841 321.795 238.842 cv
321.795 238.845 321.795 238.847 321.795 238.85 cv
321.795 238.852 321.795 238.854 321.795 238.855 cv
321.795 238.858 321.796 238.86 321.796 238.862 cv
321.796 238.864 321.796 238.867 321.796 238.869 cv
321.796 238.871 321.796 238.873 321.796 238.875 cv
321.796 238.877 321.796 238.879 321.796 238.882 cv
321.796 238.884 321.796 238.885 321.796 238.887 cv
321.796 238.89 321.796 238.892 321.796 238.895 cv
321.796 238.897 321.796 238.898 321.796 238.9 cv
321.796 238.903 321.796 238.906 321.796 238.908 cv
321.796 238.91 321.796 238.911 321.797 238.912 cv
321.797 238.917 321.797 238.921 321.797 238.925 cv
321.797 238.925 li
321.797 238.929 321.797 238.933 321.797 238.938 cv
321.796 238.939 321.796 238.94 321.796 238.942 cv
321.796 238.944 321.796 238.947 321.796 238.95 cv
321.796 238.952 321.796 238.953 321.796 238.955 cv
321.796 238.958 321.796 238.96 321.796 238.963 cv
321.796 238.964 321.796 238.966 321.796 238.968 cv
321.796 238.97 321.796 238.973 321.796 238.975 cv
321.796 238.977 321.796 238.979 321.796 238.981 cv
321.796 238.983 321.796 238.985 321.796 238.988 cv
321.796 238.99 321.795 238.992 321.795 238.994 cv
321.795 238.996 321.795 238.998 321.795 239 cv
321.795 239.002 321.795 239.005 321.795 239.007 cv
321.795 239.009 321.795 239.011 321.795 239.012 cv
321.795 239.015 321.794 239.017 321.794 239.02 cv
321.794 239.021 321.794 239.023 321.794 239.025 cv
321.794 239.027 321.794 239.03 321.794 239.032 cv
321.794 239.034 321.794 239.036 321.793 239.037 cv
321.793 239.04 321.793 239.042 321.793 239.045 cv
321.793 239.046 321.793 239.048 321.793 239.049 cv
321.793 239.052 321.792 239.055 321.792 239.058 cv
321.792 239.059 321.792 239.06 321.792 239.062 cv
321.792 239.065 321.792 239.067 321.791 239.07 cv
321.791 239.071 321.791 239.073 321.791 239.074 cv
321.791 239.077 321.791 239.08 321.79 239.083 cv
321.79 239.084 321.79 239.085 321.79 239.086 cv
321.79 239.089 321.79 239.092 321.789 239.095 cv
321.789 239.096 321.789 239.097 321.789 239.098 cv
321.789 239.102 321.789 239.105 321.788 239.108 cv
321.788 239.109 321.788 239.11 321.788 239.11 cv
321.788 239.114 321.787 239.117 321.787 239.121 cv
321.787 239.121 321.787 239.122 321.787 239.123 cv
321.787 239.126 321.786 239.13 321.786 239.133 cv
321.786 239.134 321.786 239.134 321.786 239.135 cv
321.785 239.138 321.785 239.142 321.785 239.146 cv
321.785 239.146 321.785 239.146 321.784 239.147 cv
321.735 239.602 321.533 240.01 321.233 240.315 cv
.376471 .466667 .517647 rgb
f
312.018 248.346 mo
312.018 252.843 315.557 256.489 319.922 256.489 cv
324.287 256.489 327.826 252.843 327.826 248.346 cv
327.826 243.849 324.287 240.204 319.922 240.204 cv
315.557 240.204 312.018 243.849 312.018 248.346 cv
.913725 .952941 .956863 rgb
f
316.386 241.066 mo
317.45 240.516 318.65 240.204 319.922 240.204 cv
321.194 240.204 322.394 240.516 323.458 241.066 cv
316.386 241.066 li
.145098 .258824 .329412 rgb
f
327.047 244.828 mo
327.515 245.832 327.791 246.95 327.821 248.132 cv
312.023 248.132 li
312.053 246.95 312.328 245.832 312.796 244.828 cv
327.047 244.828 li
f
324.691 254.835 mo
315.152 254.835 li
314.151 254.051 313.335 253.029 312.789 251.848 cv
327.055 251.848 li
326.508 253.029 325.693 254.051 324.691 254.835 cv
f
327.803 248.971 mo
327.803 248.97 li
327.803 248.97 327.803 248.97 327.803 248.971 cv
327.81 248.867 mo
327.81 248.867 327.81 248.866 327.81 248.866 cv
327.81 248.866 327.81 248.867 327.81 248.867 cv
327.812 248.841 mo
327.812 248.841 327.812 248.841 327.812 248.841 cv
327.812 248.841 327.812 248.841 327.812 248.841 cv
327.813 248.816 mo
327.813 248.815 327.813 248.815 327.813 248.814 cv
327.813 248.815 327.813 248.815 327.813 248.816 cv
327.815 248.79 mo
327.815 248.789 327.815 248.788 327.815 248.787 cv
327.815 248.788 327.815 248.789 327.815 248.79 cv
327.816 248.764 mo
327.816 248.763 327.816 248.761 327.816 248.76 cv
327.816 248.761 327.816 248.763 327.816 248.764 cv
327.817 248.738 mo
327.817 248.736 327.817 248.734 327.817 248.733 cv
327.817 248.734 327.817 248.736 327.817 248.738 cv
327.818 248.712 mo
327.818 248.71 327.818 248.708 327.819 248.706 cv
327.818 248.708 327.818 248.71 327.818 248.712 cv
327.819 248.686 mo
327.819 248.684 327.819 248.682 327.82 248.68 cv
327.819 248.682 327.819 248.684 327.819 248.686 cv
327.82 248.66 mo
327.82 248.658 327.82 248.657 327.82 248.655 cv
327.82 248.656 327.82 248.658 327.82 248.66 cv
327.821 248.634 mo
327.821 248.632 327.821 248.629 327.821 248.627 cv
327.821 248.629 327.821 248.632 327.821 248.634 cv
327.822 248.608 mo
327.822 248.606 327.822 248.604 327.822 248.602 cv
327.822 248.604 327.822 248.606 327.822 248.608 cv
327.823 248.582 mo
327.823 248.58 327.823 248.577 327.823 248.575 cv
327.823 248.577 327.823 248.58 327.823 248.582 cv
327.824 248.556 mo
327.824 248.553 327.824 248.55 327.824 248.548 cv
327.824 248.551 327.824 248.553 327.824 248.556 cv
327.824 248.53 mo
327.824 248.528 327.824 248.526 327.824 248.525 cv
327.824 248.526 327.824 248.528 327.824 248.53 cv
327.825 248.504 mo
327.825 248.501 327.825 248.498 327.825 248.496 cv
327.825 248.498 327.825 248.501 327.825 248.504 cv
327.825 248.477 mo
327.825 248.474 327.825 248.471 327.825 248.467 cv
327.825 248.47 327.825 248.474 327.825 248.477 cv
327.825 248.451 mo
327.826 248.446 327.826 248.441 327.826 248.435 cv
327.826 248.441 327.826 248.446 327.825 248.451 cv
327.826 248.425 mo
327.826 248.42 327.826 248.414 327.826 248.409 cv
327.826 248.414 327.826 248.42 327.826 248.425 cv
327.826 248.399 mo
327.826 248.391 327.826 248.384 327.826 248.377 cv
327.826 248.384 327.826 248.391 327.826 248.399 cv
327.826 248.373 mo
327.826 248.364 327.826 248.355 327.826 248.346 cv
327.826 248.346 li
327.826 248.355 327.826 248.364 327.826 248.373 cv
327.826 248.346 mo
327.826 248.337 327.826 248.329 327.826 248.32 cv
327.826 248.329 327.826 248.338 327.826 248.346 cv
327.826 248.316 mo
327.826 248.309 327.826 248.301 327.826 248.294 cv
327.826 248.301 327.826 248.309 327.826 248.316 cv
327.826 248.285 mo
327.826 248.279 327.826 248.273 327.826 248.267 cv
327.826 248.273 327.826 248.279 327.826 248.285 cv
327.826 248.259 mo
327.826 248.253 327.826 248.247 327.825 248.241 cv
327.826 248.247 327.826 248.253 327.826 248.259 cv
327.825 248.227 mo
327.825 248.223 327.825 248.219 327.825 248.215 cv
327.825 248.219 327.825 248.223 327.825 248.227 cv
327.825 248.199 mo
327.825 248.195 327.825 248.192 327.825 248.189 cv
327.825 248.192 327.825 248.195 327.825 248.199 cv
327.824 248.17 mo
327.824 248.168 327.824 248.165 327.824 248.163 cv
327.824 248.165 327.824 248.167 327.824 248.17 cv
327.824 248.147 mo
327.824 248.143 327.824 248.14 327.824 248.137 cv
327.824 248.14 327.824 248.143 327.824 248.147 cv
327.823 248.12 mo
327.823 248.117 327.823 248.114 327.823 248.11 cv
327.823 248.114 327.823 248.117 327.823 248.12 cv
327.822 248.094 mo
327.822 248.091 327.822 248.087 327.822 248.084 cv
327.822 248.087 327.822 248.091 327.822 248.094 cv
327.822 248.069 mo
327.821 248.065 327.821 248.062 327.821 248.058 cv
327.821 248.062 327.821 248.065 327.822 248.069 cv
327.821 248.042 mo
327.821 248.039 327.82 248.036 327.82 248.032 cv
327.82 248.035 327.821 248.039 327.821 248.042 cv
327.82 248.016 mo
327.82 248.012 327.819 248.009 327.819 248.006 cv
327.819 248.009 327.82 248.012 327.82 248.016 cv
327.819 247.991 mo
327.819 247.987 327.818 247.984 327.818 247.98 cv
327.818 247.984 327.819 247.987 327.819 247.991 cv
327.818 247.965 mo
327.817 247.961 327.817 247.958 327.817 247.954 cv
327.817 247.958 327.817 247.961 327.818 247.965 cv
327.816 247.937 mo
327.816 247.934 327.816 247.931 327.816 247.928 cv
327.816 247.932 327.816 247.934 327.816 247.937 cv
327.815 247.91 mo
327.815 247.908 327.815 247.905 327.815 247.902 cv
327.815 247.905 327.815 247.908 327.815 247.91 cv
327.814 247.884 mo
327.813 247.881 327.813 247.879 327.813 247.877 cv
327.813 247.879 327.813 247.881 327.814 247.884 cv
327.812 247.857 mo
327.812 247.855 327.812 247.853 327.812 247.851 cv
327.812 247.853 327.812 247.855 327.812 247.857 cv
327.811 247.832 mo
327.81 247.83 327.81 247.827 327.81 247.825 cv
327.81 247.827 327.81 247.83 327.811 247.832 cv
327.809 247.805 mo
327.809 247.803 327.809 247.801 327.809 247.799 cv
327.809 247.801 327.809 247.803 327.809 247.805 cv
327.807 247.779 mo
327.807 247.777 327.807 247.775 327.807 247.773 cv
327.807 247.775 327.807 247.777 327.807 247.779 cv
327.805 247.753 mo
327.805 247.751 327.805 247.749 327.805 247.747 cv
327.805 247.749 327.805 247.751 327.805 247.753 cv
327.804 247.729 mo
327.803 247.726 327.803 247.724 327.803 247.721 cv
327.803 247.724 327.803 247.726 327.804 247.729 cv
327.802 247.702 mo
327.802 247.7 327.801 247.698 327.801 247.696 cv
327.801 247.698 327.802 247.7 327.802 247.702 cv
327.8 247.677 mo
327.8 247.674 327.799 247.672 327.799 247.67 cv
327.799 247.672 327.8 247.674 327.8 247.677 cv
327.798 247.65 mo
327.797 247.648 327.797 247.646 327.797 247.644 cv
327.797 247.646 327.797 247.648 327.798 247.65 cv
327.795 247.624 mo
327.795 247.622 327.795 247.62 327.795 247.619 cv
327.795 247.621 327.795 247.622 327.795 247.624 cv
327.793 247.598 mo
327.793 247.597 327.793 247.595 327.793 247.593 cv
327.793 247.595 327.793 247.597 327.793 247.598 cv
327.791 247.572 mo
327.791 247.571 327.791 247.569 327.79 247.567 cv
327.791 247.569 327.791 247.57 327.791 247.572 cv
327.788 247.546 mo
327.788 247.544 327.788 247.543 327.788 247.542 cv
327.788 247.543 327.788 247.545 327.788 247.546 cv
327.786 247.519 mo
327.786 247.518 327.786 247.517 327.786 247.516 cv
327.786 247.517 327.786 247.519 327.786 247.519 cv
327.783 247.493 mo
327.783 247.492 327.783 247.492 327.783 247.491 cv
327.783 247.492 327.783 247.493 327.783 247.493 cv
327.781 247.468 mo
327.781 247.467 327.78 247.466 327.78 247.465 cv
327.78 247.466 327.781 247.467 327.781 247.468 cv
327.778 247.442 mo
327.778 247.441 327.778 247.44 327.778 247.44 cv
327.778 247.44 327.778 247.441 327.778 247.442 cv
327.775 247.415 mo
327.775 247.415 327.775 247.415 327.775 247.415 cv
327.775 247.415 327.775 247.415 327.775 247.415 cv
327.772 247.389 mo
327.772 247.389 li
327.772 247.389 li
327.769 247.364 mo
327.769 247.364 327.769 247.364 327.769 247.364 cv
327.769 247.364 li
.973948 .98579 .986974 rgb
f
319.969 256.487 mo
319.969 254.835 li
324.691 254.835 li
325.693 254.051 326.508 253.029 327.055 251.848 cv
319.969 251.848 li
319.969 248.132 li
327.821 248.132 li
327.821 248.132 li
327.791 246.95 327.515 245.832 327.047 244.828 cv
319.969 244.828 li
319.969 241.066 li
323.458 241.066 li
323.458 241.066 li
322.839 240.746 322.175 240.507 321.477 240.362 cv
324.793 241.044 327.36 243.861 327.769 247.364 cv
327.769 247.364 327.769 247.364 327.769 247.364 cv
327.77 247.372 327.771 247.381 327.772 247.389 cv
327.772 247.389 li
327.773 247.398 327.774 247.406 327.775 247.415 cv
327.775 247.415 327.775 247.415 327.775 247.415 cv
327.776 247.424 327.777 247.432 327.778 247.44 cv
327.778 247.44 327.778 247.441 327.778 247.442 cv
327.779 247.45 327.78 247.457 327.78 247.465 cv
327.78 247.466 327.781 247.467 327.781 247.468 cv
327.781 247.476 327.782 247.483 327.783 247.491 cv
327.783 247.492 327.783 247.492 327.783 247.493 cv
327.784 247.501 327.785 247.509 327.786 247.516 cv
327.786 247.517 327.786 247.518 327.786 247.519 cv
327.787 247.527 327.787 247.534 327.788 247.542 cv
327.788 247.543 327.788 247.544 327.788 247.546 cv
327.789 247.553 327.79 247.56 327.79 247.567 cv
327.791 247.569 327.791 247.571 327.791 247.572 cv
327.791 247.579 327.792 247.586 327.793 247.593 cv
327.793 247.595 327.793 247.597 327.793 247.598 cv
327.794 247.605 327.794 247.612 327.795 247.619 cv
327.795 247.62 327.795 247.622 327.795 247.624 cv
327.796 247.63 327.797 247.638 327.797 247.644 cv
327.797 247.646 327.797 247.648 327.798 247.65 cv
327.798 247.657 327.799 247.663 327.799 247.67 cv
327.799 247.672 327.8 247.674 327.8 247.677 cv
327.8 247.683 327.801 247.689 327.801 247.696 cv
327.801 247.698 327.802 247.7 327.802 247.702 cv
327.802 247.709 327.803 247.715 327.803 247.721 cv
327.803 247.724 327.803 247.726 327.804 247.729 cv
327.804 247.735 327.805 247.741 327.805 247.747 cv
327.805 247.749 327.805 247.751 327.805 247.753 cv
327.806 247.76 327.806 247.767 327.807 247.773 cv
327.807 247.775 327.807 247.777 327.807 247.779 cv
327.808 247.785 327.808 247.792 327.809 247.799 cv
327.809 247.801 327.809 247.803 327.809 247.805 cv
327.809 247.812 327.81 247.818 327.81 247.825 cv
327.81 247.827 327.81 247.83 327.811 247.832 cv
327.811 247.838 327.811 247.845 327.812 247.851 cv
327.812 247.853 327.812 247.855 327.812 247.857 cv
327.812 247.863 327.813 247.87 327.813 247.877 cv
327.813 247.879 327.813 247.881 327.814 247.884 cv
327.814 247.89 327.814 247.896 327.815 247.902 cv
327.815 247.905 327.815 247.908 327.815 247.91 cv
327.815 247.916 327.816 247.922 327.816 247.928 cv
327.816 247.931 327.816 247.934 327.816 247.937 cv
327.817 247.943 327.817 247.949 327.817 247.954 cv
327.817 247.958 327.817 247.961 327.818 247.965 cv
327.818 247.97 327.818 247.975 327.818 247.98 cv
327.818 247.984 327.819 247.987 327.819 247.991 cv
327.819 247.996 327.819 248.001 327.819 248.006 cv
327.819 248.009 327.82 248.012 327.82 248.016 cv
327.82 248.021 327.82 248.027 327.82 248.032 cv
327.82 248.036 327.821 248.039 327.821 248.042 cv
327.821 248.047 327.821 248.053 327.821 248.058 cv
327.821 248.062 327.821 248.065 327.822 248.069 cv
327.822 248.074 327.822 248.079 327.822 248.084 cv
327.822 248.087 327.822 248.091 327.822 248.094 cv
327.823 248.099 327.823 248.105 327.823 248.11 cv
327.823 248.114 327.823 248.117 327.823 248.12 cv
327.823 248.126 327.823 248.131 327.824 248.137 cv
327.824 248.14 327.824 248.143 327.824 248.147 cv
327.824 248.152 327.824 248.157 327.824 248.163 cv
327.824 248.165 327.824 248.168 327.824 248.17 cv
327.824 248.176 327.825 248.183 327.825 248.189 cv
327.825 248.192 327.825 248.195 327.825 248.199 cv
327.825 248.204 327.825 248.21 327.825 248.215 cv
327.825 248.219 327.825 248.223 327.825 248.227 cv
327.825 248.232 327.825 248.237 327.825 248.241 cv
327.826 248.247 327.826 248.253 327.826 248.259 cv
327.826 248.262 327.826 248.264 327.826 248.267 cv
327.826 248.273 327.826 248.279 327.826 248.285 cv
327.826 248.288 327.826 248.291 327.826 248.294 cv
327.826 248.301 327.826 248.309 327.826 248.316 cv
327.826 248.318 327.826 248.319 327.826 248.32 cv
327.826 248.329 327.826 248.337 327.826 248.346 cv
327.826 248.346 li
327.826 248.355 327.826 248.364 327.826 248.373 cv
327.826 248.374 327.826 248.375 327.826 248.377 cv
327.826 248.384 327.826 248.391 327.826 248.399 cv
327.826 248.402 327.826 248.405 327.826 248.409 cv
327.826 248.414 327.826 248.42 327.826 248.425 cv
327.826 248.428 327.826 248.432 327.826 248.435 cv
327.826 248.441 327.826 248.446 327.825 248.451 cv
327.825 248.457 327.825 248.462 327.825 248.467 cv
327.825 248.471 327.825 248.474 327.825 248.477 cv
327.825 248.483 327.825 248.49 327.825 248.496 cv
327.825 248.498 327.825 248.501 327.825 248.504 cv
327.824 248.511 327.824 248.518 327.824 248.525 cv
327.824 248.526 327.824 248.528 327.824 248.53 cv
327.824 248.536 327.824 248.542 327.824 248.548 cv
327.824 248.55 327.824 248.553 327.824 248.556 cv
327.823 248.562 327.823 248.568 327.823 248.575 cv
327.823 248.577 327.823 248.58 327.823 248.582 cv
327.823 248.588 327.822 248.595 327.822 248.602 cv
327.822 248.604 327.822 248.606 327.822 248.608 cv
327.822 248.614 327.822 248.62 327.821 248.627 cv
327.821 248.629 327.821 248.632 327.821 248.634 cv
327.821 248.641 327.821 248.648 327.82 248.655 cv
327.82 248.657 327.82 248.658 327.82 248.66 cv
327.82 248.667 327.82 248.674 327.82 248.68 cv
327.819 248.682 327.819 248.684 327.819 248.686 cv
327.819 248.693 327.819 248.699 327.819 248.706 cv
327.818 248.708 327.818 248.71 327.818 248.712 cv
327.818 248.719 327.818 248.726 327.817 248.733 cv
327.817 248.734 327.817 248.736 327.817 248.738 cv
327.817 248.745 327.816 248.753 327.816 248.76 cv
327.816 248.761 327.816 248.763 327.816 248.764 cv
327.815 248.772 327.815 248.779 327.815 248.787 cv
327.815 248.788 327.815 248.789 327.815 248.79 cv
327.814 248.798 327.814 248.806 327.813 248.814 cv
327.813 248.815 327.813 248.815 327.813 248.816 cv
327.813 248.824 327.812 248.832 327.812 248.841 cv
327.812 248.841 327.812 248.841 327.812 248.841 cv
327.811 248.85 327.811 248.858 327.81 248.866 cv
327.81 248.866 327.81 248.867 327.81 248.867 cv
327.808 248.902 327.806 248.936 327.803 248.97 cv
327.803 248.971 li
327.495 253.16 324.109 256.462 319.969 256.487 cv
.913725 .952941 .956863 rgb
f
323.458 241.066 mo
319.969 241.066 li
319.969 240.205 li
320.485 240.208 320.989 240.262 321.477 240.362 cv
322.175 240.507 322.839 240.746 323.458 241.066 cv
.376471 .466667 .517647 rgb
f
327.821 248.132 mo
319.969 248.132 li
319.969 244.828 li
327.047 244.828 li
327.515 245.832 327.791 246.95 327.821 248.132 cv
f
324.691 254.835 mo
319.969 254.835 li
319.969 251.848 li
327.055 251.848 li
326.508 253.029 325.693 254.051 324.691 254.835 cv
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: (??????? ??????) ()
%%Title: (150423_ 173285423 Militaristic ships icons.eps)
%%CreationDate: 4/23/2015 8:13 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj4Nhde<S6>Z^r\32!2]p,i=)+X)XG6,7c]O9CAM1.-845!6UYX]f5:SH,-;S-1lS[gMk96WMrXW&;oGXg\P;C;"bqhYqj^
%j'%j>cOM_%'4hq"s,[3(c+U(EeU!';ft\+PTV%32gOmj]f(EhuULa<_F>.$p>o>J7Xo<4I?)dLCq0&Ohm4DuA^WN\&G529TPVXCs
%NCNfKb^-$h3J0<%/cW%WDq'[3DR8-E"BgY6mNIMd[Kj&[!W8AEiSdfNT`&'/&#)AD(jp4>F.HnL./Rr^o9[h/^P%(*-1i2Pf7SSO
%04APcIsq6)iQkjQ@5>BqJ7lK$l]f$CI_FQhN0Z7Xr&5-.1POP&H-kbrGqqDpr7HL`_'GU_FukHO=KDLUYh=MlplGGe7gb@X/_^!7
%%Q=4urp41NN5tPCh(<"U%M'+Q):+)aNeh'RAUqia',%Eo:ht4mjaN2OlQCmH,l<Ar+p.p3/E!6C"8u%)I)j>55pl*RY9Elh_Wi=A
%qm0W+CH;!\<j(#bK'?OL^L.!o0^AH^YU/5@6)3"ZgT("aCcnDY'=$Aref(3YNa?Od)=9gbp9t<I;!sq)qG;LmN</USS;AfmmId,T
%.fZMWM6o\u4.TR@T`'lW]'-\B`c2kdY2a)ffU##%@@4<j5V]5/_ZV[)9K5F\G+jTWFR(=If(("'.h4u#h<`^n]'+lD-K9N['XJDI
%'?`U,:f+d]YI11e[W@hn-C)BhDXV)\)m*khh*h/7nCR=Oa8e)md68.Loe5YN,VeKg<>]]M\d]8:/PPr#s1ILOU;Pg,!'Y:DgOmdP
%laZo6J*(h&p/*F5Y#aer]>/);ZZGa@IX.0GB,*7Ecn/<A%JX4_ad27`8!bJ,H?O'ArY=Fu?ff%:i^40/L.!E)d>c_L[77bq''A0$
%Uq#/-\'!M8qk+QQec1:UA[%@n&d-_]+&\pAAYfK@@B$IbM=`G,5X)$dW`3mG-,Hg+\,TOAH\R2RCLu<)Vb)"1XOaSF-Bf2.mj,PM
%m[lht:hs'XaqjnVD.g4=a3pcN0/jgBPA[pP>-DJf]7\sSk+LOJW74=b=#nZHlk@B4WCFYRD=+^?5/Xpg!6GYCIH,=E3&_Rf<)2rQ
%-KQE\ZVdhl'6R&M]J.S/?Y(YWV>=&h_RTWHH.6`]HVKbd7<YBee16O4ri]YCQE"fUY;"p)fuX)elm1L>=m<M=6/%@b/asB.qh'40
%VX%j+fg-uBZ[Z0He<kr#aF0VTIgGukmC*iI0C@/'MgsN3[g<LC+8qBLolF^_If$?TH4A.)qmfP,TJ'11rjq1>8nS(kAtoMO(Vp+-
%qU(sCK8+1C!p7)ME\^>M[,.a)CFp==aXh9pGG7:\?i=?12LM%(/SjcOAn`>"D4R&Fr[]u4,1KumCB*pr@'+I5LB7KE\:pn_k-S/R
%3UN`k7L#BI3baiS4,"`*:U^\G;Q0)#E[p.Y%_oN>ou6U[05g!%E<H!r=bl_4RanGf<5Utbd]LcACGI$I>c2)_Pd)rC$K[5n$gCWY
%[O/:EkT7Q"Z;ml0DB0ea;R<=?-W;J#Q@HFp8*+'ZfWG)lJECRGBHmAMP\[]$qfQkK/m#9t_VlJ&RZ_K?Ss49@j]]%rc(.JAr+@LU
%B])JHK[oC/[CWd&TTQ,#Q2soB2Wr1u?R57)NF_G7Z:9JfI'Mc\6HXb(d&keUq%,DP8(UA^dBt<&aNbN^.+.J4\n)_9V,0ScSaKZ[
%Dk5KhR)CrtY:j]_emj?>'\2<6UgVKjjT6tJC<)a-fuS'rPaRNtVFuU^3jS?h,J/HGaR6QB#4K%k\m=d\T!;RYH&:5$DYf*2.2nc1
%cu(bKRgnas6bD$umU&/bj,U0mc71fUkeLC"BA\L%*VeiR*:tCN@)GL,Hat\8-mAj>bjANUn?%XfV=em';Y?_/m*(N_@R%S2CUX7:
%iPC/LNH?L]9TJX`j0/$Wo9_>iVLH(FdVn+g-eCdgCWH,!q-ANE<i9!d(C"UMC(b\fWnA8:`N_2,%t@e$pp1#d_nR_3Sb$l=foKjI
%W=1bsYu`FZH0%Y0clD!Ch\7Qf^lq[^ZJL,s-?FX\FLYR=1]5/uW0K]YC9$Q"SRb0A]&"j5=b8;.X**49RYE"$FCN]V.EFNLSYR0W
%M/\YVV:TG2e$K^PEhe6@mo*nqK2-Lo;f:-TWLC2n*UW#.S^[-])!`8$c>BLtdSM6\)ZO>SCa/.tBdRAkL"`/AG,Qk?N%>E%iVADV
%nt=U8QWre=ZSpWV5g!7dm?R_&:%V_:-MAoFIM:,-,,b9\#3RjK2gF?^C(m#aed>ZAS#L<8;G:5b\LDX95SNbg;s81lSq[aKFR*o&
%g8:Qr2`Vo$h0T+.=mMu"Kl9p$PGXM=ku>qTfV_to"EU@7a;"RMCHKY-\.EXKDQhL1:6O)n>5+hI`gl)s/sg%UL-2SRa=5E39`;oR
%C^o(EE41K`dPA-djOkIBfNTA$7<YbtPV(6uh0?AG4Bjb9XW-/LF^nZ6/uMgDR&q<'nZ9ou:DV:-NR..ZB'[ICFlV5jDOc$9FW^I>
%1u4'%H;[rF@b9FBY$(p'3^\G:$Jp,u6G$c]8L[cD+!2$ASBIH!AiiE^'[#Rm/Jr*/dPTfJ0d\f):!nh/]#W`]Vla<<n>S'jf<mq$
%D;E$EL28b82UTffjeQ+][8t'pWNC]Vooo*lTCmB&emI[mW[mIS\TR?:ctqu`C8T9S3@)(Arlh"ZT?ZNEB(K[8deU3l`?J'Z!PbJ$
%fcX]NetPS^F=R="hAi?&;+u\6n2*k5c3@+AFB=5L>c/]\^ekaCj,GV`G)@JqY=sHWd_3M*G<!b+](P\&DZ&;k([am&l6qion<QcE
%_2."bc]+bNKf=#"7Fm*JSfaB/7WgWZ17NNVS8(%._C&[./.A"tR8(?<-=2irc6ck0'/-\KQeB=#7%L0o"loBIZtMRk5akCi>u?]3
%0mL:W1ItRc!D`SM`%A[/iqAn^SVd`/lY6uKp4X6jm@rl&2^M/pN>6.['U[]YnNWC0]<+"mU`jC)DlcLEF*7?Va%!bgSthp#NmlN=
%VWVOUqo.5_::#Cheh@"1DK<>Jd/M&WNO)iZDV$I8=5\4EK@B/kVb%V%gV6Gn]V\Th`]Wb%B]"Ch?IL?C,9D,Q^:8V7XtL1XQ"G9e
%R3047cf5h7iVdA[_uI^Qc?sUL>'So^j!H?*cL([*@AMX9j#jsIiY!&S,3ktKl#h1:`U)<:heqtFO*e:hYS/?PIAs+6UoG)MV:+Rh
%`f[8rd$*Gm$EJ<Y<_^+,i24bGls*M(VRtMBDRA.u^:/=^W)9^fX^jE@mZ]6pri]l`S#YZIQ0u-f%l^JnQuWT+e@09Dose_dW/(WG
%7b4<@"`)h=s5%J#gAWUP9<-+9gICp5qU-=e,4]Yk&T7<VJQjn>\Xds@rH4Ro%,m1/[QM1Mn)D1>lq5#A.=_A`PNAlS\.&tX"Lmm-
%PaeBcc;%%2L*3t`\t'NEoo6\&k6ffIc#2:(3Nb/nk_c]7dr>/#g)AMp$1aK[oIoloAgbZtY%t^n;r=npjKltrfm^YbUsJB1q<Xp4
%m%iG'"Sn&B+(ltBVmCH7SKOQ)IW9O_I+BrG]TPs8^N`sYOO*dC>BPJoTC)&>hoSWVfW1PgT/L;aa6C,pHsE]d2mPgkGKZ8#\ad7:
%:G^kenLcC0.f#Pf_`Ho)IF_#qk&XMieV`2:cU"[58TTnA&UmWh[G(NVHG=LW>*X([#K%S3)l[.?0LARZiCksGBFUCl;#UAeV%jG%
%.A[LYh4m7<8kk2_ihlNfQg-Kb/U=Z2aecN!i't*4=".c\hh9`%9Dga6-\Yg.WI,TG;Jg!\8SPgDZ$R:'"hMOP"?TPjI8O:>mUkI%
%Gt6J9enSC7bKoUtQs_5O^:B6FgiRZXm[.*M0i"269."i]"XciZn0J`Ln8"o8dbhX,FoS9*gjhg+>Y78XE(G*J)M=NmM;W.(9RW*i
%eOaa3o#A2gFuISOQC1*'lWD2-M`r-4]#Au>K(C)5`c/\?P_S!50g"W1;U"MaL#8_tYqn^B\2>]F>*Zc?fo4^`6C&':<p$h,ZcuW-
%RrgBkDgu9*51.UuCl!`,ljp\h<pr#m$Ofs9k-*pt9YHX5lXiAaI+[aS9RLf]-L47LVERJS_m[5>)NEDUkF\'lfbVcsfj]5$'&9M-
%PM!2qFsrr7n\hI]p`rN?B5m.>rg:CmP/9c!E9D.NbYQea7Z#l=+eb05`dP:2H+%L6C9#du`CoULRdE=<2#,G:S`e`THG[\_Lb1Rb
%.fVQ5'Un+VbMAELnrT')R&JSrl`F,&$?g3U>.J!2ZfXcq:9IM$;`G]_1i>d0P0JJ,"Z>C6A^DDRb%X?>7c:96Z&cNaAsu2?"e1`'
%C"s'<Pg'(`e)58Pbj^hEdSJ9W<E$:6eOd1Ucn%&sBhir<X4;O2IW!JC0Vj:q8ukFp<@auWfsXdr<4:OqAl_ILP`EfW9S8R6ok(3n
%mJ8/=DYcZ$<!0dI+/RiBooj1E2L9E[).lgFQPU>oFm@n;g%ZrUe#/o:`=3gdBX[*aPM7]#&@hWqD>`EsLFE^:>\.g9-4W:RB:ELU
%mXJF';@GU)H_!f<Jm"Y6e[b;;**/o_icQiWpi<(sX1EN3m=PA4.X'Q!>>@Iu[p6$Gd]<JjJ<SEX>/+GhD@?W5M=/Z&G<;_i7f+IM
%$JMTC)gfaEbZ_a8f(,Z1FOp$->/&bDo%BTlGBmWmX'SNn^5rUZWNr-kRF>?NB89I%8ZB&[UerMa/KL%fUa)-;Bf6&fE!$[G&&9jf
%*PR([Ujdm@rJ!!gjO4e56g,Pffq.o@E#*?7`B!2>YIlUQjC_Dte%KdH9:eei%C]'.d:(`^S'q&<hnI!.2u&Obo@;a[P`H4HqS1Il
%]Z\2ebUH>]am@.;Ett3.ffcM*F"(e6WD?^DT!L>XKs[oqF`Q3Vc*im0N@>r0_sfmU)ZNO*`d]B(A*gYiZWF4-fBq/=pFNYAOm.'Z
%:3TRIBk*a(IA+Sr>=P-rb"6]B]up.tk8\-<EaD)X:$>Aj5i4PJOn7#HnKn`tY;4RR40Ks!2F_:3EF,CSZi*.!h<Am\Ri#`R6qqHp
%1#&]_`EP2tS0=J@eX14(Qu1B`D-Jl0mt0BXiS!ld.X6#h"k1K82,6d$*)^BY[@8jN]3T&.gtQsp_tI$-1\H)kdO6j34&ADkB\\=M
%G@r]MZPeal4en/!f^3KE@lC+P]4saC?q)B#%^R%4fo3pe7Uu"Ak@nF<2PW!rdC:V])V/bod7C+XNLA2("a<i!R[Y]FETJM'6=KJX
%I94a6"9H9>.La@G:Z#uc@p8i7raf0,dharFX@pg4&tdPB'\;V>W>kZ-</SNWNI+J/X4Q_XY28Yl("/4"ob1<2o7Q;R85-=tb[+>;
%NV@&F^"IXKR`Bb(>is^aml$.!DW,*N<]7q:h:[<sq?D<rBU]J+Acod#J8[@(Rgo/lh#fk<2@]G!flcnq@E3C<8oDS7cf[73j#@SL
%ofTL+)1S9LaSqNbno!(YANQAjj8Fs_BdX?7dp<?aqmE)2-0D(agTL>BdBkc@Zc6e7)Qu!8kZQq'S]&_jYA%KWl5Qq%gG!)=]FFU]
%Ug`8[<U^t*oZAaj7S?b5VnU!Y%7de-1bRg)6$)l<1fNb8\8_nFBkl-llZd=BEoub&WGfZdP8$(Md_6&Gg#o#+Fe$p1/U<d_F^m&8
%aJE"%b+Fu(X]f5Leu2TsbuG0BR?W/I.Fns3Y2=2_$26?3HEYdG=),u`X1qs.grM+G=bc!8/@F;mO\V@JBA35Y.jP);%/jiY5@1KD
%q_='t.K`G)\J.t&;suQ=;<"Hue9QFmG5J"'@_1='<!@'kRtRQkY_t`*&i[g_9Cmu0s59o_Brc*kh-03\.HX?cl]"BF*BT8&EEmDZ
%<W7,Ik@k^cI^trReFJ]b;CP$Lm'kHRH0r`<ct^$fPd#2)12%.M=:_:od(iT8U)\C3bquh_"e1_t.@NClPK`q^;rD\nbjZ:H7k'm\
%C78?JH)O<6dB0\DCC6N1eU#"0B.AX8d"r4);NPs!4%\Q,M/\YVV,;0]aslc6XHXZhm<4r!cUcE>N\&>TH8AR]]Pq-hgkH2>Do()'
%E[u=-gkP].dkGdjVCuOC;5S&V2H=%Tq?H8/lpR7IVKOc)U=^olrGUItPVdOJVKG$\HnWY0BWH'h?Bc/<jUKn$P,di<rk0^o9%Ao(
%adDHaRI*G2OtPoum6sUsoh9`4H-$8TgUS,sEZ=_HUf$-KH.4d$01r6r2=4+)jYlHo8Ya4`n_g9T0?R!kV7DG0C/S'A/$p4YjRQnI
%S<[h.hMd;\GCR]Y+lZ\%R%skol;g8q@@QTS$bG#&D;fV#^iU6:Ztk&>E*<b[hO&Y?C>JKNU+ooH1XVN^C=gbT)S4gAkYf(U4_s8!
%<^W4*dTJprCZtap6T:@dZE;$(<`M#%%.b&lI,/]-67RCSBQ6o-laSg=Iei"gY<2)T`4t[t#4V?s]2f^%WbVF0Q<EYdHDd1uEiXQh
%:$PK_$8Pr]0uLcgbDf!iKNDatoUt#X/A^4rb3=`.991i2+V6&1MK96,SKf4kE1VaX%Hm7%04S3%qh+o/HsV=#ilCt$Y1qk&s(^&0
%:`E`Kg4-N_Dce=J5=9E=%iYDM:i^N95H?O9ok(+!;h;$o%fRd+*q6oTAOQ7MYAA#:?Kbt%C`%kWj22CY*CjuQ5K'63KHf9.*6,5E
%DnkeNQgiH7_#=C.A@=:d^KR&j+7O7\.g'<["^-#lTG&)Ch*i\kp_)<>Qd?6u?c'U4+$BH)rkQh\I./]^fnVf]D]&Cn775+QHlM_d
%?-`i8#<rQ#5=3n1.h(nPgC5/FD.#H6+2mLNhi#OR4_#4!!o`eB_Qd<_eGB+^=)Rcr$FHLL*Le"tF1?3Q0P5"iJ#-R:*t4&GIeYRo
%,]0>Arj,fHAb>dOTd><nOWb?QbL"#E"]*q\H0Tr/*_$Y2q5;"7r:pVJ?9O"".R*4%CO7S4?EG!/lFjo/oDV#n*\I[[eUQ4H5Yo0Z
%mf.#C[2YL_s.__F!^/1ATkC'));qfFU"flGcQ+W0!36t9C3U]u&9h['kOX%D#d!mrs&Cgab2k`-@.*MN05Boor^!T/ph..l>Ii7M
%K#%0?;WgkJdkcKenYS@IZ`EIH?a#$b@+,!W5L$/e-4p^$0GVa-3i35B)XY[MmF#tsP=,TqB;,*K6X8h%cQ/nC\m@QmYm2/c8Ajl6
%ai?lE1?eDcc"h,2VF&J,21<YtVUlHu?E'`-CCsk?Q-hJ.4qnp(oHj0[;/c.]5N24KQKNEkjkfN7e).i76T+*clBU,QN4X(k%3cl\
%mFB@=$e.rE4r4l#^X+hIl<.7+`e0VXQgVgF-4+t(CC1c/i@'ZC/lV5ec#d3D.8aj-Zi+\[g>8ZP>rql)V"cenH9pSthJQ\rcV_:b
%%TTKOgu%AI;d<\FKGfe,2*M1Z/GTnbHhD/8S-nKGVF$;TX^A5_[l"@uinkO6?<'[eUagF21kR>^<S&1t=r#6?4-I,BGYTM0b\b=e
%EjpPJ/pF@a$?#U_312!3efj#Kh/]RJ.<k<`C$)3qY@`+Rs42:X]Ja3>::X<h_H1p"O5/0^3?$1B":0D4p!8uKL0SN:aHm,!WhJaT
%)XF&_VL!=f6W.pk^l;S6=O)`abH4"P]mX`f>MIQ61V;IHYL`ZYQ8toBh9Tn:li$BO]i"7u)Ce<0\=.%4LNq1f'Z'YE=pq9:l1?cB
%\j@,D'R[OD43d,WHi7-Wra3ZIB!9d$2[4pt,Jqa!h\l&>MdgJ^$k$,d[n[.hP?MS-h&1<F9:5&L>g!ao<'0cS#iu?ubUcDIX*WSs
%\QV^na_&)-QGgq*H7s"(?DlW2[48YNaUS)`V<*N-%Vj+cQ`5W2jaIXG8<(kT>o`^BeZPFM_1j>n[Sl"L8o-E>8*.`sXYXY_7Spn#
%og-2WCUNtX&%s1`H.^_+4.Z=Rj$gKh*0o6CEWZ\ANs-BV7B+YL6`mt#0Z)9,#<4i`XJLZ6P&n+`m<*.Y]Xhbi)O!N8o#BR8h2GVN
%(u$kl/2_L13E@H@h!3KI^id1H,+q@+!Z-+W:Sub4[a/]&6hd9\au8"7Z?DPZ24ip<MM"Ac(ArBL"#'^^'BL'HPc1W"n'.Ma<BO3[
%rE3oL3Fkj)%elZantR)il=g%GR1hp_VsR*DfcP;scm86=mn`7GA9\$SFZVRJ5F`Zm]#uS?ih,Q;?3UaMR@U`,8tX,fa;1j/o=3#O
%Pt&Fh/LXACr!a,,$(+Bs>X?J(]3DC;8!N;_dd))6r%8rD&kJT-Xn,S%<0\:4=VJ?A?+-ROmA$b!kb1@++U2=W-,VL/bDh78,BZ"2
%oaWU/PE`1j;XQmIkk8b.[VDC/LeE?mcK^rF@.ilLS>"nAGP?rkP''g8<;EhJ[+.3TB1Sl6bg>NaF&_Teb?0;?l%s*Kc:RUYH\>tF
%I=.RH::TZ=cOJb_GL(S&iC@%k9Rb?h6)A0N:!u'%q29%K?E>:@`=;<n?r'!/*5Dg*im.k9c!"oqH5-BmfbuX^l)R;\eE]'!<PEq'
%aAkZ:FLi;oKHmY["^sLC-8[?7<dH2UeOrj&1XnJH.,pq/'&bI;!s4=,AR?&H=k=P51k_^3+H^;Lj)[R+o*M0b)MG+LToN_(cj?NV
%fl)(4aiQnoM$OnjbJP9qG94mM(;#[s&bLJME]*iS7?RQ7e!I-l49,bJA^lHa*?J$p1A&8$MCZir)W=X6764#Uq4TE"5#873/t':%
%\R`4DEl<R7EQod]*ihBij*Dq10H(hu8;s]):U8d9NSLA$_PL<$<jV2]8bVd#D&_;Idr60o#-"t6d'<5j)88WH%&u@2kVXiqf5STh
%_3ogrn:SlM[H1:&\K6C8Us9:dmak9-O(p0DmO3dVB6Snr3[f"6D#^#u-USo<*ipW=G)([(rofG2:=Y/Hhohb#e,oC3U1Ud!Kqb1F
%k`.PHL-7,@(K%di`J0A$=o"d1"ei_dIC9o>EM+ZM5`MKl.U]<#;HDD=T$nYN^f<Yg6E5<koHX9J)W\EYch7Q5]o1CX0\&XjHed24
%lmS!@3)\F-3$GZ^:D$k+.4G=*g/T$i:&!("cj6d#8J0U>A@/,Nk"h#[h$],c#/oI$<9lr11--tteTL@T0?q.&e[`I/P_$-#J$.M`
%Uu44pG(8]IU_k!gqL6-8\C`t)68B(.oLJ)%g;CU4QNaCsE1C7JLdflC6eg6AG>uJ-Btt+',7)o)2tTecW-ZD:pe'kh9$%0X)AUp*
%>hWWaGsRbK$c!>G64RDef?9IaXnIHX27%>qg[:[`#CVj"!.":VOSgaOOfK*SZ3OdJb5l\QU1T4;:hfp?BNPKPZocgS"X/,nK3%(8
%4Wls/@gp[/$t[u$W(aLubVD39gY5uZCi/583t?j2a-^NX;Rq3Ic!V_pg6ZksN'qWDkLcY=NIE_]g!==Rg*=meBG%/3rI!JS%tqN)
%\-9HLikIbt39.t)]SnklOY1=TeuPFM/o*VTg-@1>3Gj!?X!]Ae#4&XCFcr1R1Q[f/l.c90"nM=+nS\<o>%>%m4g%cn7ncZDgJ0*)
%Q.a)3/Ju.UWesC7OZo0NX+V.1\Lrr^-J!rbY)U*\bf9)MeMH75dc>T5H#dXWVULQmO$"QVOe9*uebYq1ntRL,`k5iEJ4uu;2E@:&
%c'bEOVFs.U[[ua,e6?`5%h"(b1A%QKQmA;1?[Bb*("^d&<Aa@'2eHbW=-[E`<`^>gKMAH<9V*a@T?!AE]U7C-1M/O>9B414BL<`,
%mj+f1m3*K&aDs90B]If<_M5@]NCIrO50&--"e1H)np^D\g@h2eYCgN!`8%:(/XbUI9+@0L79f-JAejJe6;JR@g+=#dQYLa@>[Oha
%^MG!'G5*Fg!5dB/W.AY:Z9Yn+?C)=n\c)HW<ob'3(#6fZ?bPVa%mE3\IK/ru9)6BA9D?9Jiqci&Z['-0d^o%UG\:Ia@D6'np?i0(
%?Yfl>QIju2525e&0:0C8gg9:V.Ud>7foG32cb!gm]u#iIab"YbD<5!qn_37pVmk6(jX`\UCFc5C>oDp=J,SHIS'p#j=52'QT0B:i
%ZIt!\6[=rs+!JP+:n1`"5Ag*%5JF:IT,&5`c$$&kD"LMq4:CQdM?WJJqt2%jL[QCU_Qie)BOklP_tZ3=pZD(6gd+.$meg=(\E0o0
%X(TDTCWjD-o1<A!DGZk\X<'_eb[/9WLHC.*n^mNoH=O)I@JP0H[%BPl5M:c[^-=#Fm*a4fe`RJ#o7TBm?N/^$[l40Vi+HK!\ohY6
%1&>lS\%d0k`J+(`XpuSDprE;rb!s@"1S6o)%Tc\PF7+Z.l`V,=5?Z/oHs=hH#*5CiH[5(%V,Ab7iD9+o)ondRT!`DeQ,@M<rqGON
%\!PY<`n^0@Mqoaf#.`1]K:f*XUU?ARV_2KnXM"GAQ>9JA2P3+f?<IW)?_5idE2e'Jk.6g0qoRNsXcfb"?M<6,jhce\n@`U;Qg=ID
%16?<j5Fl.dW3&"qh'Ub4@qfg4^U8CVrPh1jj,'DFf&tuJZS:;9p13i%p%,J1FRL_QpK;8A<-f<B^5'(C%c.G/>%jpKlXu9178Z>-
%<D/YVp"jk#WP&)#Gj!2H/nPdTLMn^Y('LqJNp^e1m$B*GMQ>a7eb:#dGkh3R`cn#Co?l6C')]Rlo'G&LJl?oCnl-n,ror]?ouHB:
%N(kTQUpm\ubA8<NqF`-O="T"es)\c=eNAT^GLd.WbhRnUn$s6^$@Yrp#DF6q$HGfCIVtCn&+?\,7rR:d^*jsbb8m*RqRPGZQ0m@X
%j'iVAKjR($K1ONg)]udY+"/Z0_J>CeDeD,=W0-J]OJI;@(QS5KWm%9#DY_\DBD5H`F-\LkaCaJZIe%C4qs^o$f'T'Cop3)E5A)N9
%I_?[#K9$h?XLI5.8Sacp;q"B<EH3c_aCaPUe%pF:d'2-(Qi8c<[;"0:6I17Yp=dYTs).8_AUcCMbljNSoTK.`h)gE5@%6jG>L+Ti
%2;!h&`VBb08,:VAn'f:=[JIC0lZO)Gg@!E),mh&:1.Q%7GPKTuASuY\HP*=FX))517p$P/!,"1Cs4Mdbg\J:l?-FD*N%FkV;72dp
%2F"L5F9E,Dl]'ieH_#E.00T9@ro2kmdtA9o%EME$.;YU#eKD%SX4Z(7f(&>.p9;3OE#&.^Ttf9kHPFLr<kR#jS#gH!g;j#8Y9'pF
%F7Jk)oB>&^$a&#QD>?I2lL`pX/7dL2T"b-p;W`;r"kkdL^<VubDtX^Bc.r<mQ\D:4e+k1`i:u8h+Et'G5$<5VYZ3;n6uP7S2QKWT
%NA&EuSW/?sCT$qM=T/<=&)rSkg!9mY#?F\?A_p*Fq#%?!D<96%\\1Jq0b*lSquW>(LL.K7qDaskol7_MfoQtT"uojL#TrEo90Wr'
%UC2AFTQ$EJps&"8p56i,7s@^r,1$>!C/D>9UVp5:">IWZdIWI`O.fe6Ci:jE<1\[bhn4^oro*j?B28VrIEh.4XL7WlqO8raG6`a?
%'OJJ!Yuk8en/np=9Uh6d/KXn!HYmZ6n^>Q(?_;I0?$R$0=S:8%*A)uW00\g_?Z2W;5CMZX\8sli5<ZJj8&aYb^USXK4M(Qf^qR+h
%K%A'+*b9nBT)A_QXJ1_h++5ZCo@.f]nR`?cr\"+`a8"6n@#N!3^Z=b@?Z.'PDg?[c?ck[A\*Nb)HlfV#``1gW+<-DZqZ,RiQDFA6
%B>Xl5@dTMR^#:%Kk',B1h.J9+9^N]j%?oLY3N0-^/-od=!M3f-r`n0ng>jR\gDjTZql%RTQAot\q-akgrkS-G%!*81%<L1L<`4ZW
%@mR?6_/Ck^AfLd5ftrcTgbY@"iAF[>ElbKoFoId$L<b@la^V2^X,p%JnT-+s$c?:HT5".(%epiu];pS*,*:1?>ih(3')Thp&dlXA
%e>fhX!.4@\/:ID_%K=4E;PfI$,UMVFY,Q5^F=&;,K8#LXnEG"Z5[Na`fq?!i/?$k;LsCpEen.<AkMkf*qFjsBW=:@:UcKYDS/,+8
%Y>e#6"jpot7A+<4q)Qo,'j7\OJpgO'KM97mAdiP[=eN;WYs>9dGeOL0dshlc>ZHJd9f5#Y71nH%N%.i-Z9:!I193rf5k\at@:9jn
%Qe@I'Quc20A)Efo:RqR97VAJhO=CjgQoNH1oEs<,k7r#D/:!`)NI7DB3A84K"C5>d2pAR!gB28GAG*U62&;;kIEZ"Kh*eAS^WKU8
%dAnsGQT^)[jbM%UA^&/SF046Sn]<;#JR<O44^.:3h5_<e@\7M_D&u$#nE0o55RlSoXVMHE#ERJ;XPGs62Vrk,+hQIIqqC/JJHt^N
%OomcaPRV-4Ns/:q'/Gl\@i/Rd=q;[+Mu)Z/W6l\t_o)m`5*_!cp[%lP2Jt6LHGTkC;>[1)DCdC[H\GPIIsNr@otssNYI4Bg\)6(X
%DEK@"c'r&ZOA0^HT'OHpd,$!1@,s=aI6RFogW?Yf.OVH7fEOgikU`16&r.l?WP%%s,D%R%pBiRcO2$`J,Nli:\s7X8rllf6gY99F
%c/)3t.pUS%YR[8DQ`M+iA4MW$d'HRjI+j\mVA=o)^Xc^+No0L&Qg22TTp0Hmbk&)jleMH/(q_R.ar%mi)SF1Db*D#Y!ZuGE`PR]1
%L\^e-?tn`43HkOrpgY7Zo'AG=cZ$)A7KF=5,:@m,rPmIJeGdQL#dR#`'`+A?&E>+n:e6V!K#_UIj&t>On^2EL_]/@'GOQu(*p-7j
%I*=7oT06HqI"@i-:oI*"%%bb;!b@48r,,VSpB@;lEcpj0Udp7XHr3.c,^]k#faNpn*^&I/?<;j:(QEWbZsjMF#c7&om8Y3,W]hk\
%5C=4_2Eur:lXu8:*,O)o9lE+]m[H;!^5Nt1a]uTq.3-*N_HLg?%B:A[.^IGZp4b;?_7m$83+F\IH4F#]Yk[VOj*Sb)f&4.r(H3R>
%"BH?,07Akt9'PI6S)#sKk%""jR$SY;SBJTk^&P6;GZ9qMFI@&3YcpBb%?>V6d]9.'*nr'?9:Sdjp[Y4hmOUSJ[X!*GbLb>sE0u']
%I^]1X`Z_t7](.K6,gj*o1["!Cp-BI-22,Hj=.9X,]:.>bo2"Pqe6F;80oS`eIUUg5#'[@kSihL(r[DnJ#hN*`ICoq4hU=Q`?J'Ve
%p,B$:J=EHBBC5)W=S)$(Ic/_[i#VD"cVJli`cV+_g/l?"3o%a16#Yef@iqhT]R?.nF*s#*\@ZcDf_ppoG[(0'*Pq$\El0AU=`Zm'
%(Q5;q:/8OANFMe[]QVt/iD_\38`>1_>toKbYBWVrG(SM%_N@pSf@?6G2Buum&I*%AalhZYh8W'li.#d=4T"pHnSjX-9MXMNVjO)!
%l'=k7?8!=j8s?t/'XE)9`O4gZ5L*6#FV*=[[dmmJ'8k^Wk@_D5=Sf8--;F=JDnT:7XaU),<p^1o2[`DMF8Gm8O.F%lhV<D=)nsC/
%Dgc9VIKEaBoerC(%Z\[/UFpssRY(G2IRZ<Q^&7kBIHC7CdE1,5LZ0:FNHY\VdNLe`?23^%a5@+oS93m;S2J&YnbX'ZnC("'f%DK,
%#:$`[@eBq6VsrtZqlU\XI+Kbe5j.n>rl1Y^qH>jB-ld.V['p9#IkCD?UU&X!PjkEcjQakB)76R:h6=B\qH`N^["ai#B%Q)PM8)*d
%em44>\_XrqYKQTWd4l44r\8P@Gj"^@#msDk1&*;,hA-W':7%-S3mW75J``.XBXFDX.lI87.3%?BUWuH^Idq;A@)-l+E<#*1EP<GX
%8pmk(8m@<N5kVT7na"0e7ajD1gq5iJ'KfUVq7*l]M="a56r4XON8Co`?Q<Ue>!;_M#f>oPVo=6&IsP5@f7L?a6(r+u2kkY]jXg>2
%Y:]4UBo!BI)OmG+`"lRK<^(ncb#?s<m2`;,9GA&0c+RGtrcGc][To=Q#LA#5S,(\3GL)Q;.#PuY^%/_<<S?,4pYJ"1+ni\,])t3Q
%oqj_Knp)[5nYOkShQ`O;I[YuMp*s0iF[((T34\e6$^Ws.4SVM@a$ZgHf@j?r5-I/]5Bhp;I!+I_ku5W-CuKt7#7p7k(D#st^l^H%
%q;f`=[ibPURn+PXr+:H=B`7K!o(EakF7.uE_&];`4Ps'$QGac4-lXJhGURFc<PP&&:gVp-k&XnGI9bP':b4.;phJBDb8[)82@ab9
%]QY!8hq+?jk.3E"#]nN>'Qsps*(rFuCb6VT\*^.&_l2a2CTGcBn(/L1lbSB6C?oLCq_-R7O*BKqGl#C+3(d8GNM3NEs,;WnZX;9&
%B3VQJCpMHc'eia*A,l<:kA07R)S>`Oq!]``#qXiYS_)Mr4o2\Ccb90g=,E'3^3X':<1EE0+ko+9qE&=;\i&VEEr5a5:TCL"MW&F@
%PLo1DXA+U[2@;s8lZ7(1HZulbCUEN8=kuKV@I'-#YObCo$Emd</o_-AH*b7fgouk&Mp&ZE]9:V:o?\'h/-Sh-\S(6E>fUKX;<>gQ
%:i"S5I09cN\q^`1[d\%tDE^pW<YktP+,ao8rt(!)*>S$*?Edk.q\E\[%b)Wq4&j5_OnNVDf]Vf&,<c):&&N7*6#LOW7"`$JSDS)D
%imTQamhH5Bg\\t#NX+sqqqB/\]Dfq$Pu>+]]Kg8aM_.Zc_YniW*;k)e[^qiS1a3kInmE-o]Y?^n%<o=Zh)if*oBU<Rk'KU*YsGXS
%<Eu\neQ_geG^rE!q!jkjp.O_sUZ2HB`_]%mn7<=>eus,]e"+NqBVc'C=_e[Np4CG)P^^$!n<kkA+C@m;]YF7G#9IrU?R$sXB*/d\
%?RgMY,-Z6_\L:qW2-ATcA9UdM8`>(5/@:=r+"[WR)L6BXdTC:h-.J2`>^7]_'n_ikbsA$X?1H]!Xt8?K1"7<5a#hi3ir#k%R*s4$
%l^KR%n3_gg[n!!!5,NFR]-lph]?q/K5cq``LoREN)j\`qGI8En]\1u_m18&7_]FWk/Sm<14m9i8RlDgtS2GoXp[,NdI'6pjH$(dT
%>qOkOc+.pQU:@m9ff3`]=A4BHogT0LGjt^u7eur4h=]oo#:'(]jcDTSr;l,bPALV_Uic"ACkgHY%d*Nt\:!iA-[=]VY=VC`U\jOJ
%n\Lks>PA?f0Go?A3>oE7+O0]fRa^UmA,XH/h6k+#oaTbs=Elhj?c3]9/\W!dCQt=4A(p-2fX`<6*pM:B7QIrp_sQ<]@d.+<]m5!-
%_%o(=C"fq6IQ?Ur>G!iU8(A#e>:Km$YJ2(eMVl0/9e:"]g+)TKQDURfFWCps@5XVqA'R.4%,JmXq82ZScFonNWrKGNfZ5\-D!Kmn
%:4SJ`j)FhKPC6]oHBR@/IFN;R8ask_n);0-CqkIR"-6]og$@\D#k7Mqarf2\O$;>N]R'DHB;)d1mB/b/G7XQ:isrFA?^?<*UR_X(
%j)PCiHOL"\(GCZ$rND-u[>2-lF,a&/BQDJ($bc5eib8N5/o5ESM@R@:*$++s(Jal5Fkr5F(+eEbW2>K^>(W%L`X#dOc(BGkrE7A3
%Y'$&>H\8aePo'Wgm<Gg2ad:<\O6]H(E7NdCD1"D$g;"mTV_hPTIAm&?7I72"\S*^E(FMs9GpE#6f_lL*I"/D#/.?Q8[Ik!=+V,@s
%`E$jqHIRR;lXq`KMo'*]dUR?h-d^`;%h>UcH]!sRS%J"cUZ0]kFh)HXRSNDGi1;X/0]1X??G#hmGkUaVR4]Fpc3>l6rc#9PZ1)o7
%%RbN0H=`Gr$Td?%FbokgA`;i?D%EZ&ZPT)Q%m/ZOK;klu3MmTs7T_;g-5W:@MnW<+(NeQIGRcpbF(hdbrEQ8\rAX=r/6/aegYM--
%<8"_g`Ar8d7b;SP(()_`**^=344nlamsZ>@==6t9.tu10,sE_@piOq6*4N[H@1u?[-b`$m^E2?uo"jH2g\I.^p$#=a'ER"Mn8P-X
%\GIl3H/Tg_m_[/4io.bdAKsR-d(r1uW#qq:I*\FT(*DP!50IPK)P(7lfDaH-_G)RCKs101pBY-+.9M%%I^cHP2[8#T^bO[u52;YY
%^;0_;NLO;Yp&9EKnFF[aT4ZpChqt@P/Q?^ho3>\J]+:#%6hKA=N=#0ZiS)G``Bio7+!/;?ZjNStV+'1_O_a,p74fWXaIUYZXK?ku
%],nDh%d_'aPHR`!^Tk3m;hK7'[gEkT^'Y2d0'Ypr_.K[AG@"kL4G[u17hE>7T*,CW+$Vb)G8Aes:0Z9>rV5H%(Z^!q#N=;%I/V@R
%LDs#1=+1pdqhm&Wjnj8mO)5^e2"/:hi9eo=::JO%mf,H!>F*OiIg(!G%,_$X%urEs>A&q%5?hh4>5cCZkcNE=#-ZRR4/1sk.>baR
%ST7Ao@(K#E[TOWs*fEaUlMPY;cZf5%j()c&d29)$2!o18T,RZ8SR=nhlkYJ6r/R6BKnmrbf\Q*iD9FoV1OM7#8GD&ZZTL!VZ/"Z[
%Y8t<WfD\ASHEVLtNT[<>$aE3^;pFoDip:3XQ/VA.OTV3q_=c%t"$E6Scf_Td]LhNR7tb?n=e%^8_:\MDf%<JdMF'&8dq8E2Rcr*3
%`u"7.J4IU5@@.XY=h7;+o>.jb:KK#5=U8SG,)";5H6d=IN`gTJ8P#@]AfiXlD]p?#2@D#jM6T*p/g8-=KlQ1!%UWC:(rMPg8VQ^d
%GlgAT\[J<`R((kLX<)8!1cmf_K4%9L4NG^@\>5(.Jmb2dK8#9@%F%P*&5_K6[,>t9Ls\Af*"C$nA,<]ee5Sa<DT4e,Y0p;q8?,We
%(6JYbCpaU-/g_W:@C.b;A4q[W#-p?:$)Qa?ElpqeW74aT<&"hPf03).("&D'k9Olc8ndpgjq9`pCa`[V?0Tp%,At[CeZ@iNl.K>9
%_IK$(/$scY*>_V<rI,VFddBPj1rt=\](P49g;9":rcsM4*]&S]?K5K4*%jUhdnq8AZJ'TUgl/[\UYT5-7o1io(r$LfY<m!sGPToJ
%m/(t\NOh063;RI$b\auJC0+0Bm:NKIri="VrZ+$H2"JlceZS*r^LJ"V"A)gL[uE[nc'LNicEXrA&`V^hQff^'fe*4b!#+]<2eJ$V
%Ic3Fap4W_**usrgrF3Chho"Ji.5XGtZuKI'>F1SV95](pFiKs&:6<W.WU4/aZ-nplg-s/C.PF2dF3aSgiT@S2QQ@!l?;OHgSjukI
%OPS#U"PKL=qQ&F89@GLB#4q]F!-(`a`=Xc<iTm4q/Lp?mWrf[1Z8?=g`U3I]D8JNCOEP(RkF=G<'JE[83DAk>IGrugaT`khl*cYq
%rDNGm9soCUWffoO+[tp1M9SY<-%VJik8&h0jQ,'t.QacD<<\QNa)uMmqeGb"p\s00A#_UqlRjj.(L2uDC&9ZSTPHa@XG0jBIQN#N
%Oq&!#F'G]0(K4X:WnEY=kb9'\qcCH=8\u*goePbC1ZK3*6d<U#aqSiZ/hY:nr!&*e.0nUa-A%J7Mt@)6'O1ZNs!opW,hD;)mMn<d
%AmTMs7a_`o?Sel^8_]M8D?_-iX'iJF4#e6;O':Xkj.cEBUdf9L2-(%pkZ&E8:.F`AE^4Nse[%^VJCgF+RV!F$c9(T1D6D:=Y@/.9
%TZci+&U@_7nVYd8^&s(q:k+S9Uf]Rl?RrJ%j(A(1(h[Y4b-8pq1-VG/UHe`6cU'k=PZho&$7$R5s8LcT6=r5&_t&X>lOX-4<>RTg
%OGEUA(jf3K_d@okB7Mbu3q<<\C_R([m'8"`U+"#o_E?/Pp^^C>=SQ3i%F%.sc\+<-'KPq"Rd7n`m>)S9D"0(6V,+Mp?8hN5.)YIE
%\*Vbj1`=@iAtU/i5mEDnYW\#V2E:;YGTM7[8H+\MGTaX<3Wpug0Q8Q]f0bP1OJHe;9FRM]!%g,K`dT=6e"CV@0#e>e+H7O>A3#Ia
%JKGL-;Y/qMjTHV*9+5oZcQODRSf\(\I1503</esJ]0U2Pk7ru%(C7AGQp1J]^7MAj);T'I=,Mj_&U7I56+Pc1cA#.6RgemOb==SZ
%X;?L0"#gUYRYuucNFNMDJ1j2&&-Ol"ZZb\3&FBa,=]RpU0?f.O,L6F_>g#CJ(4j_$OdI*`5^('petA?=IG`=p;)X<j,9Uk^[R(L>
%;AMnR5u=p"9"PlOOH\[WW0RJeT\-PeP!1!#8u0G)N3M#<3O*fLbsm`^pfQRH(h-u<Kd%4U=?ULOEnqR:P,o1J,-]bDIZ`[eXBpM'
%K)dAO'A<pJ7OskAnQ^[>"eohk,)lp4S&@V:U'=HNi#>e6&J7COfT+@N:a3R)@:]T,5\r6"!;(gN;/e)D`Id-j6-,20EZKnEZ8gL1
%8.FpB+'C:r'Tf;\F[bR]'LnK6Mdn;-NEJN$#u$KjodirU>ZO*&V8d)c/V5'AHj*s[N,2jsmm5FIMI[uK*SE.\%3dhc&*@LfCm8%"
%+Z99R8bm@l,2LmaUEG@qZ15^cF;ui&ToWIikSui0J47WkX>",.]+#$0D[Es_%G1![I$2s%*T3+6.R[3=0buF"7Sp4\9HrOX+\+lo
%%1jJ9QQ6YdO&:\Z&kBVP>=^!MD9'AQLPCI9,"7>t.Bu7.U.1i,#8rteQ*i.kq,A75-"I^'M(:/7<3`hK<#u`__W43jENH9um=nce
%\!Uu.VaD#kBqQ&]E1i<[#5C;o^nJi0@Knh.0@U&4&eC\["?ocff.j!e],pH2;e;[G.8?DSPpg_a54?Nd'Ufmu6S\\`[XEqR-m;MY
%M3^+N<7K='GuQ+)@aa=-g2XbfH2%MX/1fh7;"pDM1k\m?`.K-5@:pMd&HY]I6lKLn-:+LnoTH?td's[t+.dDH:E_&USk#'E"&>L2
%a93f(j&<6iL?&AsB=fc2:dV%4&hS*fCStVT'?E9A,_X:#[,?0H![#X+r/fN0b6r1,OF]H!"D%o_.rYXPfeu/L1r%fq!^_a!d1Ss%
%_"&,c_#s:f9IRiT&Lg<d>,"9[.*s)k*&AiJ!.m2+!Xcl1:OjaoYg?.a<@3gLCRYSYng!N\ApsgF$Wq<d##LU/f4GYT?*)raft=LX
%6"4f9Cu:"[Sb:/=@M03F-&t=bG7r<>0t*'8.)_nn.1-b_"ce3c;q.c7Gts*)!g"@P012OtO=?qm93c8+U5lAbTeiARP9rNBNaq28
%m2u@b1\6Y_+5[$hGAE4"_/[SKru#hV1rc4hdmRW;jY<pBeDa"3?W[\TU]ge)/:@u$*?6K2\2pZf[&a@X!ZQ4GkQ"cDDXpJKf8gg1
%JB*NYUb.=S0Y2l@bRqROK7h5X8)q\\A\EVIC^432-O_s<(,,e$Yi:Eh0"s"T$2248$,B(?[4LakUP`L$":B/(#`^\q"@eFr'+3.E
%_]d811QI`JBU3).+,DWm1h=fN+fLCW;T9$IF7@+mQbB<Z"A[NZNL5=E!#@Og:1P"P%=k2cf*VfkNjm'LkWB+K]9IsFlNsd`5^[Ot
%`s2ilnlQ+U(m<?g-j\8M1+T_bW)QNcg&NUd&XLS#[,:Nb3e)?K#eDT!06E&6=<E)(&"e"HeAM:A@o\5D1dU`SF[GN>7rC^;f"FF\
%jKelc6q,ShGXh$"rO=h]=TjheDac!5,:"88.D^>W5JfYfN##VM[VkSEm,?cG<`WB7"qD[_:sit//c2X2NH%p20b;0WZ*<[VHkbpm
%3;ST=_%=LuBP&5PC`b/i)c#-oXNHE;3<UpR1pm)V'ul!#&Fp\h,)^t;:?9#TPl)s*`nQ.+E'Ld`7%(kW^X'q>d$?_DBYkuK4(4m;
%%_b't(GS4o-m2n,\-,rU)eUbR[&UVGP['hV*ao92nCojG5$m:r9$FMej"3"#5=G7^hf8fRpB"&"lNNu(=KX1q<f"'s\tO2<X0CUr
%m9t^WLV2"SdB8LCJ;o;E2Tqk!oq@\$\:L]JboRNXj8g8[<*F8I#1*Cu5!R18PHO'#andtG`O^9JEb"@75S80b([XLM`X4aD//B7O
%aSa2S*hR]n6f%holB%%H]F]00/Ek[4WUZaN,C\i2^h.1h?9l<(_+$sThO6X2DT830EhK,87*gaSJUE8C;(r(^=WFB^Yn`)?";5kq
%"PSV6_Lh,?.>*]b/TEW:,8qL4048in.LuRe@75\cKn47q'@`rqGs"NX#DrLG;-=%?Wg]5XTI#Uj"_Den3'7]R@`%1r>&hd2SE3k]
%N?h$!LKas7f$))-K4W^q#KAs\2PV:^4#SeN%3O#Ym7Ze6OqqktRn4;9S7Gr9.,9H:/[GK9>6]a1K,\6mj/u69+tcPTKr37;A]j^5
%RY:bs=n4\X6m3<&$=o#4`Hak?#F#6;fbl8uJ4,SN"W(j/UBX2)+EB.I-:rZ^"ij7+?nBj_nSF^[Lq(K6_t],ZCnM9`gEL/uEPN_.
%>sa3L06@LGlCVQH%REP^",fZ=F:[3F^rV0q9H%'/"Ub4)_rhq4'KU.s6SjR<Wf"7t;AoSt\UIFsJX/8F<E.AR+]Kd&@aa=-g@7M<
%(BrVil>[h>Ns_MM&7qNiL&a6BD%Pf<`tJsq`>5!1,Z3bOfHsHT57j;P;+M@s;+_NkKai/Ob0jH3655QP&4KQ_d>9#W-3g9%)Re\9
%M1QS15=?2S"]9.Qrg6*akl2ud_RXhC8.l(SG]3ja!;Wd7&7n+a."W)+$rkkUB;-rZV4g:kaXL(j729)I6=iJ,:"57Fa%R2+;d_-h
%-AXERDF8s,*&t2[5b@@(8YXk5e.>KeG3,2]6!**Y-;bK*6tqku78[J\SVaYZQA,r>,UYtl'kMJr#apMM.ADRa3,YI<L_1.078Z@8
%O->%,5nqV"pdq2"cmZ>c6idX)o?`:7JJ7ML7OAgI6kPXpAY?np3YQ(=/Ia!u92:>l.]V^d&1S>#Bqg@K3,YI,ghJN2'Ld]bD>584
%M6^P8(Ch#\4h@3V,ol'jRlnNc.h5:F.&;.:.-6;[_Lsr`AS<@uV+Jj)C!m?gf\-``%gm$>L9*@@RcsSJG`e#?K,*)(.+Sfk>8/4#
%MJ91Ya:3_L_3tN73ee#?ii!e7?3imUEna&1'N2:MPgF$8gnZ2/Bm:g2iJgB'GU"]<kh6Rt'+-2FL@$t_l=JX.;_UTR7>21fg_OB4
%"WhRrKh8"$goE8"'GPu=2Mm"mil!0@'[fB`PS-D^@7-TBZF#pP&u?nP6tmB9FDV;K$&(356ZsG&;0EpGO!m(18X,&e)^=A</gUiJ
%caJRa_YHcQLa\ed1;"0OI,?i=U6$]oUQd0a$6/8(PbkcEROBYr-AnfO:hg8uM$ZbJ7bD_96t)$nLa\,fU;2mK*",.sf1GIBj%s(l
%?mSU)HCj)K+QS<\OTe#r9*E`i)5&[Uc9N7M90tYe;H&U?Ft0pYJ]`U3R\Cr5NgZUIOq$Cr70^p%(Z>mh%n&P;)ktEq\sD<%PW7q3
%Th,i@fs,Hl6kE(T!\$P@'^!j^-mNM!#Xq-r6BTho`[3$oGo2X;B\7psV?m+BfH-cCU4OSZ"-!bI^r[%<,XkQU2b6c&!;3)=TEq4+
%n15#:;5?KE&I!maF9]n/=qXGiQC:^IZr=6;#uhr[dM*-nn60*]-k=T+>)>6H'BSAp"XPm[.;dB(]*&F1h8XkPSt-]q+UWNnpCJM*
%$0]afKG8,'-*.t42^uj:)P0JeBHrZRg5(VA3\c<3`./P?_fd#@eI$8fMA%=nU8T1A**;#QH73$_\"Y-F!G^[BM$d'._s9S/pEG5<
%"&_N!PRqE!_M1)bASE_*,t^g*M:*lRkh6Rt'+/HJL?pm;U;3]!]HO!t.VoBNCZq-R_%>&&L59:X"Hkn+.36Ii$%2'c1AWF%dQD6.
%njH>`6Cirg1_XJW-S7=>8Sb9!CHJIg.&;,,1?4aIo"h.2Jg=+rb&)sT3+C4l#p@Q<L3U#0Y#074*:s<Yj9])WfJ.ZGOQK-0PUD=q
%'C&8UTp7<b-6bCBM'sc^'/R]l$qSc&CrLDC">SDF<RX?56'I5MW[:Huj+bRbL>6n8`!Mk4KJpuG$)#*-%%7Sqd6petPCX&Sl:dG9
%Pq\FL/N9Lt/#Zom1T3DaUhLaQig=HN^dPUG,\Sr0DF-IVjr1?>6=(W?d0-#NTBr+r>a[I_&:ag@0PR8CVFdPI-Ai-DZ:mr\PV@b;
%+uc3P-n&R=1WVZe8C981`G>/GXDI750WrE,j3WN5(q2jmDJ\@9JA;N.Hbt14i$j?sL2DOZ'kIWiPi1l3ARfn^//GjOlmUpN;$;QG
%Vjfuj[J8;q2f%A$*/(!4nd-RSj7(El7`B0`RjoejE?hr*k!:.;Mb$[>Q6j!%&_,)q\,o@pYT\26BD82Q!m5TGUtc#'EE"EdU+7am
%/;RT!./?^U*;@qePW?9#9ep70b^,)T:.,sd#hl=&L2b8iG*<?nZ*)_eaNaub&/bmR82EY2c&bD[q,AEX`**r$&=$HU6kpCaZ%C'6
%Y`!%*fRi-q#`ic28VRL!(rAuVQH>5D9iZcgS1Sda2o-'"^1/+e_ee7"Oc]m&,XWn.)5=&bT?9Nh=Na#KdW/9@["9d=Z@^5NfL7T\
%[,AG3Jjtf&H--[!L%TC$WFI\oiUL,*aUn++CsT<,OIKh9Y"<FG>%YrgLdIORMJ@l&Wm%C3:aXc!:kl@4PTd0%MQX%RZ64><$mdJb
%m]!)aHIa4d&Xb&V+$a`1dCo`,hfk5'iUe'N5\tCmk=u(32PT4QBu_@<J.tQZW^n>4ZlmIYR[H]6=<`nAQACDJ\i,5aK\Aoc1i13P
%'BR"01)_?oU;DWpDTt%qEc<Dn&5d]34*HcTq,ooh9VQpUcjPh,.&;]oW$Y-3b(_qjASE_*,t^g*M:*lRkh6Rt'5AI\e;t]SGGYo^
%m1+Df-H]&?'6EG>%;pE@6HeSSfXr7Bc]=7%KkP&Ti!l@#Et-t78F^;bMDp,ZPEJV8iJBCE2^19@NMreMCI>$oW,35e_fd$o";H)F
%DB'sY1/MjUS<s]$J6Ekad.)mIZD!Le6UZLjDJ4-8!(H1WK-6%<ROF&.U,8ldW&%;:f$Y,(Lua4;U8!TA$m@D]Cnle)[c=lS_Mol8
%&5a,V7'VpY-;f"*7[PGN!0>?EP!f<hqQW=#5Z&4"7OAgI6lDpIMP/+H3YQ(=/Ia!u92:>l.]V^d&1S?.)bnhD*QLm="lfo5La\,f
%)rgj4gEaqaL2>bI8JF-rClbVgP`'aVQpfmj.'Z>XKeuX@eO4+Nfhc=U/?PbB6tsal;-HC'>oQ+A6>`KS)RAD5-O[a2@QR!fU(!:@
%&1?YnG#W<mJ3p^8Ae9[Zhq/uOK.&u0b;G*mCOBCA+Nf3K;$O%V,,hjla[B=$84/1WOqXRGMCQ1qKZ\u%7M.Loa)McHMg&Ts,`8>5
%L/'X7gJNg(iLB3E&`mX-[`?oDb/\#\-;ct`mq!,#+\`Y>2,P8l2Un-C95A5i;-J!4PZCXMf7m+i:toZXL?s/u:8!BJ#"dY[Pa`A[
%0JY!L&;iUuadWO,=<&Z$o?bS@(sNGo<ob*mD$*\C)5s9hT[KP['5;YB$t5.:9irVIWn?#6.M$83`S.O2a'?=5#fcg?OsU:m-H%EF
%/7XDFTf=a;-76$X=)B6tZLN740L<!]R?Jg!UhQR%VFdQ*KK9cXBI+(\M9&D)+puKF`!eC3__R+H@4RA--9O\3"\G.2.VQ[$\<0@H
%Q]7a_8WsOBfoTD=?lV[FJn3UBr'XE/OJ9i^'hng2-IeG36RuRn9j2F,P?(N!en.a(:s3O@L9*@PR_TMUS0==L.SPYbN>ZecGenuC
%77/ojD*Q.1-.'PMX<9g7c-F<J76s;0-AlQ,1eLFi1Jrm-_GH].gls.fTSfkrT^nbAd52;8EQg7"i!/^u9.<R>b"W.<'H5GK[M,Z^
%qh-:$4Kun"[X+U&jZ+Y`\2\)GM6`ctbnEN':DtN;PaP'8'57_L6ukU.;,Kd6L6.f?[S]F%gMu":3I'N2&5a,V6ofKMfd$oR0NTur
%a?CZ]:(l[HnSles$6VER]L6J\O<Vh4'i>)[2O'UX95A5i;-J!4PZCXMf7m+i:toZXL?s/5cJR8lX"j(+@Ro_:%O8WN_MN\aMam&G
%rK*F>JtQ5)2d!<k"pkJnc-=b!nD_r">YWD11,%qu/i,WHX;6Y+bhobs_uO\`rJ*=Ii'u(\?HhA]/oKQ8KK1C=R[9*h8E"qW9.k>U
%<(P6pAToY6>/'H(SOOGAInc8orq>&qif[3obIZQWfYBatN<@60c*7:7JNHi5m4dipag$DVX,c>p!2)#&`s)aDC:/Vm>"qgriCG<$
%>&%J:V'^5H8kg"!Z*bHK*n2sF;@cuObcNO)rh;$.ehg6'Qk1oR$&mFOTYMWf)qZbalV>l]pDsN.j(m\GD!'BcJ2Bt7eMLu>R8@Oj
%%'>2V1hjKL9j0gt>FRq?5qSjG)RA@iBsOs_)]BY4-oW;7^)\(J=a9c-d+H.N)tSf/!]5]WK-u0n4"r]e"&_6!W8`Z,dY9"\Bk\ng
%Ec=8H-ThtM<GZLWPm91+ib@&(j5pZ7F+sl("tE<&CI[IE^r$!$L'@ku/jq]e4Q20_3BFCs/_h[K'[f*@<:cn_AOE#FZF#pP&u?nP
%6tmB9FDV;K$+5a>C<2Fq,msAL\]N6M!AY&&\6rj+%:WRE8lB3[C@2X%\5m/N$rH3(*#KNSVMLt8,)n)<ktI>$[5=<r-+;rkkU&Qh
%^I[7dLa6WcG%9[S_j;5RgM74ZF+\6r`c*'?[A3pc\-4<VNWilsSMFH1(mhIcOar!R@LQ*(69o6CS\?q_(5%^Cj<^m@X^kD5\P/UK
%6Er:V[;2?1`KNl"_RlQ[ZXJNR&pSN4*OeDG:1Au^']G1m`$S8BFCe8_iLL:p^)@*9'H*R>Lk*?s3dG.G,(sQaLoVsK>049HELAkm
%KHt6P@cQPtZLKbYJe3NRMqR+TDf&KY>U41uio(.i0d@Fl\ghj0,J5#41C0\1,(tQ*&.M6qWT9mQ[1J!&/M827CF/!j`F\>Q&rMdH
%`PtPA(uj43P7WU+Mm3Y?NGZ+KolukZAK+csgb;;*Y+O../])M;Z,P9Z'Hn/iKP42N9I2?OWeJfQ&90QN6n8:Q`C9(A&sA>"MiF,9
%(P\tcU5Bd1VZ_bCT!>IW`*;"+T,NF&M]\.pC@Q13RsK#s0"W$KC(3R/@XsUS!_T5ejJ?"e&;1ZJ/tk[K-0&abAb+=dMNf9bNL(AB
%B'FUJ<Xb(X%F8\l%W-[a13FtTPnq\nL<6!n\3J.o>\HBS^t;1n+GppA.U"YWmAA@![aei#?AQCc(S[5rM=)R9_]"])@CqMe(Hb]c
%lqe+PoAXCke6qbI6Nf'QI28a&i\7VPM9U5^IPW*t\6rI::D(^,!D6Z(..*n\QaYFR&72`ZKGUbWN2q)fku2@G?A@h?5F@0Gdp;s(
%Q*k)/X!"]qG)<IKY(faq.-/2e_[V"q\p-,7Q4,9_#iK;^][<SHa+#q#rBGBC,TSSKj#@p>SNub#?ihm=P4h48s3n#hJ,@O@jMWIR
%+8k7$O;a;A'5dqp_AK2knD^lA5T]>s7*(DA%E&klEuL1aD[@)US0\b+=39YAhUr^a1_Tt#_MAmPC1Gu&9MqQK:9;o<nA2@hb"udT
%Piq='aTYl-W)QV`f637$:kZrR+(`@[1(QuZ5/2`@c-iZG2N:$,',)qV]ITQdKK]C0_"DLF0p?oc63DfpPHrBWNS&L'HgD\s:l#FA
%k><O_ZN>\&'@\GbmmZfOfnbE@_@\LM,c0XrS.ZIgagg%-.X_XY61Q6P3*q@/<c66m'=GnHGmVN\ao*?To`/''fXl(/(?(5^!C*kb
%C(^(S0n0[$`Q"IfY#1$(U?[gE8JRsB0ARlU=TsU,U]tP,8Hg<\ak4N71(OIb<G:$:j(/M.g;s"$FiZgnq$u$r0JT[56&;"SgdE.i
%!d0P<WC$\M-4nj"FF7aJ%ZF(0UacsB8L6,g?H>\bU*^F[F=e\WlWQ^KPB!uB<!F%7[:n3Ij5h]+odW$se05"V72uQqr:r9O%fhcJ
%P=[V=,A:qG-rGsj]Mcd+U5/**F'qsI$E8nN:f<Jc<"sDEM5gtf)H)iVjJ4C?'kMJr#apMMWOap&a"b&H;:Z)F6rfs(0BDng@H;aA
%.KC0=#?XMk_FFplOOc's;f(kbUGE!#i31#^9IQ]O&j])`1/M<(8LC/i&7KZT,'*"<7.c[_Pmp^h"B"i*aF<0G#7migO\=nV-;e*d
%@smhjVR6Me>=NU'Ws1(N0QM/=2c5S(dOE?pU>rj7[c83IPsVJh&X66>!u3+eB;4[BQA/?`+uuVl6q%ua(d_hD5cP_3gMtH^*DXdJ
%ZkI+";-q6Cnr7qqJEqrsAhfeOfe@G\cW/u'n(XuW*Ua\b+sRI&WG4gt;N2*L(NYarW!Yp0?&aZq\f*$bA5$h?Prsb"2&`p\=S]d[
%51q@<W(/2WMR\:&XW>dRJWMOfD^Y2`O6Ya8*4$^*pqU'(UE^J1]>@NYV3%]I"=<`^5Xc::RAc"9V:"sl9!7Il<DfF=&0_c$P4`LA
%*QQslL$D]1;ND6N(NO]>B0\sM#['p.,/nfYL?0d4&tk7()NGuTTAmi0&BoZ(73X.Z8-[403lsch#9o,086Th8O,.s7W]#E#T0fP)
%%9meQ$mjKi#31"E,l.#+SIPCs.<qnGYHBc^?l\t>)DfEG.gbuaXXt('Ys!:4&Z:R3^)'q&,n;sG43Su1iqo5uRp)*A;hTuNNp?tt
%cGm"JXJ7HcpBm)EE@\B=&KuinQliKl'jukK.b'W$[H]MqMP([Z;-"Vdongd;5K8];:iLj<[-+G&E++FM5_:9hH3(d2\O<3R"A/6*
%/"k%PM_i71)"[8h[$X(PNNWssG^[:/;(UK\bnn/9Hmr;_]F<>K]eF)LaY_&m49D^pbB?"e;!#W"HMG.Ya,VSV&-_U.?,NPs$#t@7
%ot\U_fNPZc)l(h$X2qAbJB#F1q7]YZ@f&>t87UEPjZ>D?=eid(;M-X-A,Dsk;s'.AiE[Y;>mhGU*V&!sK=`RPMGSmN$KB1E=Ii1J
%Yt&4JnlT8tqsDE^4a&J%<9DQFa##r)(<!XX4UID_&0DdKeWD9mI3bbdO8GVJp(4We^35#IO;GuboE6"B@m@f[-k,"3ZU:l<Hb][f
%cm-@,D_IE[/u,'-SV&rX)`$VA%qL9Y7VQq7h5P]fcgl#UN^)1:We]p#"+g5T&M#Q<m=oF/5e]dFIRPe;98H4sXL(>&`8=73_*`0(
%!gX7Vc.f63pH8-t9Lk\W\jD'nA;R)83Kd)G]%HXCVL#!k*VnDks%U5$K#_[W%m%t^[>"<N;pYo:=G^G\euTPSb+U#?"A.tE,2<`6
%g]:!sMrLPPJL=\[)Kd;B?ZmCJAEh+R1;[H']5#fQ[-fnJ.)D&Ig:4GfY$Dgj7tNeuF:h9ep@)P7AjScfRTd$f>a#MT"EjA&@K#pK
%:H73I?O*a)iU-cj&ZZurSrHe^@<_1[W^Geh5.:r;*sYg<Oe>6d]RHpATs'Cr(cJE1YHQ<(gC_a%JZfJ,(gH_!2OiH/^7)!k3][A<
%"=V^2:uk&mM95uLo*VB#<<a$N@)is"0.jFl0-N/9j=<)2d78d>c"dt2#F<*k-%s;$dD_bJ$&rj;HVtLi*C+fSA8.',kf3ee4(\i[
%BeCBQ-(O?_"J<s?pJ$V6glUoL_q.`f:CcEtQsBka6%"lQmFW0$9;BoTZh%G[d^Tn$\-&'$SOgojZ%if8-lcgA@>Fc"@GXj/]-Eqb
%.]-T/c*>FipoSXBR<'*G/fPB-GQDP8!QKBE![<1KltGEf846^+`^9ac>e#=kn'/;n/;oAlKa$YL8Ep=d6AX+;*/(S;jQe&Q&q^4J
%PL7JSiqcIuPRnJ#Jk8WA``8`f\_8l_KqJkM;&6d(nJKEe<\GKK&Kh;]$H,#S/289'E3/)l#D+:IC9p;U%7YsoUXH*ra'8BEU=$ce
%NIYkiJEFnm`?TP5%(LHH76LsC3#F=R-&@?r6p)=@Q9l-FLs=fd-QjfUM5b"mqDPrs>brP5FV>sR5k9ZF!YdFIYoap)IIU?o:7iY&
%$urn=!/837"&sTGoTei9]8cIt0Q5K,%a,Gffobc+.-Rq9Mf5;q3HS48pUU[iI#[2%WK@Ag%IE#+NXC53J@@)pj9`]!&;^^TfhI_C
%!TLr]JB-cnj1RUMJ-[;$U+,am-n#g6WOPQAQ+TG:'_tU,]<6>3_n02oI1JE\8B`Oba@`Oa8d*#=VFWusl:=`A*d=YC%Zaf<"QKi>
%bleOH.W@S]TV.(:!>,Q@DF@b%Yn;PIf[bl:c*p7m;%m6DTVJ9f]'7T&$,WLbopRh3i8=a6??6\H`?r^e:6g>g&mP\CjLI`H=ojpK
%.$RV,Q/XQA!\bM_UMMjF&VD5%[qC_p#fa<lh'<7"-45MX@';+POL\KkZ9c,c,IAnOpMYnBU`lt,!.E&RWJU9;l<K+B-H$HdSi^Nb
%hZti"iN:(Mjcd2,)j?KH$(rP:@O6n'STNR`D_6Q+ntU"Zk.tGUFk:'Da*?fIgn"Tp$T3`r(WW&AaFR3iJHW]3a^PN,,s_/8MNPU\
%"XIT6_2tJX$l#;-'uh;Olf.RO!D/j_9!T^C1,5pF9cN_J1PQ/DacEa\fGA67MgK^:NBM?@0?e`#pDJB!<.l/@)5)bS&]O&b.f)\4
%7j"cAf.`3f;+(=6(s!-AMtAK9Rr*P-p<].4-14P&9aioQlqk_TNCra[L63TP(gtn7qpTpI>D?TW2?Cd5REN$LZ*P`]C9X%;S(LPh
%A+rFUFP/[T,/;qOYih&!3\F2&aX&eI>uuY)"(^N0QV0X85iO1g8"]WUN=0$n2$'*c3IMt/RP;13:np1!q'7T5Z!@b@7$T?IO/Rk@
%)O9H-'PhYFf]=/<5!,DAZ;/1fY8*^t#B=UM$PUT)!dfGH$;<.AjSu;dO0)7=j\bBH<MV%%`E!i[i\S8K`:o2Z#96)&#5D,9cq!pN
%&R/g_2Qi/bZ^a-^-):;X$tUEI]LIPg/27GtWtE?\MZa28gfLA9GO[P'EC2Jt66]m:$l;usCu/?1V;`uL<Upi4;WL>ND>I9q^ae]j
%+^C-:jWg9(_VHq+%uYt]::(&]THD3\SI?]D,N:D/$'mPa=WWP0"4ba*C%;lK19e,"#+eKGMhM?A6>_Z5S%jg%;TI$2CilF_OGG'I
%"GL6dGVE=Ap%WDaSN=6>O<Hi)YOVIj!T(q0Esl0];72elD;7:7M!M>1I:Z@t]=VL'O!Iie+Ok.m`W_]\h-d83-O:AQ*+%SH%M0U7
%N1cg_MgP&@qDb]e43433!\bl5Qk53,73ZccC"`o&,328Ill)5BI^^%dDEl(W]JsKjLR9oB'\G;-('.&4#Z\[+eNlVG$0p_Qf&@5I
%+[A/c2$6RT"!#&M#mEhN3r1hDrr)7`$AaUENk?H?l6jDG_@f-[`eII-@?<mL;Q=`-cZ,L!XVkee*G&a,9pXm<+Gi:Y<9#hODF.ur
%PnJ90a]U^%h$?irSlVF'lkP/+c2ohf[c)ui=cc.*3r1^OQMFh?fs(nqn'Hlq2YsL0GO_J$N3h2^;\iD22i>Qp2#*/?#e_gEZ.Vc7
%'$4WuGdej45^Di^?,r]pI0bLe52lIGpkH0\>R1qJr_[)I\>?\@La`MSLu:!E^hg[A:*gpdo9pP^^%`Vr_+P?0!+.>k=G^O=(O?G+
%>7iD+h^h5T5F6s\)n6s7=@>-L`U6Rl/A,Qp(R658eUaHMO2b@Jb6&s&"h>&2ZSM6RW,&pa_8RW;(:lnY@iFRJDP6L'/-d)'`Y3"6
%-&+A(7lY!g>O3C>7SAQ.fcm#=`raD>JBjaWLf.X&!0M36o8%q\PX2L(Y=>1'"UI9mlF7]KC\\`$XUrRjB/erc$ke2$XVHR)oW^["
%0hIrZ6Adn;Y?6B[hU':[;$+]!UiGUp5Wo%g*q.!&s09o=K6#Y16L6T88)DQ,ZMOXk(=O]$=o4n<0N!#68jlLg$mf:7HEq=ME>KsU
%4QJWe`E&bDqoS!^Q7&S$*27r,$_;*D)7htUfrKg^)A.nhife&P4l0-IqjaSfInS1$2)F=T',AB]Ikerk"JMoZ\B98oAg7[AjFH=U
%R(sn-(!.)DjrMLd[MobqnfoHm7Sj#mp-sAP8@mJi;Coh--(fj@Oop+:h?l=We.(Y=MIY2lM=JtXS.`l+b4r8<PCe&-/*+;r>R(_T
%=<@^hkbV-jN`G-GGMkP@[BP7=/b.Ct41;eC5]+_UHK1S[jjS%GWPc@(Z!(PcJl^^FHV#J`,$9ZuGk`+M`>sYp\Dn5a^pe56;d(9h
%(](#9$6t_5\>-:oOVY.bZV>/M1UPh,$Bh1$W+7[O.-t-5jnIjaUlE3c_<m@a>)<j5<8:@'[7D6FATpj_nR=[818RtfO\E_7KjBVD
%M2(qP#;;*kf:,1@@<!L3j_)":#]>C?:+AW;/UBW?"R!u0#K4V^D@,BlM]N]PGII=$T+XMPgh&^'86Q*^!9(A-$lg?j$ih"(ioqa[
%8L<b7,B1XY3e%17_phRZJ]U*3.3gO@Y=P-*6A#+`>E*k+'=u#Ah5>sF84PrkHWCX9'Abp_B8E2_MOfua4,2FS'3tE8#eOQ(%H/K?
%MS=WZ9ZCU=<u?cE7*<;_K-HuOaP3d2LtD9Qr2+a5*Cb/K4KT5^,'&/A'39_%!FRCVW7hq@EG?I?6[k9=`nN3*n.dV>#(+<)G8rFD
%*^C"*7Q:Vmo:c=nRuMs[YT^.Ld(>52-4pRS?I6+MDAA#EkTmBP7UDsn!KfMl6ng@/W?E+uj)0(312_Gh0.M29H_,Kc6:cZI00s7q
%0WhBHR2Q3Lc]><XPg)_;G\e&,2q0I?*Pl1&2W[T56nr@J,CZXs`uTlu\Du$SDbslGC(Y/iHpj#i+m9n'7O1oP7q(!n/`&"1UJWKm
%FHUeeRF3RD8>bC,_QH70**7hXH?)DY5*e&8UbOG>M*)E`*eA;]W9ko7`]N4"A_3#GJQ+ZFI3a%X,*0\d_=_a%<Y0O1:A4>Td_]iY
%&hFon<ff]k$0pa+G@uQOG'%3Fji(XZ:M+Z!`eR4)$j']+(e9o9HP+hME33@h'u%.+_G`fIR#SulO/A]aOe7FX5T"=rq(n15L_$36
%1e3*r\=d(Z'hV*$&k])]esT+aO0VO)KVI$rTMc]#pgQ*V)$YILcgh_B$cHPf3`pq0Z[A4+6E'hsW74j>.EeY0WVr&h.[UiT-'cu"
%]I%.o&ogg5RS\W7mf7Rs">6qg*kqB&D3P>/SBAj.=re%GLc?PP8g2-+)O,R6UnhjLNl6TS0GR7fYEDNC3+`gj4q9.X9`n@@j#'(F
%Xe*$I+E2pc#m5-Dn-H**k)79qF]&R?-<-Yd>:$+^UN3.W<._)W8pHV#;TJ<r0Qb7V2UmBuP^3GkYWKskD*g..N_C)faR1\3Te(YF
%YYI^j`-r&W3icee=`e8oH<MX19ZaD78uag^l[`:-\VX'LK1]kAf@ZK=D&6GGnD],on-Mb2Ttu,h]%NrP.>/U9JP'jGPd6:kOd])Q
%VLg8U<DlC/a(rQ5_&8Zn1nb,Mh@Vgi8;e75Nl3hM(u\%sS$nUp:6UI?7F_YuTa%@M3[nb^SKfk_(/+m1_Q0Jq3f_mH+UkYiR:mM3
%dMm*UTqr.[S(WLdL'<"\[H,eE340Z%?Uc9iJdPIlX/(to<0#I[;D&\VM69`KC,fN%ih/7>'AeZPV:p/9T]K&Z_D!dSUP(Q>j6E70
%gWBdt\]2!>eHiRU!i=a7.;9`l,I*mW9EeA3X/(n>NnK)1Y8Jo)9`n?A%/>7&`.WRtA.QQr-H&EE]SHd`E2eV=1E%D`e=b5o-)GFQ
%Ehk$]JuN-MGa26+a0D)[_&)4mf^rb]..g!IG'maQ#7&,;'dcTkB4Khs%432=HO<iD:a+>A$<2>PUkESUNnT.S0GR7f09R7)EP*X*
%*Cud([,DD=Hs6[RE=*3Z7)W]HIKC/B:4C7'#;Yd&P!i+iI(Pd%CTW6*n2OsBGUb.rL`AiO"hHCR-7RpPTjV,gTg1)4;B_A67MOi2
%,rH[K!V(]Em3`=@5c&URpZ_S)1:ZTn/>EX[29cYA)@U9>h3]Oc&8FH3Ej\n>atbG6C-X)3$:Y`h.4$hkY5oXKhf/ut"):YImGNV[
%&LhXSfY/;o#/ist5g3Di@/(WJV*Y4$Hj!q?lXZeoFDf$C=st,EBZ!b@W]+PUiC+gOCDtc&T[GiNjsR#@'2OYoI_p@)[ZKUt:`d=_
%n'I:56Hr"cY-gkn)+NaYc)7@8Tnk`lTqm.t2'6.ui?g%X_PG>!B1H@W9'M4U"2fG0O^`-Re9Wi/`1]i+V\!T+!]$Tp9%#=Q6Xi52
%QO9V?i<^g[)mf(M%JAe&UU$HmQ20(O0sjR4MJ!X7$1m+>,_rgi/j:j"),)H3R#ci(CR('gMoq-M:W]Gb&VYI%8I`^U5WnDqe'cT"
%5cHWt(;[03;3o$CKQ6'!%#>Et]-0%>bcgmi##kjc+9B%,.OAdHSKT_\Q:hB+$F,hM1`Wh&K<2s#Q5Ts,TJ@YHS`.tbM0C(EEPd'2
%(N=W+OT`U7Y<D*F'LE4!6*@Xg8QeMo8.DNY;Se/U4Jej.j#*KJj'dk]1nY&LenjNJ:[=n(G1\.S(CqKoQZgb_KU3WVkN2`MpFa(D
%jN*VMquZ_M(cP7rc8Rc?GNdMi5`Khg0iWT$jg#,*jCVq(.=G9i<(W1E3%HqI7Pd(I7XIhIb0PT#C*fZrRGAbN9s2L^b]&Bbg\;g*
%?Xg%9p]`^rQbK3;p<,j;:N5(A"kc4PYmY,pf1*!&ksUL./BG^MP_N^<LK8qXYOOD)+JuN,n6#c9&)Llq_p8M9;.oZB(AhYi9#%pY
%Y9?ff?;aZi4s,-!R>@-#!I<1IdL_B2B>ca>dU1\d&>?T'4XrYcFl,<4"'d"mN"#L'?q$U&?V9QF2u`tN$Bu8CQ[A1MQq.3CCqtX3
%*3bOX\P9;ifrY=oYJ+3=TWAW)SLhEKHp.A(/BN\d8gn\P6:d9ap-KBHH?Ttj?9jMcd"b\:IKX<TB:YfNI->bcaa5tW'Caku;/ut]
%g`=2`r6`RS5N$/@)cF4Pm$j7J([6H/>G+AN$JlPO=-$k5cfRaE2#gmcs8>Di&S-EIHE>XRBUlD,SD_)2Nf-op[e0rrNLr>gH\>2X
%Q!rHlWR.t_G_1[\g&),)K]R[J.TbD9*!/4K/M']EE&X7._2kgZa7m)!N0FCbXLp5L6,T0M5!U2u('OeGhPN^+CHa%;ZKt?5n2?aX
%_2kgZFZfJ:9'!^u#=P@iQ7$@US'@#P7p&7F-d*Jh7bA_#i!m^?1sCs1-gVNEL4gP<I"q9YD=A3+c[B.+rIgH"fUn8]1*d"$M=E4&
%B<TWQWn@YIC5H:PLP^;@=n"FHg'/-!Lt2R0OWJh#[37a]W%%O7'cDKp*X!UXD<4bOo%DRp#r[O>Uo+WSJ_*1gcY<Mm#f-Q,^dhFY
%64b41JE%a5Ej!IdL8.qoP-%UonEH%!Y(R*jaK?$k\Nsk4LQ@e1.]#?A@H,68#M:D5;ef(:\Uoc)L-Fm]FHK<N(a)WP_(K4V%oNTX
%%<^/mGm];;J%a%jK5Pc%!<Oo6IK$?E/9k>b2!98/_"3b2dCa]PZ95D9TBY+P,W-.tEHu#E7ki6aL/^IK?aW$(ZFmHdT+0ofWI9^I
%H=U/H35@7dIE\(ad5R+TK_dM\J#9CsPLMk!#R<?/4\-%8N#o),#@le,KD@fJ+6/-J=f_lVW8epP)FHFCiPUOl]T::/aU?7eUjs'8
%^i[qeNXBBABB2"^)F#12%oW9)5P3=.aDZT=eG>sq"X=O"MtlpiAH#2.:aW#i=9/nN%""'SU<sIQ!!c`g=+g03Bcl;HSm&5n#,["o
%:DuSSj5n2$D`j+Tq<8j@Pi"a-r!'*pSto=@ZUZ7Uak6BVnieI="8pMUb9F\%%KYji`Y>)[I4PHL-^+9]I79R"#%@]p_(k:BC.Mt/
%BE^@4)a>:c%oW9A5P3`?76!RRpNY7+Z5KhfM[9!<A;X4@;5OU(@RW8l1%%>"AM\Zi,+OUOT+0qJeCtg)o\d$2E.C</qQM\CW:(g/
%K]AJ2r_-Zs-E2P5&Pd;(H]T/O)*M.8%`ZN7#4mJs5/n*r\QBG=:rb^?2hl.g)os3iGq#-oe@1Yk_1>\p%WDh\.B-iiIn"sPXmra6
%\l*hniJ/I[('+na#Z)U%V?$8u`!UHGQ->lbCW[n[&0o!tNc>S-6T1]0/&K-Tpt9&(OP7bMTk>/l_?oM;`rjAHNBDhE'%Fsbq($kh
%R1^KqQ/DY_YQq-N)XYlWE3c=TR]J$9[h1eR^cfXj_A9I?M0.QnBNGR$:PB,3%$h8%D$;@hUm+tMAkH2"O:OT#hqgmfH:@eYoA^EF
%4h8RJ5lo"\N^QZ.OZFX=j[r[H0Er5aJ0h4'7LL>Fh@ZU4`fKurV^squ)CL*N_O\DnjN7nXbHE=QY66J?5tJmF(!%[IGrf%I&IU"X
%>j,hbEr7^-.0U9Wj.B.7;JM!85?OAs`@7d)!F[J\=>*Y.TqC9L#UK-N9Lqc\+ftpi`7_cl%?]V'P-f;!Oq't-=A)ru!:hFGoTB,*
%-1]q*5+Xg.kZKsO+;HJi^pR@0DbR(I`)9?!W\VB8G<+5LQXom-8BhhD4*up5\eL*q28%<C(I[YoXSr7ofh&qN8_Wjt)'d<5H$u<O
%V(Gql)2sn3i"O%en./4\k\)rSDNNMu]WWc<O=p:CZPd\QUr.Z&V^28LCGeu;$rgEO*3oRd!m%(&=9n\%4CTNj"c%2^3+B[9<0f!/
%X*BQDHq79#A<^h"4?"J1?<GHdP'b56le=Eq)]r7QLeR\pLQ3%tBcgNaD=JdFB'BPjg<4#:TD%eIDP-WNJZEtJ#8G-NlbmuQmFir%
%pE;1'h]num1@[quqo$OMgcFs3fdAu`ltor(ofJH\g",6lF0k&=q9)E>4psDNaT@X8rc(G!k1K[37#)s3o+#g35QPd-6_sW[g9r6D
%+b8f]K\-iN.sN^Tr+`_q)Ytj<7gn?b6P.[]5W1Or)GiI4gC9FJlTht3XCl$Fde%-J7^"sK#q6[/Jpa,bqqYS>s./f^B@8=mSQ(j;
%FM*C=/2_Q#;F!+-`np#A0;^'(B.FVF,c@2^=Q4"j/)lCVOd?4FPisH=F5TgOKcYqoYi=Y2N+0N*fjG<g@P@&fFC(tU0uYX"#LHY<
%!>IiN+[*E]T.1^@\FJ#\JdX]$c>n`K=Ru)qhuI^VEFUJ`&<Du#"-N8T+"Q(KDiV7W]Fg45*iCE!ko7S460Sij2s`l`]qLJGDr1LJ
%9F)i4$+g8q%*GMBgG*`B^WGY]OP0A4!HD9l]1s(Z,+%P3e<28#m@mM.Z'A>;Wg$HDR\j/F)u5%%N@rks@7-e`HmiR1?kk_i[0dpa
%1()Q?%t.X/]\]LXNSM9fiXW4GMDPl;\q-bk("lEW2/S4e&6Ra&M,c7K[Ai>igE:DGQ.V,Q)oeTn`)R\="f'/\XAS$udqCgu/_!kL
%]\]LXm642<[?CQM<N!Zf^pC)2;?Gr-f^q1?*`J]6Dt#sF[WpDbFtL2EOPGTH)^ZaNe;ZqOM,g=fY1;_QQ"`<L4snJtT@ZA@O",9.
%:#Ude>Slj9C7<"d[*uQ<[O#<=YTVFLj]t-[@,=Vr0_J31?X]>eGH$$Qb$mN6@hekk`C_;s'_3*L>c&[e?b#c7dg?9M+g=TLU1BZY
%:1Vo8YY5'3WtuYNk\n#.ZXJ_h.:6QK;8Z?`I4>d[2,&-<LEqX=(oA3LPU?CO0MF>d3X!"IX'l?CnnbF;_\E(9a#$HJmj`PV@?s4b
%W%brQV'p,#'f-aKTfZ._;o2\Bs4NJHHSJ0%3$knEfIR1O<u*jOV<Bj4/6-/GJrjIrp*Kj82hn?IZ`e-QQN<fCU=@.3AMG0L4ZNj@
%.l'`1c&Q^XPZl'N2Q;Oq8IEp-;(WtL8^V0QoY`B&G^/Zk;R0E#O:/-Ha0m<sUcbrjo0f2d.=da8HmKnn'SiPe\Z1`[WZeKr7:[k^
%YEMa6;OH6=Nc8*Z0_m,fe?CEB?%_]XYt-$b!+j?\(+II>Wgbs%B&',dV2pdl3W<,3;Kg%jMj0e&Cm#\m?7f&uc4>htSb$Z[Z?)U3
%;Kg?d8]o>(1,UY)?7f'uSEHO3F5fu'OFjB4WL8fRC62O_1)LQh.:L`)!+[&Qe0%%K%WX@+MOVFaE]%]b>V6ul(=>eT4*WEO(^ph$
%0e+"uVEk8L#c2+Ga]D6;)q_)C/Q-1cdr&TKY?ag6.3!2gI%A4Qh%"o67MF]UV-3ZKd7J/2[h,r<_+-:\RC6jn@`Q_9miaAV!F`0.
%2)\n?ETGe`Cf4BB!\^+n-:L+W][Vj6$E(kmRQQ+.(B%\ulT5gV>cCGT]M9o<O4pDd#PBIM8RW@5Q_0S9T,U8o(a,5/c1S5,+],-U
%]7__,NiFFqHP/71L*B9f/SYHuB'C7&DBj)P]jZ#D1"><fA!iYX,fB&_-^di"[U\AbJ!84E+L?!q#$s9m>]j-5^kP`u_AgHn?T4N"
%_T.?hSH`@#7oNL-j=ta;&>R\X]/OQi1lV*goeMo=3`U'!Q-,JQ9#nGs8f-a)%MJY.L+/Y)@s+h1/]Qdn\8_\Qc&O@4m#*O=2>Bn8
%Nr1*'2K>)Gle<P#&/EoZh&FAnT%$adP6n#/_6),I*7JS9`\$71l+@K=qfX&pQU"2F>ZGOC+nLl0>P4/^P2C@B$m/NJ(DkI:D/g\s
%G#c#m&D`)s)`Ddfe;[4W$*2OkY#Xa(Q"`<L53OZjGo^Gh;<q2s'4<Y_W1WE!l^KL>C7[cb?E3:,m8JR.4gQup54qD9?XfWo<U_Dk
%-FHXC!cbdGZXWf25^Ic)f1+Dj4Dpt[N$.gC?m.K#,D8I@-Ik:K?kAq\(oS9J!tQYG8Cm[@(oS!cdAgh@()a'$'R!_i!u6?Fccd<+
%]PFIs$ZI#_#cr=iLOk>4(;t,;;^;gp>0*OH9iN,,_5C&9:f4^HH;7=jZYiU26W(#MGg'os,1+Gi(R_3-\\)pQinjn!m.=aI-b\':
%nHh_uF6Bc)Fe+LfOF@pQ13UYJl`[Di!KrSF"'&V&fLE9pORHt[>/m:+WX5tr.\JI%%7dO"rF>3kHWUgPU$L-h$IqfbqD@\5hP=SW
%neGbA^*3tAQ*3=CVO>ROB%o*DA<]F!:SSOC`_8gB-<^5-9W^K7N+3Mq^tOaHM3+bT+"<WNC`8dD.`*fJcJl#mD7=n<BddfdIomq\
%Sb$Tk>37s#W6CbJ,LnR8eO[*lH88AMZ_!+TbH)dT.QctLr+'I=YYpllcbFdq'Rp<;<PVU>d[(@eKa$.c&?nMKj8&h1lV:P,Kh!bG
%@(^8m#.(qIC"naaj9:_2>@\QPhS=I=eVGpDX.`t-@>kmASfX5G*FtuRrOU4-#%OKuj"e'%3IL4'MFcEFPN;$ThJ[T<r:cTZIk&^K
%Pq!ng7m(C=Q&;T8ag<'hW^)@*+4Ec7PXAChFr71[dLd;q@kgk))G5FnLQO&a)-hH:,9p2Q1)@8TZ'"=aQhC4i^S\5lWrMI-iB<&m
%<,X#X1RY1T#t`SWoQ.qF14okT@'<$bqH%F7:U2&;C@=SMK,8IDUFic!KP]ll7'@jtG&J4)AgVZ6n4Y1QASJGc/k^7bVX55rTYJS2
%Fcb:c>6$D3/#HUO!ujjtl#%3apXHJt[7XT#7B*\EYZG#_"t.EOU""W1V(UE6@3Y>0I4/\]@?in+?'Qn71.iQ3+%fi"o/atZ3uP#:
%lum*nVo;cp5r3-^STI7>q2IQ?Um<rf@PO\L.C3mCJHdk9I=nKJG3n'>QM72X3giYYI84sF53Jk6>;L;n^WGY]OP.,?8-@;`MjL/8
%lG//$CJAYG9TCa>.<X9-XAW?9]PUmLjiQ2@h',4.)g6/P:o[>N8ei\S;?sg7WFJmsWFP!VWJc.1#FU"i9U5-#W:k<j;e;12Mg9mk
%%dH";fkd%T;SrfG/-]R\H6`5=0iMWj_%BUD*TLg71]`&]54+,pBpD$7YF:d-8k%*<>chIg*a"QB8d/$c?t?)X5jmuTV#iukB<@F+
%!T"fQUfOLOs!i"3A>SQVM-g,;eOgQ>nl<h$?`d9-rPbWa[Sd]8fPQMJ<'[n]54jq@P*]"Q;FP-Eb[OPH,BZE=4W1#]M"Qr+mpW$o
%(rbpg<[o4XFsj^rd;RV25)?aSlCUW0-UPc63K-pCA%<=ibK;LZ-f^HqF]aa,<.-s;,jj5X[Ejs'CSk8>ULpM4ZC*2[f.uorS]t./
%(uoqH8%Q9")H7q]l@\7j%5Ca,#?rff&VcDt+cTR_=)0]l`=1?n^0@h(W[#en6tTJ83[<0GKpbqO%^HrY;qqWW)4R'K-*_;<7]JXr
%ZhMH`V3=)Le[G.L1[QcBKH@4t<6M'ZAh#n,fh=7N]pbqeZl`m0471]pAZ%\\WQ_^k<[p2ug&>N[rNK2QC!T"jRhU>V1KCHGkpR',
%C8J-W>7p]gD<r[JQ3J%7XN'lt,4AV^`c?&T=CO*^2aB-0?5hlV1(42%i4XYU7%!VscnO-,7LBjgbY^P.Z;N"(QnP%6_b)e@AP<t_
%nCkboOE0k<a4EnmhsU:6n"]kHO^?^/e[[25>\JnLMK1r(S/irV%X)F,\k+f[KI"dh"SVqRab92tpdCFt)gn$O1<qe<NEL(llGplD
%[O*n0SbB=;Q(l-J_aN%;GWF`T9N5pTqD4P<B`2U;'\J$-74*<@OK`Zo#s2\SHo.cqYe:_+%(_UZD+eHuXM99SoK'9fpP/3,Al@7(
%c=FdsPU=$)U,5@tg7"-3rCoJZK?V'enqT#J%BEA92O#+<Q!Q&=9r1Ci;!XuV4M9Cp4s2TB<MKm<Kj*\H+VFIA4B+'Q=Oek%Y3HF8
%SHr`DA$RY+Go^GgSP2u\W*Nk:ok6&qFiHknqV#I0Q*;\MoohB[fdIJK?qOI^*Q^4FcN5T%%D#Vs76N*#3[OquOcre?a>"gdFGsAD
%Dj#AdV"O+=bD\T[ZsB4))sZe1g9U">'W^3EB'li!%"@_ibu>6o;s6K*7MkFJYb>!h4qof?YW<fkXu_hF)5W@U&#CoLGo^Gh8Y]7p
%M?N9?RoHm/)Po'm@T<c6)c<+.]ST?4+?6;ZEJ\+ne/QAVKh3aRj5(n*.<+)2;^Se'^bc#]dfec:_>Kk,<&jmX$e<n3)HO/J7eREB
%Tq#YVC/gYN7.q4UP8L:K,_aCHm,aofWK+J4O-!n86Lk>@2Dcb[>/(E@EjR/BJ@.pS*AU46c]XXua<ZJ`ibVsY2CW0YaC1(qUOLn\
%8o7H8pJ5e\`aQ."p]"_X8HEnX`:ad`"V]Y2^PQ02?d&CQUH&P"fL/7b:/ZRs&fiMU-FaSd<e"(+8QcH;.K&R]1;SBW'BInOUmA9A
%6#'k>O2B,TWakKFZ:Ek@bj;u&:\"P*EZF=>/5kHDl>4,1./Hp6:CVpjKtM[MgkR.se_6c0akX`OgIK^=l#]mO'W-'_em=$Of.I`k
%8'"]^fKPb6m94#s#e[0[\>!ma>'h(IdWarr@Z[lOIMemIN+[dmSFL?U137osU[4L`H^()mClblCIMemIS7bKYSb$TX>37quDfao6
%@#kX2AJI#k;a34&/-\B9qIF'IJ@K,1A4Ue_]PIqLS&'P,2(=>8;d7=$[`]lTgA_B6$`GD)8RK^LP7;#aBZS09pM@-*iA7P4e1p>f
%Am!N$@7DoCOcXPP0$)X9]&2o=p[=mW5F6!H@n.nJ\CT:rJBa?:[LYHX)c>!:8HIdBj_AT5dLTMsCgV-`If12>#Op`L?>NM!Cq:0P
%Cu6o>1?<@pi_+uJ*o,m/BrT0'off<=P?!JUOg71.>E!JU*U3OTgJ5XM)7Sf+%V@mBR[[1[@gmg'lXR:\0oP7DAB4*Ij."8gY.'tD
%KXiO+G0N`qNbYpY,8^3GHsR&GICD(q7XLsh)U)YXk]mIK!YVR^Pt92sh&-^5#Fr-J?q=)O(2#Ub%*<A=]jW,V6/CbSV;3#,E,/H7
%`akNuEK;QT8EY,WfJg*1dBVHf7@OZSil6RN>rC==P03WT!XlQ?g8).'gR(`@VOP%q`WZsJ]j^YiOgkjC;2J^jC3+DW[;!W;R[S4(
%q+WoRK>bLY#E")O\pD4FfMF$KL9`;BioUP[/K[ofrA)p),92flJmVM=&>RYW]/NDo5,]"*P`^L<C/gR+<@VK6ZXJf>ba:g[YCjbW
%C7R\Y:MqM8&,JSK'X-r1C7[bjaVEFK^&Tf^nYoCOe/QAVM0US4>Jh*+#EJ\\L/l4T.6-RI4KVJsj20?4^coabeCQ5;ZBG,jXA]8%
%kmQW&#3<Wrj!UW[^=93/$=Hd3G;;qpl/sPq))cjB/kYPI2,E1[g*`cQo#3^[T]V.Zo+WF<NuAB:+fVVaIH]\M.)BVh!pG%EEuLUI
%*O9Rp&_KUtCBAdh:D"G_$]XLOKW(4qfr+U(eX2S-/8(k^H8[kdEGc6PlaLj_;E93WFWFCeZVN.q=f=@mP-e^,eNQL;YD$^/N1-[l
%a>U&KF*]U8IIoBd4i6NqhIjK5S'\n-H[C2DB-UDA"DVplBHNJ$3A=$`;uuOPS<HQ];?7BShBF]u6IT'd<[sPC`>F_NQMY@Tph3QG
%_V8e#$I4-@ab=H(U+%+rZV<O@e9K0tnYhqo%r7qDVS1]^Q>',Q.PpJ27^Yp;2,Z">T8Zam`$Ze[1@`mc[7ktV51tcWN)Xu[o?Z9j
%`Ljt=jXJZGM4aXTJS_1H8>ql3m/l9_0m3p;H3ZfCA%M`PR#L82aAjich]frNn-7_WW)eRC?S)_N%:c7(8F2j?E$+eCb=c6l0N659
%).UZ+^325"Uhm\8noYT6[lXWi)bkiIP@iKAeN7d;l=\=?*^3d`D24P%,?;Cu5Qr:BA>8dJeDuT>'o%:dEaChePq%;i$)hGd<BkPN
%2)__)lF`T04af*EI2G93/OHR=De&VW=fH'H.8'^l$h8?D2)LXJ+Wu4!>$pm+Xk+jek[lN6V5a>!V%u_\+F5KiZ$XC`3\uTXNG#P)
%DG-0rF'G)C)K"ZAL&*9ff=SE(hqEiqHcrHN%5n>A1YjH*2OdQ9FPrW_KeH'.U<SFR_aKJ1=S`4>P2!3f_hLL3]$[H1@5U*u[2L'\
%12Y(Q#Q7(TYCk'5PCX(/@FDRKdpalsJ30)l.g;_RA^b:BZ\7**M01N6]XHp:CR4rb<,+L<D]$ZE;HKD_-B(,9]1/E6<26Q5\^96p
%o/atZgO5juR3S2.Q"mNHoOtR,!H?#HMdMtHA*W\QkpU?'$92>G2:hgqDC]h4ON;cF*]giD![asD=0,8%oGMN*WFa:`\h'"i*Mi@*
%o+YrZ#@41U4B3lD$K;2,#"t(P5/TL:".&)a;u>&`aa].qW_P2P2,=sSJL/1(bu6=D>]HW'&".H30+iVcKk>.'WV,^X?;--&$=IO'
%0ff=TeZ&6k+B^J^%f931`S3cI;]SFu*[Acj"o!6h.>ES*.Nu7-aTZ&=;ZJ*q&"BK\=.8f;bYoPP5-_q=R&AjuT;?A^0MeCsVO?9)
%*0$\V7;<Xu^tA[i]DE:n:<jSjScWqh.j:C[kVpU#P[5p(0H@XFmR2l^pe^Q]6,dPD;<_^.hdkO?V^tC$W=EGlmFXP/9p+m[SQa%-
%eu8t]FUD-D.NdO#3/'f_Wc^JMPAR:eo]TQnSW5NPj&GHuTHGt<_`61Hd?7'_'bKJ2P6?5oD$h>Z/bpKHD$j32.d%8i'IJ'`Cj0@K
%&a!GA-D(tq`o&*uhD])k<ANUFRdk3ND]i9DGhD]^a'tIB1O`H'm#5T#e=?&DRBgm_=JkGTB?QO1o5'i#F+.5gm$q^PPF_<_11fW2
%s6OSpr#%%a&?GQr`3+h$$aS^kMbkrOILA]]R%"X?Or`hkRU=m072JX^(Q]2c-#\ocpO<;6"]W+MUp%4\_1aU:ABLC:JP`RDor7,T
%U^eAfWAuG<]pOH(*i=IPM`3Z1:;ZsQa1d$>p&D#`b#TsmJjCG'L/eRRMecL:;@]tELWdP+Agn.e#*WIFOK=pCQ2]eAb3LS40M<-#
%D150R<'Mn1+Sj=9.!=CcYRGjJVkQVONab5M8a:.XIjU?nXWM\6_RCB>?ojIFNRJ!Xs3(+hhna*/dt]Nh`b;"61CEqiHi:7+?:B&(
%hCu[^9^6rO)*F9:dU^p6Oli$)dkP_`^IdU2OP%$Hq_6`>1G`3NW:X8X"^..-KChP@.;ce<!/%WB`dm\-YH9i+LsbI=h&A7o.b'5_
%"qt%:KABP,f:r7Uj?oo)HsR&GI4)W@:>;qSqQq*_)qA8#Zhc4AT1P#+$`$f^I:=YtdB.8<HAMoUK;d:Cm+sF^pS=rQR7nHG:3MU\
%kGUjS1NK2(aldf.fsgiL$cV).hJa5L6I43%liDr_96J":4f2+5;Y+(93)hnV2X0"K%+/qE]jW,W6/<qhQroUlj-K#fN68LJ,9N+]
%OjE>9ZVOc&rn'.KYJ(="UNX9GUkX17Xu:-+\&CJt=@oaV`.LF^2gUMp*@Y5c9FJ<9<PR%Z,X"n=En7KGq$l*C4`5uNiud3*?&Vlt
%2!>Z4LS$)_EAm8N^Q6N=(9d3Pp(^5e;Z,A6kRQDOFb\&eXJk6P#oeD@B0q4/aQom')H]QkrKsDX+Vfhn7ecJ_j[c&67OA5bAn.c3
%fDsFulQDrm[2SR'\B9:D/0q5%RZ/.]in&lar&]Y\_LEu%G"rJp9%a23r,,\@LA24t;GtXe`mMC1s,Poga\ZTeL$n_WaF9E"#HhWD
%]D\TT6!$'Jq#[?sHlk@`^LQ7ka+/A^iaHkIhJrXA_H")D889"jR=`[DbeANfo`++lq;N):,s:&c]4?%aSf"%_!&UY[O!O3sU6E*+
%ipR\cGsQ^-bUOa;:^<s!*Fgs;(BAk>SJAb<X<G+-;JrVo2f8!dJ5Y8HK%!+MM%p]b_FD>u]80=B-ARH2Tb4-9Z937(KNS=5'OH6P
%ip.`?&'WBJYJ"4J/P/'G60ufk_MT.rQdkcjLq3[tLJIUSk@>A/e$c;-kA#IqO!\1RB+l$4'Z>ouH?pTXs1hlhI#Ipkqsh=I#5A.F
%#60S,TG-m&e$$QCBb!o[$Mcc#$RLbhoKg3rr9.Y/o*<GsV:fcWFO09?%r?H+NXfD9>E@r"3E<),$2BKJ(&2'@J(-,^S?khDAB<Nt
%o-1#AES,'071f/aJd4Xq[O2*#+!0Ydq*tmhF,%n&Udr\#c9/>s2!q35O<ghXi;;N_ThBDE-1&&WhTMp.de8@=[SM@LFoiqBNejI.
%SnouJ-dW?fU)l]^USa^0!qU7*L1.onR,)Eo,.4=RqO+\koPcmsH+:7!*C;,f3Mat"kNV[L]*X\;b_B7f1RPNMoS!)gV[r"PRQ=#?
%SBu@AJa;%@q)#?:G@oSCp5/TU%24d@.?Kp94?2Z7+#0gb)d9HD"#F$VW`@OaCo-m))"?gRjiLl?`=*.2/NljFEX)9"(uDK^hR>FA
%ACPSClV_1HqVL0sA/>Apj"IHqiXNL+o?"*DeL[nWLOig`OTE^<`'Eso:U78CbeE6inqJlmFKOq@TTepHF:ie^d%`YH?'/mC)=f^'
%M[?"b2&:uXN3iU8rscOG$<J]M1Ok+g&0AV`^qbm5%*!l;UfEZ5^!XV"0qG,[->f(!fVF0*0Jp#WkQ<2?p]l(!0<2"G@ti8%@UgNV
%3f/e?.g.2%c3E5&iihH6WLrmR-'R9C2S8hQd/=2eDog?G,a5?:[MFg>750MoH#"n>R*<<P[)Nhl<UO%@W^apL#eJKJPsf`qjBhG4
%h((s=/PDM79X]/YCZYC]DEbrB!O_^'9qWU)1H_/LK^?e0:14@Q(HWi^\t?Zmn9#<.2nttrj;/TH=1t5KXFF;[goTuH^0J_@7%a4[
%$qHDBb`DU?91+u$$H7/ajaQpSqk(\un_a&`H2@m8s7ls"'d!J!Z2YXf$@?km)[/>@N.p8NhsYEUaE<A</JR]\nWLd$eqO+tjb)\P
%PZ+E9=)AXW;GnN%Ig"B)X%b)5Uai5h(@U@:4D_mG!-r@j7']&$Y,7<_r9+5<rs6_j`!_OGm%aEeOWpR7XlN=09-qk[;9kq_0q?n/
%5gHecm.3](Y+SFGOQjm<@WVSrn$ZsPd`>'6)QUi8>-6FO=Pr`+dP,r<;5^2pTP*#9c*OOkkQj4@b9;$%57b5A(fPIDLKGL%=oqDi
%%mWq"DfY]IOeSI5>F"cO3hO31^"3!9YrR#?gCs:Y1/bpZj:_LTEUD)N?aKSF9[$c3EOO@fJr-W%*Yh'6e+[%Vm9!)`7:e`JY7BZ!
%G%`2qm4B"e-^uV;l\NODA$7lIM#T7_#9CmPbKDs;L>@O%iQih[6h,":4TJbX-8sHfMp]R/8]u-.qk*2q)oe+Q0XIG]GEO"tXs7k*
%HIbuKEdjJM9NQ:fnWJgS^YTeN$7`'O[V4V/]*T.Km+F)h&f/mt(p!JJb\D#L??-9b?'IkZAi8I#VBge^%;!&5oDlmG^<>aC#N=C_
%5Z*\/X0&*o_)Hc-@V!8"icbbb6W?H1?3]=J'E.VLMZ9qlY2EAk`EW?a\AK&kJ4Wk:?F^i1/k:><^=%Dh`S]h"pI382;c`#&L!85q
%c!)%acJDB'!4h""@J>Z,Q-3(&X-;pVY?WsF/8>S*cqB>;HI5Og[3%\t2.2f6WNj;MShG=X4EOGIPMtgMf5H+8X5tjCa^h@e[>kE6
%ZKE`=(TFsAc$;KkBbf=LSU#.V%N3CE,_6eD\KU/gmB,\=K;mkFm<>md!VcVA!MBAn!c"uU>/sa3;jCN9qJHkmpeh(3)oLRf<mbJ;
%A?!"p5,Q&No3iP<LAnZCP5gup&6?_aX/JQiD@IL!nTStV4Sl'a[JHBH%k@NV:@^(o5itrgN3!SsVeN/]aIT1\TH>HoLbfg-[m>Gt
%<7)4?Xk7D7*tV)uY(mZHf>uA5KRM]VJJo3aJH+(BFS]ef*c)lQ;+\cEDVB$]9j!EiBiec#$fqEQ\TVHR>\c&THk+;>3h<t1A*k5T
%KOcL;TtRkX5P7RZ8`t`g$1r=2m;JO_<6$5dF(f$(^<F#5lsFIufM!%YIpG_"]K3qO0$3TqprV`bTH9bj$b#Zi?k9hV@.;6mFE%p+
%TNjGqBLZ:`qagI*8,*me^\SLoX8h[UhAf&_rWOV;Y*K02mdN!STIWGJmm!Y1<NoT/()5jU5VsIVoXp5qJ"L_A>q>*(s&$eLl_;54
%pD4qJMMf=t5?AO8-BuYr\FRETmmBDf7c,@'Hah(7BM)8Hlgd+Be(mW56IN!C<E'A$(ik_h[<*o)24a)nhp"FqC2]mGm;]b`+&/WZ
%pEfULdX:Mi)$R6U/k$+q*U(20aS^enl?f4D7Lb&iFlI?g.[8mWiC!WA;-WrGUUe/HC7t<QH=X@]5uF=p7Lb(7L@-]o3D+b^)sA$r
%euM(GLPEY`r<V:V9NKZEU<tNU[;R>OEkG/uJM,Dl:cP3lRB.GE`[DSbau@bZPd9mD:rB!#E(7V.8*7"($Do*ooqMk3?Sq?>X5Wh/
%^tXGQpT_Nap9'5=FpE5[cPci\3M!7*W;>j5^3j>3/BqS3_.(0,bBE,"8j+@R?q#:&cZ1#)L(MH#]19q)]t//LFV_Y,Zqm*1adH]O
%3.e%+K1lMpXXBRMr<-)2C'8'rTL4O0pOWUlFMdU@'[EYNn>*9;Dc1$?%?H\14!qn8G_=i\)A($G7'M<\))W,"jP0D\XO,0ZrlD,q
%hoI@hT:MYLJg*-^odncfiJ\Z^heLn2EaeNR^qgdhn7^b$$8\C15^iNFnhfNk.$7gU(A*UGe*HED[T)KKg*7p47;%%YD'ttO[")E6
%E)%86]qCL4k(7Lm$hHIV7eaO^4^7#%A@cZ#hXBc5_$uAV+%W)IAV8hIMFaqh2cl&FhYnODU\jD%RsL"ZijKp4puNl]h@"(B+"EMH
%dZ2&hrO.pBO_ZahJ"Di!aBb@"Z58GU$]5lc??,Ce_AP3F*^'5n-E0WS^6&DLMOlGJ:Xj>s.%J\GnGQ=L^@CTalk!_D`&Ei?1]6Wc
%ad7fehU1piD,<#mZ/\7)^,GVCmO'%ceciHgrqk,or@[np%Lma:.ZS?n%,NMec[S^`<_l:mj"F9T.*9M!6k%K^HN`:Jk:0j2-<Fi%
%ZLr(,b7:i^nN9@T8RDql,T?#-R*knY:)mqrI&=F/ccm.VjpUO.CrHVDpe$P`MBF-8G]*sOGTibIi]T1f5%c\tUS)\f&VO5cP@HC@
%O@Hf'Sl'(b4u3"l\[!V%8+klTgtYPcHSI"!;/"':mhKtPWTd8egRk_'qUsnYcDg4o(Y&J*43nQ\r0d7+ln^aK>cRUZBB0u)kDP%,
%K22DXq\/Z8Sc]`u=qCco48,Vh/;T.b,D+c6RZL#*hC4slV=<jL.%)unL$sJ4,ce_t[K-V_9D^OA$*N5=RGGk?ihn4Yn\Y!O:(Ak0
%1\s5ks(QP^5C)1GZl0-4DU^0q]dsQF<S-k#KqcuZ^j/D7_L86WW'%M$0"TGr/+:@mke_:lhf/K>\d[VYmRN%pOD$hdD&<pl(p5ic
%Q=$A0)"2Q22N2-hf0B1d&a<(P+I'TV#LT_D1OO'?\QgpX%45(F+!`F&$GH3=8HDBbP\]@qF';`l+t7*X`rZi/04*]toNkC^7Qm3d
%:,9t-r\1u=5ia9D%#UlZ7jh#j#aG>#XBnC'5&PLY'RI-$aJ,CPm%QLB)0[JTHB,?NJlt#,ZDf83fGOS8]MBbt&N8*G6<4:0HEX7Z
%Tlr3QXNX?Y)8;)jk4l=N'Z0(l9j4`q$m4%t63qnlF_">]+']RJ>D*F"gQZk%"^$ZAXs4X[FDGsmh79?mK1lU<i4XY.I'Wp?nRTT%
%BC]m21WQA0VZ90kDj#DejnH!.:b'K"X`>0lfc_6%>?3b[;@Hu@jnc7C]'?F>$3<qlG&sa1Rfa>0,1t7h7?%GX',C,s`Frq*D)=(>
%VbO&p#5pJ`]oE_QfLC]QZe)q6/LX7F_>C2`X'ELKI(cY&[9kc=gFCfn]WJ99>Xdb>Fd9:pQ,/43.r%JNSP2$o1K-eun#7Nf5&"ec
%TH1[<lZJHN_dCgHl2(/.jHX[M><eh]=Ei5E=64SV-"oFl#e6E?7dIV<CEEpPb\Unq615i]=1>i4'rYN$[tb,Q[aTi$gMoM`04Nj'
%hW=Dk9(?ES"fir-MO*UXb&Uh^h4^ZVM]QV:[W6(G2gdCr-=g\lU%aQW&S`[_d)q?qPMt<^Bb#,>[t9]:hB_eUb4/tS#-0,0M?rU`
%.Y>,+n'mQWWi)HTQ7gG&^-DHJaHXIMhA[m&RiMn\:JS!O-J)9gF*OIj'nUPu-EYlsL*&K9=<1ODjC`[;&[L5DViJu-4]Q%%oV#^L
%prtpgO;5TdhE*bDW1=>W%q_o/-JqisF+C$n'nc/K-El#uMB=oA(bI<f95rQg=jG234LJ_/l_u5CXc&Y1k!.@++Y/0S]m"RS:cgC`
%<c3kf%-L)UAr,/g&Hm=K0!X#*NZWW,(^Bnk'j<hlX75^-SsioM"'riD*F:[F]]:4\A^Y2W++LBs_B=rba]jju-45pJ#2:&1+2$tA
%FZjL1PEXUT^!Afj4_Jr6''8`mjM3d*$EgQ:'HTHbHU71L+8?:jZp.uron,SMNEtF#T"BIH[:\BCTU*>Yi!=ddCK.L?H'bnYH,[g`
%l\QMa-\3N;+g0iAV))DFL-oY0VoM1WJ(jmTI>DHFP\L$enF2T7qt-8Sj_k\iJfj!`_3s8!HJm@OhPS=Y/VA\k&c<'hW9mi5V?:Za
%qt-8SiGZ(f@38qr#s7$FO3i*4G1E/HJQi$WJKsq5Xtt72\9"4T@X_NE->FD<"HMDq\8GZ<NGN/E-c<FDA"o8RD1BDd__N]]UpnkV
%2pH,FZOCUDRfnc0LU`)R[+hKK^QI+<[X(Ws1,oOZ_%1OV^F3sGau$8FDl^oH/UuLRKRJ[<VQY:RcZ%0X><O<Jq&9Hsi((;+gg:CE
%^RmX1'a+04(t:XQ>o((3d)QdkbF.bDW"O>u&Ifo+%Hr\>6ck&O<EpsW]iW],W,=/R9&Y_($;^6[]9^P.,t[O8TDr?u`"fse1iR<%
%H_k[N-\Z3B>":RR4GjQCicV<(OZeF&]iPoAn"o<XWYEbBV"!_5\RO@I7N)APBsqhRe1ruh*5TrT4Z:Z@lPZ.#\Xoa2E)JZjTAdET
%<K\SX/DpE[9bkKF^*dYUS.s948,/\1.#LhiEF3`n.G$JoHNb&irf/*:D1>"[JS/i@(M2H0R-mUQCis66JsO+'reu;Zl13q'o,H-b
%<N+'[oE6amZi(d?!7O_'Lqt@qGsA+i6aFnHgbf`rH8D";E]`"L,?N_upp7FMFC2af#P9Kp7kY^u@XUa6b[j:A)QY",b^h>Rg;QbI
%+BGk!'2;j4-JE$3o)X!E`YE=oRH*2@(k(&PLrJd&/1tiB7g?r5m\%IGdJXQBZerTV_aE3m*^S91Z?-(@o/WNiBUW.V*'hu#b4>na
%k,U[@kTjOnH:CsC3P&RLorF^\q0i1X]MAIXW$Phag'P07c+/-i/Hn5j:T1*D^R$`k.H$t>iRb"KEVXW4jBn[JK)Lj.W9%iu"_Z=]
%=B:V!C+,JBk_r[PAjJM/[f'GBc_r-tQdc[`.Ek6VN*6R3=[/UG6MlYNKjUTuXa]"WT&#059DcWCZ2Hd!;jN(qrX)t+/6AWi:=4DW
%';qqF<siS^;L$d6d\hTLq%!Ame'cP96nO1X_AW:\hZ^u_r6@7XVlm>s4]0D]Ui8df_KY:CTuN,NQLFNi]hagm)ZEG-1\qE\TCB*T
%p&fblKKfgYE5H63BY4fcA3t]AoNhU/B%o*kc(EK!!o5KDYj;-dTnu6lh$I6(B%o-<34hsTRZ836lB--h"#7^40m=A3FSR%%ke3YU
%e\rS\PJS1p'L%e'bopqtk@eG3aO)E?r)2aA[F6!-A_TXfL;Fh!'Y`2^L)e<pmcP;_.+bPP-&%m/"MGU.U*Q;*EL7HcW1i^O-ZVG4
%(+0cuVU@:,2I;VK9@8)THY:DFGcqh,kbR^IM2_?q(OH-oU^?#8';;&)>TMJ1@&V$]Qrhc5N/mU-k%[560n'\'*2>=sak(JoY_BR6
%qM]lRj!R%%&s0b'6lPsYL*mp@\loMg0.::qlbsgcUi8d4Ka0Ou'Rg=umX.qc^p*Dnd"TA'iJ`5=mm"Ng+A5%C5n0hqjfBTG"Y@23
%"hdtO0'JJXA.gkRZi.50[4Vc-Y,GJSqc`hGCfF7'?I@&+&1ne-B67$rP&Ji>Nd9g"nb^bSpI$TgPJS49#i?(?3^_QpmV's'pL&?"
%L-O/dN.-LsA:!rek;n#;%Y7s=SuCai;E1GDi>[&aY.!q-^T)L'kBiqh_b&gGIY.$;[f6^$%q55;HI[G4=EJRs.@ef3n;R[+)L&oX
%F03!Dmtk3X-\XAQ)87VmQ2Jodr.I_tq4=PHE)JZj+.;!i=7d]K@d7S84d&R)dYHYKD^BF/^b8QZE$+?D0&M.u#X0pAGi%ER3`UYh
%XX07F$^qX4Gs3VL94FkD)>%64UlaUEV58-#-\_#WPRE>&8p'&iPO['+)'F:MO9)'LMW1eUQ;^H8N(s`+56h,G,?Sj]OjUQ',N(\s
%?%[]8?504j_'?4@:K"n&%.cJ%2$Q>_:=P,n4tjnDWs(+,!7VaO-kVdk:ih)=$K_J+ai$gboKlJ=&k%Z7b]qs4QTjW%ZgFR8BK'6Y
%=I^]k@\sOq$LLT0BQ'&Z[+)p=/d5>GfL.CcrL!%9q^m>j7N[hG[fuZD>],_IFgOB.L;4%cV>KL>@[a.AQZ%7nTd7[NA+%g1Vds-X
%,>Zb5'0]*V&B)XgZ(TZYB!n:k:;t9b*k6B>G&Kb<M9EpKm(7RcPY\GXhpSH.F3Kl]][MnOYCq<B'[@Mn869QI?bVYTPCf?/-qHT6
%YXGWk!jH&%;kVc!Mn8b-Q"0uKn)JX6(&\(u;NW($04]S.b;mYXU0%ZB2(&[&s/4%k+8Scn<XS1kUlE1DGk]1p-tDC:U6m%#L[,#P
%3"AACQ;ZZ0+8_\sO<%#T4I?iL8?)6u"XNmcLjcB>5m\Z@oPoTa`Efjb_S-[DcVEiM7&(eSLa!Y*#d#0]1+/?^8>]$F.N4fsib=2\
%gh6IMOAMF@$0(KBLDn&4XRN:LK*]U)<:9JdqVDD%P^]p7'm9W6ePIG%1Ca'#%fa=;A"rdL3bKl@pfH6OBr1M-`BI5bJR">PA'ld)
%dnoE"5aW3XpFBA9]jm,ip4Y[=KmnY<qo2XWo1%,H+\+<$dWVSJoci<#4]^g@+#>])QE;8>MqVJk5)(/7l1&R5*_^=e6ucXfY,GIU
%.i(R#4\q/'ZhmKcV*i>iX91H?FO%)TXO^^DQ<!$N#L@jis8*He\0B_B`WFI($7:SEZAZF^ABGiD)K2!$^/#FbPsV)bfm?Gbd(^3&
%G_-ej!4bp9++LuP00s<$T4i\Kdq,/5]f.tLA<b12\UZX_(9X#u))05e6"te?BKgbfHKZc6eDGhpToakp031Vj&9BP`]mq./5+8(?
%q%9.AT,Tg2p+FYH3a%3,U.]t&dt!1bg&),)K&t#nmu<,J43ajA'6$qjXNVZHCmlH^g&06NH2Z4\2mL@cKLVROJg:&p0A*sH%M(2d
%f(]MClgM-ZXLg_i?P46._S!7Oih2K8?^5C4(^poNS;h["4^k,QpUdB$d&1h(7sRm-g0J?j2@EtRf^\%o]o\X*iK]ekO?<'*/cd\H
%N#L,1n3I:<K/,iIj%Y,JZY=%7gs:iaDVt9n7YmQUY@PJ=fQCEQIc/?l=Sf6HESQsjUYdp2/bXg$%o"oCTJp#$ph'C#U,*V-\`fD<
%G-2_f2!`>$IKVm?kTEB@V%b/a<T<6?PAZE>,+h7,mfc*n(DgUpfB,SB2ZHN*FPH=AEA9I7ZII)a6iGS1rZr6EUFNt^Mnmk"g>DOj
%%b"9lec(Nu)lV4sl^n^32^N'gr'k>M4rM'4=f7mdAg>@@YJ?9:AAeP$L'8lISGcU0S$k7<]T;U1H=tRe)8GI'99a$77SYZaV(k(;
%nLJo=W6_u23jlI*KemHlI&FN3GM[dcdfO]5)hOO\'p4sK]q?EY4an&&'[EYNn,\0p+"p8uLYBM,qE"a<%VeFh_L86WnC(7^m,j+D
%YO_+cTV\kOq*2po)r5FX;*n!r<64d][u,u@1%OD'FW1Lt=*0a`Z4tUJV!tM;Y)UEE#(^XTRBQ65lI$F(#C/e(_Lke<7F]A_iJg&>
%V=NV(8ruYp:`X"@#6>=u"kjT+oaCUcp0kC<Y%B?LWumQuhS(g8\$)^'3/NT+:cP5)_R"VgYVslNDp+?\^/$V3PZlE_fKfMj';P:@
%.V'Wn,U&CLhBb11'#/1Enp`9!j%3KP7$Yo!bt9-blHo/mpMmo#[\tW..W1iuQBqbT?47!!`co!)o0%9u;>ngh*Y6dSF'eeX('7u8
%]p!l3m@k,LW&bajncL_e+N69k>g6-4X'D0r*tRkH.<MrIV?K4j&LG*;rE[/;dVkSbL=#qg<-1e26:i621%N3Bn4:`g:'U.j1pOKd
%r>D./^=<Ft\]C+dH:da\F5\J*K"A$iKhN>@h?s[_kNY)$A5YC^L;JQjTmi]q4.g`pjSk@Zl=r"$=NRdoUl@UOW(0U(A'pk4ZV9CS
%a=5J4koA[R`,u'0ae8Bg\tVAPQGOM>$IAPR2\'on?[-!tDMQi68td4+hCI6^dS4M_c1Ydl&9s@P'Uu!nHG<Ec/rhC?@`\hf=#?Vd
%<>tI7.%J[Vi?N`*rWP50kXmMHdA$AeHIP$:Fm&7M)@E+q)ii?QZ<0#5SlbPre?LAcd[h-pFq0"U.YZ4<h)L`JbnDW.Yo<8kd7YOt
%<XNJ=.=?g;Lbl[o\sU"MBk.@[GLTttX)+JK7[:i'pdT)'(O75HSIZfohCDc,\S7Ds0@3;L,CC`S6*mpNI&AH:EYc#8G^eZaZ%0"D
%o3:HCbd[Ia=-9_;cm6O15'$SRUnrq9*UP5QTR44I.)YN95kfQ<PEuYV]L(,RIj"tu3ND8KonnJXcQGiR+'2_R4">=okI\`,^7TXE
%H.Nc&-K7Jg$efN$?9(slrON7NlMF-HEP@?0Mb_F+%RtV2Ug53VM)Sbf9>fpDJZIuipdXt&EBEa<^pY#h*\e\rke>dFkRd@<jTU=F
%5*,"#d_9Xc,rNH29(h_n`,Q8c:G3A]\^(-&eB`+dbX:V_@iT:+,XBYSD^^`rrm]3i+6^THq,:8:?=70qc.Oedkk.nj$&%7-4%a%5
%s5&PZotKG\Ir6j3FcB?B7t@)h=B845Jufk+NS2WH6OADcb<&nVs%2#G4Q$*!bA;Cee'L+`kFgR'0c5=ZHfrGT-6QRCk.2u.l$4Fh
%TFu[ElcrOp:VKA:?VH8D=W$X"<O6?mMU/ItT!O,;5<AUaPit<UppbD<jk(lik[6!`QPfD[613UW:h6.7$?-C'L$+H`o8L:TXogE(
%Ufs,u0hAc6c_YKQY3:a,.J,bN7DGVf+3;1e?XVZ!Z5,GK@02JrcCG`WO!s.+SMtn0?,&4Rqjlg>4T"Kq%+<?Da=dFU[puQ[MUkr#
%@%fh/kAMcrI=@K,XoQt*R%g+Li)3ICI$_+\E^J'N8a_\BeT$WUKu:YLEkr0+U\jOm$0s8#+g8UL>`t$IYnijl?dX3jrM=;@V/Snh
%_R#_Zo1?&tia^sr+N/m+#.gjq4ash(UZHJK'@=dh+j;]i-,?f4e,'KoUA'Q=.=9;Y]2CV`PJTiX3?HIq?A0u)-N`-4M!>L'bUoF@
%T@$6gl'HY$59Sc^Qd*-J0_mQ67`SSb1[8ogeZ389mpZ/@C+0jmNi[SG'33?G,JVR);M($cIF._BW@shmQ'UVs6IC-MI9,bfKeo_C
%St(UbX7U4%FDqq\r?:1JV\o&4cn<Ge,^&gVE(1:j-P,rB)<uF[iS_a?JsPk^=q2p61\r!'&PNui(o5XLdL9WR:#6hRGj,I,6B7CW
%X%HGk[.;+h7Gm>n^0no(;msr7O6?.F!m6KJES6u0Sp-X2-c'jTmc[.4;3q76W"Mj6?Z]acCVT<C"2qatJYM$o&fiY@V#s0QMa#H3
%6':N7H#=+M7U(tg#.HimEu+/8DQ2lUV,k>`e9@@P'(B)X,>8l1<+m)2L:@\tI:<aHOQ"'L_QBN.6[G*?UQ2V2/p94mVm;4d:_J-?
%B4/j`W@2<?/ghmHQ)$>^/,+mpb#CY1W_'?(*oY)=\d<]M;hIo/I\31]2Fg;VBYek$TN1uK.bf]J%dmU\O"(,q<O+cMP<Np2Lc5!6
%he=(.HrorHd7A8=_eLV7cKM(nj>&saGKgjO(go<;o\RtGWR]Ep329+)8\RRD3dE3#4ElZge\$D=HLIg,e%.[kS5H-P)8<B/\%;/_
%ke3aXT3oj=E(6,0P8Or/rk^tipl\Iqj!UV4GQZe1fY;/K<uTQeN(sFMEh*dd>'I,2lEf6uSuCai;E1GDi>]7OZ>D1@,AR%#'DFmH
%LQfRmr=%QupS49r6pJ_rZTV1/i#ltA5JqU/V[)C.Y59ZP;C(PEogCBaPJS49#iE1"[p@_`7LG"9e&Jj_%>T\T)>t!$*elYho8Rk^
%q2Oj"=q2p61\r!'&OR;Mc8X/o?[:g]U6`\giJ`5?Dn&RWfsXP5?D$fD`CmD-pPL/R/<%hY.@edWiQ:ODC4mK`BKVsR<nUI/K\e65
%2oQQQ`ig*%kbR_7HBQr-'nr?WITD%<\<[HX.u;g(Z,C>I,<2,V]AF=-CM!8jKX'DC1cREXaXapZ7>\m0V#.cOrtgXH#_12+UXnl]
%]&R&7)=UtJ^@SimejXG*7ONb"\&mX[SF3CZ-^"D"PFj=NYA!&d7e]O6N(s^UXs=h(NimbRe6QTRZ$[M?E+gYid808FV^dn)b84L$
%8kVAs>rjMt^m_hAMq;e+cl%`:,sO7ZKHc7QIWB\:QXhVCqM_*&`p#[<pr$UPoP%8MWkFSV!#_0dBR-NUW#5O*c0;dH^'e5p@EL\T
%T\37]/>PQ!PNir%<dp<aa#c=qP`1qt%Y&`lk[Ot.s*haL)W<cC,"lr@L!FcCs*-.C9Ja!=AmC#b](SnlP7rBJM?P(pUZig2VFoN8
%!r:$OI\k0I.=[KWf9l<a=/$5b'^6M47)rFR+@8>F1b;[*D*J$>;B6k_#P8H7M5`QAfg%5([0j`S'Pg)%>=c*&JRfRfklXahVX%WD
%a<AkMgbAli0%>@bacRK>RfY1@X34id56;I^)?D;GO>"D-#Ndfsa4SX=p=_mnTuuRHE=3?p^E#`:W:otUkOjbaee$$[+d#,Q3+pTb
%72%cs,g#p+E!4>hG">5s"?1bI>@4T]+?`iDG6A/P'E\8tmtVGM9q_O&Uud,f_doV-DLAb+_8B-9]"[]V>1'#;ML*D`a69=<7ONm[
%_ic,;BP2e9KPX,77hH+NW`M$R`p"$Rq&]UZTi7_6*$n#UiQLGs<XQ&[%.n-g_Hk;@L\#^UON$QsJVY8=W$jL=Do4(DOVl;cK(ONj
%PI90Oo\rQ,b.40(UH1e[D?QZ(/.cgm3m-u>IfOnSo`%JJ=/(LZg;f:BT1#^;]mp-G9EL7:7rUBd^2ooGR]e&jBX3sX-maTn#cAC[
%jAeke"TF5k6@M0f"G^[<S'ahGoO`/0<slBs"X7Q3U8#BZ=R2bBd=,^&@68IRr+\GI2Zg[;GfmRiE[m1`C25$um:1hgB,j'*nU&T0
%3,j+g0Z>m99+`h&/g.1BJG0*h@,FQBmVIAB-\:_Jq8$u8?o3ieq8gCO.ghnFJuH[+6+EX$jD$U"MhMn'9*Q+C#2VITo+#%i/Y+F(
%\5A-8#,FC";:5Z&K9>O(H)(5YA%<38-0#Za"VokX&4c=@Lsa<GJXb7gNZU6nNO`8Ul508)".mmqLZVVSl/7;ki4X`@Y//Fe8BL*8
%\$tQrp!FrX8oMN4NTkoQ05jN7B\D^D(;b>UFJnu:.4P%BP#$XI)HYirM8ApZ/rH;toNk@)P*LmXNs#=oojpYNk^LkNEbpp?%WUH%
%&H+Y^?s?e<1!jLQa<4'`",jnBI9)!TVh:Gf[$KGKImCU&rO?`BF0qPBNo3Efqf5W][:Z^4`3./A.?ltbb+!e?IbcD:7_7[[RrY>4
%qaJ4#dRG;oJ(S4&U&?$5)>PO,^D5!e#?Q'TgWqiK0UB%<F9$Kp1(kPo\X@j#K7U6^_CC/q[Y^/`O\)W"gDh/E9Zd"UU"HY0XFR$8
%>&h8=$etDq0Md0prF6.r''a#_,nM1lgT<h$*Vu9e_t5$;Xe%_\`#6KBWD#UP(g$KG5foaM?eT`*!*F1@EF5<]VBd*V$1'=03fr6p
%lm)s%HnG$\m5,EtHe70A<!$"V($X.8<AkJ^6Q2K>"0_)`U3ZhEEeaeO=4]'rg95]_^(.[bO`e6aQ"g<0SKZd&Jg;9<O3g\1kPN?H
%G?^[9koJI9A.P]Vah7j$-]p:B,%#$b(,7c,jO<jJSC_!9![UfU%[?#.)<<*SIu:E6eJ%I4-PHj.\`QR-PYDEah9!l6ElqY'npMTM
%o<ae[5HWIW]`mF:4OM+qp+),4X(=Ob#LD^-FA@uG<g3r*N:pa&b;Ve\o\8Rhqs8a,qYN@D6^VDc^A_KO$6pf6hZ]#"neY(NqJ<e]
%1nA+m[#hOJ24?cYclBuUNKb<@`f,b%AOSPh:J9]H*AVS;?!7a7\Lf[BLdLAS4.cj5#I+t,k.mhXihK0(W0$!r,ciP=*(>Ytb)cbs
%+<l.dXLb!=3T-SYcoN3;'$tReJR4.ifTIIo&I0/^6FIHUJ`pH^.*eJ0j6!LRS$VEj'4mDWTu$5GnsM@t:gr<A*d#Slg<SYm!2Xo(
%ONLDRTSr:^RZAb:29uq3>J*dHp2V@j^*muUe;,C;oMg?34UD;sRUV@OY:H-,";G+'GCUkRrr^sCripZI]?992g(u6$"$@q*r(q>u
%iA3Nl^dX/;<^!i+@0Y,qY.&V/I>Qj\IbQLrRDE@_LS`!^r\2,QR=I!TkVs+Sl>J,oHW*<M6#:7`8!>U*TD/0e&oa/3HRlh>Y)aA4
%bV_j*8;7g%>3*&"+iasdWVCD>=Qm^:QEuFB,%=?u@:o*@iB-!n4Ap0M;-BFY%-8CWl$ZBVT9gjti.7*3Gr=9P**0(lBKi$!q2\;=
%!,qm&_FHW=aLMiY=guS>B!.m&JjuQSB?(lWiJ\Z^T.!AYeVCHFY3OZiJFdsXF(h:G74rj<?K@<[,6Ue<DnL/aa[3HibXY($d)LcE
%96;qD:=H;k=.I"(:)%9/aX5fppP.2XGk:88Qju#FgX\<S4ra?(+uKJ]=g`KbQa/iOQc"WB7?(l&8^'llVtCsA[kVR/>T^57O66jr
%ZJ#QVW:3#RS-UEW.#DG!9(`g[#'`/B]-p9\8mcr^7[QSc,G<(UBsrRj$EoAJ>Qj`='i:d'<!:&!KX=VL)#tBP;jMIRI9,t<B0cXB
%`CW9cSbc1q(/$!J"_"6Pg\"Ma'2U:ZVV[@;>pcpBiIHU;R@`%YgA,Cp%G%"U<"\b(."&%jN$"d1W%u8BEb%?'O(1KEND^khieg)8
%DA_k.EOb(mq+4GR?".plqE(>3M^'+#+$r>S%^7AGKb@31f1+LX"'@uBC;&_BIaenJRFY^ji]p];:eP.hl(jRnECAlRW;P[E2LU9p
%57TL2q)Urmq57i+.1P%,P#)K$<!PYib*;/C#7n/aZ'jL]AG#S!ko"?Pp%%J$qS1:SYbaa*3[ONG=(lAFM6&DuWq7HA>dOru$._iK
%K04H>.5eeN"[:;"+pla+mB"U+2l"ZDYn1//'@BtjB2g=-5G,@N-s/93DZbK-\Zm:hB]6ohae@o\=+@WXp$K\]q%R$]*qoVWm-8'^
%]')IK(Bc;NF;!r7aL%ln3p'an^qBH,TfK>?,1*Y1C[^Gd8F&o:R>mY*R-m2OXc^:nYJ*FX`4/-Y>0;p4,03[[hV6(]o@1%'WdR:?
%I++DREs)<eV6;D[D](1:+(EXAStHe$BV6.pnpMHM#,S.<.?UrRN>HZY<'C+\+QDM%9fM]N;'[&ngg']k3=j^(aU07G[b!"\%,MEX
%kbRU1J<GBqeE\Bnmq--!WBT1X?o.2&A@noDOWYA=*EEKg[3#N[VCau#",R>mT37=CDfN>HbO]D-8D6s8(D\,_`.M\+mfi'u=PD:6
%rOtErpVZR<aGVXnateT.O&^r^D<L,JrgT!U-cpcmRl`c@;7INICgf4#\Y=LZbIH/Ia;',Bn[89;.l0:P"sWO.QcfTG3DFW&c*RYk
%eIY4U((sAKgiPpP*DLcS[!gl7'skmK,1&uAj2/6t2ih'r-g3#ulJs(if27:K5+88';rom8EQ.I?$gNl,*X`Gmh4qXcBe3ZO,<n.C
%#V,E)QV&&bI#?ALA`#"$$"gQ)FLH4uNsR6k05dg=NkA3q.bN)</i,fXUI5!a%>'3MKuDB"q,Zus:rYFt)qemH#%CnF7i?bJ7sLnO
%]7rAY8E4DAK\5o2XbHu31aM:^+`2'QUjXdjEgqOIE*?H%'SM,Y."uKLE(HhoXF_-i'VsZeT[DI!62Ob,@chfpi3W8'J+,!!Wl)Ai
%6.t]@$0fRs24RUe&B(cY`jZ]V]9K?^DgCP![P9>3XVKU.!Y*IVK,W(e"_FU\d=jWY)GZ5uX5Ve-[Ed06CEioJ@=a/;lam9A[Xg"_
%)G#s;<F'm3)N&o!&s\9Di,(cU2i4'I`3_b(L;8GJbg;DAdCV-XfYTF"`hZFTm`t$0s!5bk\]s>d^%Ofo1kK>#.REM<NB$8cSYJg9
%N(s`;l<([1^VbA?g$MSkh\/'`R&q!4ql"rDFracVj9BRKh6\O*7e^$hU,$)!U6Hq.a)jaAADL8Xk0YHXqfrQ0.>Rlm'R02/mO,dD
%IW=d_.S0rGdA>8^6/e-`%!o**.^JZgCBtorg&=((^QBr!;e-_N&fW3$6"\1VZ2nkO?3mcT!oi*J4'g2lWXk_F-jVPG>UQhHltfJI
%EgYW`5R#aKIA?]:08KS?+5fNTad>k0iUU%).PI8V@nPbVm0]BH!ECl_F=:**ckZm%LjkPb!lBerh`jq6-gEL(T/(*5#OJdN?L1p#
%)a!EmMAqPq)boosF6%gB9-4g%XB8;$7Z89N9oaeDY<Y!.'u5_j>$Gk747^`"<,.Nl<eZTs6/]CUUt:I_M5-8((HIHk9dFZbPdIr'
%kf$<+NRI#$oOa4l\[nV_e*t6-ab23('3244q)!c3%..mE4ShJ253)3*CaXA\_Nj*C$KCi/V'!@3ApJYs/OFpbP3#n%cu2#I;fh78
%.7[HCaA%K&Q+<b7>eX,4@B&5,l28u35ejQWZ19i&3(G^EmA#*@9'X;K.7cqD:2ial%o96u]O#W0Z@Uj?g1?Bl_mc=Y7Lb&!DceEm
%d7BI?KMK14`rIImB@(uoi?'SJ'1:`;:'sdgT42/OWW\:Q7?71=!P(pq615Q-.o@pF)H7&VFAdASi83Q>-W>(q_D]j5IUY'G`g'nk
%o97$/rQL\oO$;;Y3*dnO5oZd0Y'qt";Tf0U<tm:L60s_t_AQ&ia@(P;e;H\0/Dgq_KB(O`74j:Y_AW:\hl$uaG..8K,%#>&H_QhB
%6/W#tKP=&?j7C8J$8o?+0g.h?SnW[D5JoAH/(O#lkItlJZTV1/iM:E^5JfA0E=)L^$*Y_AX]LE!%Ln+Jq?akX]+/YS">K/o;],1\
%&f^0HRQ)CJ$o)&%rYcLYpQ=m=icsh&l!lr]?2A\F04?I6"Vd^jke3`WDse!e1TD/'iI(,c3(Nf4QPj1-U[*2]qZU_H^cU@j3Wn;`
%cB]e="!SK.b1d>,d%TcZ_ARcN#40&]rQ81l%5+B,,O%9ZKIt%cbTWMh]R2LFIA;P`'(WGC`^*EaY-d]$b<ZNY:DBij_OrP-f8&V5
%Ogbb0@5d[B'7dr52XG$,;V$0Cn8ak&LegRO&8He@gP_8_3eMa-3AXs&b@`>k4,$`7'YSe!1:5_^#[hg2+lVR+Pi&f/f`hCBGcu8W
%p*lTNaBaI7/YS_?P3b>V8c_n,.Kj=?W.pWbg]\rbcjJV<7O5qqd%SN#+BJ]VMW>#::g!-/effR%N3t'0d$LZ(F@p"2BIoEI'fEpo
%&4ABjdFL0;YlVG!"REgtU83U@GCP/WC;VD(W&QF9_B+9XQom;rjJ*31PMtt7nIS%UY>G4<-'9\r8Z&^&e^#71Tttk3Me=I]9LO+g
%BA=m>64E>@c(Lumf%Dsua58Nj=GSq6!AI]=JQE9F$Q<E5149jiNON:5<+tAid@3WW_jeo+&8!:*,&U^W)*[sA_>"f%Xs8j^#a(OZ
%ALlrt:TM"-/iq]P\_a_EHJ94LX)4C1(7I9&kb9;[MYKX_;ojTX77V:[c);%h2BP8QSQKRjkY6eml3Qh"I9!%K)fF[UrA%50MdKbC
%n5q<U(t=AOZe?T&eYm<AJ1)tN+4*o*#/*%(benka1l";;C"7A^+lu/ph)=n3d4SF0)E")$l*U./RGgUY:n4%+HF$PY$un*_imCNX
%-2'CBnR7VQlUsF\KB.sM"R.M;EqDj.aFK9E-9?2jaA:)kiKmDK%@J%p];TAZ<O+#p+=!,mFf>P0F/#c]1>92O7O,39,$]Z@Ur9@m
%6M+um;9g0UP"I0p8"SY$NUrKibr@kL#*hVf6P9V/;53Bn*;XhY*d?gg$H..B$otC@@?08s(I`$>G.j@oo\M+u2G&#545#\M8cJ3F
%'P"_!&':d"-984A%Q#lT@ncBH"N$jD5V<l,%uen;g?17uTK"JB<tMC97qhP]Z\-mPGH'dGN]n.1MaC97Z/YF),1/bQbRBc%PK:+7
%q.,:(W.'KZaAYE%Bf/Cq9#W@CXN6/u)FpSJ>!FX&d6R?V56j3!H;k.N'N#d".$AYr5r-4P7dq5AiBNol=Kb^Nn[5C#?WX)j&_3#8
%g_Bn(&I3I.:]3%?9%DU!]2na+eSma:R,ig!S,iF4$;hV%12tUF&MY[*D,]B9J6qMj*h5M>0gohUMV$ND'Y*QmgW>,5)[^YV.)%2$
%F#U&\.Nt[QY(Jo,42o=$68)K,Qub]7%\/h.Noieng51B6S(CMthef(@DN#$uR0YXBZDL4,YE?(6AV8hIMAXYdpT7$GN#E$6*WTDO
%+tIMfq;R%Q:I[Ld=:b%1cmY#WpHmht)@DNPM*RB+<9_V]0(_`6l;Qe0mffPV/:?G3'[EYNn76^EfkVX/Q]^L4+!R1?mhP4s7r!&,
%qi'ZeT^;56cZe8G:qcc[PSKe=/HBl/D70N&.u7R>Vk>q4Jtr-S=RJ7Rk+YUA7$aeDe3NI;%7gj@Fp?:VV"!GHM5Vf5E?_ip2OW8i
%NCpgaUA'NLX:V[T9F>ES;YZ2V0#47q!e3XF?#M>K8M(-m0.=B7Ec;K7G0pn06$KV1Y:E^YqG!]f[u&_DKIA2<F+`@UD$I[tZoH<1
%A1=$GV=<EU6&]f\3K.bSl6_DBM2q"/MV^E5]H8+g$>7jOmNr;;2:1oQ#Yc]'OTc9<aeJNi\uOVAQGOM>$;^5Pk[HU6ij.[V@NmRS
%'j@pY]Jn3H,\++Hc_qJ$<n^N9#NYbRM^M(\o2dE<l#?9t&q#K$p2'TjBTBJLK,:Aj"bl%!=S##Us("n6>rUA"DGPpf4L.hHMW$ND
%_Y+Zn:En"l(Bn"+r.ntnT;Q'GPs6\l-G.eih5;-g88\0u!nZ\6Bab)!:X(F6;cN3H$SUA[@k9gYMmaSc1hf">Sa=gAUIJFQKrmAW
%3J_5kd%p`u7YuWq>')JjrUS#X154+EOj^"\lcM<FV]"sDqo$]\`X<1[IV6;Y%;f_t3<XVhQLQoFcSM/E9!Qn.Q163W,-rLASKRQF
%60:tD6P$F_=f>QIA'*Ni50nI]6OZ/P,+iKIYY*s%%A"#;Hu?ppB&?FL,V+f3@dR\Uh_EKCm_aurnSb+d<k!@mGuLWF34(HlNgAnW
%#&ApII:-(L1$B/p&9XoI/CR8Mr"^=#&4I9-N1HDJb(e"HIUa$3q`bs2qpf'9K^UkmN/q?Ihl/fRMq13!@*<[YotB^8Xp\B62m+s)
%co1BQl:3CSn[](j(@C9FMCicn3="WV19tdpH$VC@'poO$T>X;2cNj]"G/8DR@Pohf1<%bJ;CMrG5l[u@DY+:W9<M,;G_l8JJP`M&
%XY%`bVY18&#t_V0I@:_*pQ=u9Kfa=1r)"sRIE[Q)`KA9p?#i9t1EnC6]qWRq/7P4SNo4aRWRMb5bWr^tqFQUo9_FP=%!*9mD<Wp/
%@oe2Y`^p&pR59XA>I^G!!>Kh&\W4lEV3PH8HU6UZHc]kU.@a7&iEI2a&@N4NWguKqJ`\p,p4C<`k79gAOg>1e"mR0;TRQjHOCXVi
%<,?6@2kudGV$@>Unsr?6=Wuco-jlE]<W:k&X06,"9ID4jMo>OW)*qRk3oO;YRm@paJ49gu_$Uc%YG2LjZB5(5Bhi58SCfah7OUb<
%:<TW0?=,+1Lk:#A$>LBnld,uMSA\c\lJab1oT`;o-h3&AOiR+1$)5lZ_i$i7bI)rr@4:#TEQr3F1e?Vf7TT)_*1AMmFrS^lc7(^:
%fb37AE"V]X70?D3H,?UT2(7Mn'3=]toAgIp)/LZ)&oNNb5W`g3rF%B*6GLn"IjKtf_?s?_"i0k^nDR:hU5.KtY6H;18DI=9D,+6K
%ZgFNkP/Cts.*:+-Je'N.J+QGRGm,gEM8_)]Zo%@6dc7ul[fp2+BQ?G2mE_^Sn7]o++5Jd4i*823V5Hkrk^G)67t^NC2<tXk+E.HJ
%@_I.Uh,r6=Xf!G`2!i68?RC(PBVHc:e,,O=*'r'Q>A5%Jgofr>\n;]$!g4oO1(I7R<]iZX+XH9'?f?[:n3Nm`A:r`t7bIgL3MPQ.
%YGR?a.?YOeJ7`(l:j:mJ@Cd"I>@%Gqls7cCe`e'H2E+O\:)7NEh/>&rqD<H95#J#`PT6YZUeF)0Si87pm+1D`r$ta_/NN@-9TE$W
%)Z_G"M7)l;g:^<BUP?XpqP'+`.0SU6r.n1&\h??lK(fT^"kr*/n0;g=:OLLYo&BCj`Ag'F^eQO'NHkGs+/[!f"&P\Emu&9B8($j=
%Is?$.m1lu+/KiYS2OtD$?,:JI'HLrA7c+#8OnUF<B3YJt71m(LJ;JSAJ/8bP5ZEVq)A%=I'ua:,6#T4;He^%WaRPIZFonUl/'0L:
%gJNpem=sfGccD5=@-,aWM;mKYY4*ODO;OR<R+Wdti?Fm#8o21>M#:cP88>AuZ0LTL7SuE&F2u]4rMjh?_Ma)\7p"fYb-d%s$W^"g
%,BA`A;6&?gV9:e(WNMJ;AjDUA#B(ZW)3d&4Wp]>5;H,:!\/Uu8.Z0ajiT@VE'Yi,V?0R&r>h(&K%uk6"%>>LX:+gOjKggDk;0=tS
%3"[,l`bYOb'0,mca$J2'GM3UiZm/"_'CPnCr5BXPRT"I.VK9=;Oet=h6F6S*\ajG@.B#'#CXD_HO+X=-B2c_G@>E*VORcCVXBQDQ
%'0[gajs-p$drTK*imm(uFEp7YAi`K#F3c)#qh,<H/c5,;GP:n)N]]-5]oNSL`'3c_g`g_SB"o!"+Vesh$tU2C$1U?Y&-hc./hB`u
%PlQ6G*;tnVeg0+(5]um.UJ)r9;1/T@/jZX:W_j&/+:3PT%oL'q)<h+tO8l+rW;XUO5sRu:&lJNZdfN^ag^qQV5IUPk2*&T6PksYQ
%BLM39XQ#o>O^"TR$mdL]3g>76*mSfr7iim+GHT7:M)2rr5qCfbd8A,B\;FU;D2?9:>%sOX]C*YkpEC6e"qE3MF/!"NJ5cl2#3'&#
%H!Hs@e?hh6*+h!AL&d'Hgo7O.oO1QnqipIB.H)_U$scn7JW>_Jp^Rpb<8S3)no/Qq\?qp.99F807YBPJMS]Jl6oYGl_:eh0PTZo@
%(@&msQ!A?Yj4^/l_+EUEIYR<M6r7IX)sOZ'g\IG>j`"*WUS$KaT-qZM=hY7VOmHlpd.0-MT@&^=h3Y)&2/[GR?1;FRqk[lYTS>g$
%iJ`5?DtnXS\FU10%:==n-YbZ3'[GoTpo]FY$9R/7q0AGV#.5FG$>8uUHt.l-JeBTk0Q5IJo0#sgTqQEp5JoDmaR.HPU<&SRQYqFZ
%"p]](p_fr%h[X_^\P@C;$p3&S[1#e;BCmErpS287D;TAKrMm-h>E1uYLPEY`r=%T)K^/:`VkF+T[;S&0[2_pKBCn!-;_c=@na=*A
%iqLFHTU*JeiJ`5;mso3_U$c9!n$U`R0AZo(**N\^oJ:m4GiH0N)nf:PEGU!0W9%tr32<,))b-1XGJ6GZjgi%q4]0D]Ui8df_fnI2
%,.I0'4Gkl\Hr&743%:BFO73U">&A->)qd2Df_M,;iQtC\US$KaL3UJ8hrqJQ2j`X\TU*JeiJ`5?DZi5$ZLaXV@d&!L-YbZ3'[Go4
%q"FY%m;(SSY$A\RAUAr^5L]UjIYR/:[F#bm4g+9sS!t2$*)6iRoJ:k2fR;c)G=#<"](8'^bMf797R+b6J9dmUX1*j'>MQ-55n/U(
%_AW:\hZ5X0IJ"(@rDWF?gRskM8`>VWL@>'%g:k\H+!=m0B7$A=_*QubIY-h)&hHFM1Wc*!+C1*N`$:k5>*L9Xm;h:nb+/=XjRL]c
%Xq4QrAB+]L#Q%$bgNQ@+%AbIZ4ZZf(U!'JWYuT%T"F'dq_.)g3.i)pcqOb6!(YC5aSO,r&N4@Q#=8h"/5uo(!Sc*L]4t?@gcG!:U
%P)KJM6:4^/]sh&WlemT"d)F]8QD?MqbF;*ke^dC!HH?9TJaDi#n\52@EK.^21Gs&qSj-6>2YP$ijh,38eg:%Q_Q9eSdoQ,')PckD
%g@0@+?SG=Fl&)AeTLbo6#soYA5WhgJW?^k;V;tX@]I[ft-+F8To+gY60@>u,_^ql6F&[/?374tY:mS3^J'q33>8U6seO%UJ%K8qu
%C76M=$\$1XOGW:I5ifP=(eb1\LWj/NnkeM331@!bW5hNu>6,L,)WF13kPiWG.h\Ca-j<u8ZMN`gqI5,]E^5,pkNfW+\G;gcF^'/r
%kq']>"&58/,(l0p4X,"):qN.3#[>eEe^#&0KigZ<@<YlD`>7kiKcYM$8t!!+>K1;#<//K+6%o8AktR/MGOjruK&X0;WF+CE?'"[G
%1N?TkpI_eM!51@2'=u@d.=4Q`+d6;$^>-Lrc@P._l:Z'QEIXg/\9?6D%^R2O)$+;tMs=-KI$3<;2itaO<@M8)GDd<[[7*rUG(Q3)
%Pie2fd8?0EBcc3]GL4HIf@6J'I$&'+^/Ok(hEL/4O8a!5OCW^#WghaLTEcs*^4Yb:,[auu_R>=RCRt?Bd.X4r+Qh[_f^#lC`5KBW
%j`Ju*Lp+!.H@t&^8i`Mq[8?!mU5$P6LH\h/-lq.1qr`RjM-B1)U))GtKDRMeq'7USWkJB>e;X%8_kSH!:IGk:3]&kE>o/h;?d\4#
%efj=Z]L/VL![;C=gRpgkAle\KWT_Uj,tUe<Gsnq[Fc3+L(5,e8Z%q%fhCFJZ,SqHl7N]]^<_u5018Bq!G6m5dhE5<ii+Qt\TRFIG
%lZJHNZPIB\oFqdHYr]0=lNe@e3-jsh&h4I!dFouT't^[%2C0Nc:A&Do&^E0.YfN'E)g\^O&E)b^MKpn^-ttBL-u"WZ2P4FqS\3)1
%Fd1ml>06lV`9X:s"XOIeO2KrI.<W^Q3Zb>u9]aIhY,-j]C$V)k1RPXD14UDF$Jl.MKK&**&PkltL*kAM6Z[@Uq%SC'nh-up;1]<o
%W1n=h^=FkaCC#C6Bi.^cU\:Q-S,rQ%ekpk\CK]sajDqPAh1A<$]V5(W%f))JVN_<AMin;)Mir14Zh5$Lki5B@YG2MueIgRLfYP_q
%BL,4?*V$BeMcE'5HJ[77b&3@8[1:1`cK[0MKFB]^Y&t+--1HZG.lmemqA<\5bZH/c`iYEd#\W`X#4:JW?E^+<+4_&E/+UF*/LYB@
%.2i)i=;=Fa]!$7Q+4AitA@5C"*i*H?pr.E_d=hV`pil46^`g?VIu8J)Z=mo*]kD)<DDn+2(nJ=]l?/?LZPoig2n7;5T`lb4+^#r<
%PFNi"Lail2@L":%')'9ScF(bGc&jD7B"Q\IaHXIZHEX7SE:u$)4INHXRZ(H&bn87`;[fFb2gN)s;LDS>IFSUC?gSVn[FFZ]^+IN.
%LHK4I>dT1)kHZV;hg/d;>PCKd]^0jL+BAI]HEZOohrnQB=a=.l1tZ,V1r_IY:EbZ\hPBg*b4+)N%o2O7<ZS:j":-9;@Q,48%@!+"
%WhXMVP!$9T8[p<LIU_%O]1#H&%u[@h%d:U#,!aV4MV0[nZt("4=u%=mc)2CJ-ZAR%*MrQ#CH#.dn]kmV[%Jtd#!6!l`/LP&Kj@=h
%rd&_=Oqc]Uc23O;`?.Pk(7>e[6gka1!ZZV^0b7k3/If]9/WC@&k!fd5ah,2l7k$X'-,e937;-GXU*N#0]5P!1"@/K+_(#c*+4kPI
%+Nk3D&793gC`)ja[N\`P)g\^OOPf838pN+#Pr/9E3h#)uXeu_"+)fSR*G,#M7f_(og=Nq?AH=]bQs1=WLS[!!l^^DKpq3eS0)'&u
%f&kU=RU,@tA4kbh]iT:]E:bm(4IB991`0T,1e'Hn)_l"Rn+(cFV>.9\@,ETKOpjnPo+VqK/6ADU<p^ulpIO\`YBJdqBj0*M-m9/g
%C:>=,r,:f4U-j='O"'/+N7H<dh!/R5E&Je9(k(bfHCZ>V&`84**/]f-E-Fn/2'%[+nm*ShKA@:nGW$J3jP'HhcM#R*CSPCW\)A4.
%i^NIi%'C%S3Lgf/kXYDc.!?3Gc?DVZn@\?U;8]*$E(3(.2\&nA"MaJdf?ra/`j\5]LR,dpr=n.YYQn^KE,aX^,O,T+]^6CT[X(=U
%;;9%u_cqMXecmuF_,*+dTA\HePUm9O^&&CJdTC(`;e!SW5h?B>4-VOQEZ60W(\/u!PSgD6U!s_b7[5YnaF`]47+3th2R?fU)i4<O
%6l%:tYFtnF86fO`JG59)@G,%A?C`F\%,O*G*LF,jK3.nf6@,1JpS`\!$P5O32(8giOB1A=]VTlD`Dff1s5).K8Q".>$[Xr]6qBBp
%rPt!F,?=:IadW,*ht(17iHE0rIa(i8o*`R(cKpYalodA_qP(?m9KQci460u-d^O'Bh'e8l4Fb.JNC#aY;CTP;ZAhpl`:>8*8)No6
%Du!1qR_dr2#:LOfhh,H%af%!eql-=!U9q7LPVS0S8qE#DMZ3!6pYdJ=jKYS<8Rtr&hC7>2PMK9e>>[/%#P_:&A\086rQF-VN`7*M
%BQ>*DNSM'IZfUAQ+I<Ne>dHX2d*anC+&RhX)t\&=\rZH2jXN9?.l,?ThjaZqTNFl.PN8`0d%[@*W<elT9Yq6IZ%"iurEZl3$Q6K*
%WauB3Ef,M<E&Hmg'K>(nfI$[C1oUsV04H]1qIoHXHR8PGhZZc!o(=uEl9k01N1oHYZCM?)P2O]t0L&0U#ODTi-C2YA\WVB4n'#rC
%\CP$+RFNQt[q4WrA\U+^Yg&-Cb]ZG%dJ,1MW_]s\csa4C05MjbofLnn6eqL_8;4hMrC6L+^AFfR1(;8^jdVn1Z%`EH<p;fES'7G]
%a2aWaQ3e.cec0PXZ6/#ZlZruMa`G(,F$77PX,VhNq]tK5o4:VlbW?C`4gNiAm6pYn[\L%C@Gcf0Xck06$/@;TjYrBYIV(F4R>1O[
%3^bo=a[Yr+[eHm&./6K.(m;#q5P;0W30fAq3ia3f"-@9:?R%^Vj2`H6s)t48p_K)RT?b;4&r_g'nq1k.UK?1F/o1_p\:14LYd%h(
%Cc0Moh0CFI9H93B)7_6modY9kW#`dOE(24/LQ=#lo)W"U/osL`"r%q^Kf2dM4+H90?CQG[TS@gsJK=c07?a:V'J:Up_#$?lZk2Ia
%U?le;q<+qPAco&*,peHXeUW7FF[l\i-`pph$IX3b;LIR_.^o]<K$n%A?d7hF6tt4Knp&mN9[Jo&8iKS?gCF`fcL:58IDEp3MoG5b
%?#gr"BC,`o$@:d)QSOo6r>?UY^0*c]LRRP"6!J6=c^Ln>;L$oL-rk@:)EQCu[>"p;MX[.EJY+>SNFJs)(M>]NY5@IGcbbu4K6lVQ
%A:)%aE(24/ceOktp>0<RA_fOIi1qGh,-.l4aoNG)o^//3!sQ@S1m:d$0fg_Q;+'<YYHVs7[Ai1fDb4RoW\<>*7ILtNa>U&k&ibKL
%rKCJV2+=5(0>9C)3l&qWUA'9!-<E0fYb?#*%>>&_mN4m!qAP`H_Z]2,(ajR3@,NQi]s^/#K><[E41OCn'6chi%WMqV?#9eZ=#=C8
%i/(qlSC'pe6,!FV9m_<?6U>G_,dSh(;tODDn<GKD@Tj+OFAd@DDZobC="3)HVH6!0S"r[Z:@;`['D<#e;0YPT/,GL,8I[ar)J.b+
%h?t/36P]gSk!sAKs4$R#iP)H*g_%7pI/oL4:q[;D]Ieq.V=>RU2Euejq30]H7-R97L$@]R:Smqto*2lE["!K]nF=e#32;5FK7(St
%mPmuMhESN)+!(SHQd)2tK%_Ms;E1G+_NPoKV:T=%f#6)rnaBBUs6d%df9.(3mg]%VS;fH0FJJJoQH@5O#Z/<IOfX1):W!LslNu9j
%+TFY'84oUOeX[cEek'`fHZB#[Ldb/oP+p#='404cC!^*SWU`X='K#3LVY760&@m3[_eC&VcSspH0,Y;92GtQrBK-ISq2nXCqQVp5
%T,lH&13AE:Kb+l3L\$rn+L29L>K+59fUW88VH$&3HZ9KFnsS4Z3!Sj<cU]-Whka5>J:8$r-:jnmY\Z[`p(G#42'5d#%4>N]B9W!`
%lHmFAZ`;GuOK'7&5N^*j;N82ZaD05Y=9[e.OS>HQ,6RCNS8U>SD+O[#NngU,3;B9I),2Ckm<7jMk[9$kZ>!19gdon.GcJ*0ia,N<
%T]5&H4$TYaB#$$dPKORU*"W_,hU7>5`BYmgdNhI$VN)3BKYkn`n)2Kadh7`LE^C;7oQ_2deECF%BgC`Ujfpm<m0PrYK\SDs,)6K_
%1V\_#aB8!'DEEag!5H8b)ZkSj.I]Bt&Hr0A1l\<qVQ#du?\nuW$M+09TEI0X3$ZbZ+:j9*@KCTOi-O;h;BsG]Lj*/3O!AWaXiE00
%o)p3O_$t#N,QCQoOo!&Y>;dd<L=S:?R21L4RguS:H8$2&W@;(f>.(7;ed0Jn%89e*Gu>W&XLMq?Csie2p7lKl&5cT:rIflh'rEre
%G[ZL)J1ZZN$QdQd(JDGFGfj^NK:A2%<i8;e9R'jhQ?!58QkG:kHNW8uMPOPB?bk^^^iq)qPL!n4HY9D$+Wm8>)=1XUOb%fi9cp<(
%)4jCq0I5sL)+g?Yo>tf.9Ukpr\XcF7r]J#rG(Fi>g>>r<1dK,*lcPs0V[9U*7KYnHOj]?4pl"n`RSkU-'PiXm(l6je+W;'3nCRhi
%=u/X=%u?QcjqEbr%J9tubR.9:MKK@ag#S#.=:&;d1I@pt(=3ilW2K$a3h@"`i#\YEm_"32H$dt*X=N!4AJK?l+PTY.jpO/0UumFf
%o(bt(:K^_:%F;o`k'AJ_J%W9$nkn(($M%'LnTG`a*i['Pm=HA`qIDW,jp`tE>)_I[[^55NS#7g>\"$M0WO,,KGsg-NQPHWYD8r0A
%[lE^n$&Cf5Y>ac;Zl!9:,,^?[#%d&Yma2j**8rg8@iZXGOE/5Q-gIC)b/S!hLK)A4YPAd!n49Ec\PYo<X)kH-0"p[Ym*1M4qF:si
%gtY]eGj/<hRYgmN'GE1,a30"[-V,")^diU4,\T%7!0F2q%)OAXPbOW\h$#)deJm!]fo4F]lsHuYEl&Lq$6.X@4b6%!$'EfRq$9LK
%d33>9kn$^^N-B5R:qG8`.=qI!K.%u=1[/1+3,i[KENM2'pp9;(J6o7kiXrg;1ufkX.04/Rg09,>hs[6';^F@)6LEKs-#X@V6FATM
%;8k5FZeg524%fs"dc\a\[(f<n3^V=#^E)&Hdp@09p:QSJLiRK"PM3uW@W/4#K?(O5LK\Ri$MQ(o=.H<$EM$Q4(HSEUO=J463momh
%k3VP]FjMJ"ZMgoc)V3;`@6p7mVY:Aa$^acJKeu0g!G&VG[!<Na'S=^iR9"9>YkLjXdsq>5;,$^?ff_dUW2+8!@@(9=brBSuBbKqX
%>Kn*7&aI:"&bO*G%ZT?2d7;Y<"uSYN$UKfefRmfu\h@`KoapeH*u*!t6fGml+3t-:-@+QsTU$B>i04(TkNL@7"5RbghOoFboYC2h
%(Ch%ZE9Kt#/_<Lm(NYST_0=]Cf)ml=,1ECllCNS8f*A>%:^raaKh?N>,T_i&bqW6B!q'Ei!VZc!U]=%36IYiHSB\7O($R>W<19r&
%Zo%6<07?_TMs`)&5GTuF#b6LQrO]*&$'R]m9Xps6jFLON$I]@$(thr@:ChGm-o2Np7Dt=WC3O*4%JN5!fU.9lq3bCqLAZWk<I9eb
%^46A)6>hN?;F$C!$l=eWY1!,G:khJeV3pMW:d9j#IO;D!\IIG6p;4G1`9E-88f;LK(?F+!2iLI>oa<du;!/t<D^@\<MP0ke6DoaX
%W9:+.lAN,G;9tNF-p)^,-l4!a5nmId\>9A)0#sHTO%\>WRnUnQK@FF4YT4%*8!a?7]iNPh_Aq@W,^-T`pu[L6Od-e:S#mUHn7;XN
%oSil5P-paRa!IZ?#hKif%<l?^<9$$NO1?i:SU!^Xj<l\llNuQ^<0[W"^l6?A,j/1uGWLLE]p";5#\V:t#=31uC:#!E+64fD>hmZ$
%p3qsQoi0pMN;>lkj)42%@X&[Aat5oe8j1t*ctZ4P"MAH1'$^@&H`];s&0`CN)Ta[)OUX_2+J:s9#&G2i5uR@knX,Y(+H"QU9Mq_1
%"DP?aEAYd-W9[t?:G.0N`\*IsY>gQpZZLAK^mJef)a-^?8t2OY)G63B4qZKF1_<!,E7*bcq=tT&g&-pa9Q1e%Gl`2g0C7375n\Db
%DT[m,2bMRmL[GeB[V_295Z,7NkOdNS2TICIm<(Jm'O_A<N'r;?/W(K=Ub8;#RO0+8hsCub_/%Me/@p`A<]N,&'TWE[;6edIr9fBA
%#rHqt2?@'5d#RW6O.JF&@`p0H3p<N0%tjD:N;RTCp5?UCBfY1?F-,J[#0^W*it*kXduIG#OX-KD<g,i%`5b6:<Xd+QJP$;tQdJYu
%HPb:L/&qo;2>2m/:S%R?4=r\c/sQPaTl@J=Mr5l`Tp(7DW+*#k1rp!L=1N/l9d]UELYG/!MF#,pnUq'S#u1###pP.ROojs,ae<'G
%1;B;V_PJ$Rq&9G;@PUF`!e-cr#$BIGG7o!kP'%[D'5cSgJK;kNo/0FGXRF",e(Db`Tl;sn6&#[J<t2\2;:1o?^Pp5CR'gBVhoIHA
%$?E=,_)W]@NRIcj;0qO`W)kSR'O^>D'HK"G`2ffk?*7^mE<(?MQ4=Y4j;NWRG,i,Y8Yk!h;'gNeQ[-AnnrqJ91ed(lf0/Wbl+$k&
%DNW#nKTKkc;%3<`][jKabqQgX:DS?BKg\hW/3XQiEBD'C#p5oVT.ts;:bsa0"6/S2k)u8u(?%inbe2ehrNsI<\V#8+bpT$97IMM8
%Qg-sh>2`_AY-GrP";qA0J^E9/-?@_-CtD=9"aR,g=.CF7e(,bMj9Xo2%kJ95U3EIFke<e`(Q$goU0f)^<m2SKiS*'QRGRW!7L&^K
%UTEm]'"i=^Ol8^3@-.G@+H$aJ=uEdsL`!a_`.6(ZR5'55E(':h'<>Xuj^+C4BeN$GpCZ0s:h41:X'?)EF&WRSF&5Ps'K"V]njhZo
%cQr2ek?p6TnVXNGIWT2O%D`,:>\Z8<FC3D/PO/a3F4=$rE!&Bk6&G8sn'El%/:7tMiG_UQ8"[XW5=hkeAXdMK)PUTR3C1R>Cjl^T
%LLg^G6[W8ZTi/9]YWP1oh.V6E5)&*\JrL7$Yr,'2LC6,)ZGDg2aN+bjs+b\pKVmbA_-aZK)=-Ll#S,s(U6o-k4lI*@W3@FWR6tFm
%5)>+4Esij$=HO]pIqm'R[W2)-@(TO&AIE(cE&fQXndGa"+]%Z*baQJ&egq,5`KGAD2`a((^N]S+.gWo0K,mWH^i.UUc<q@$iO>'\
%n=uW9BYHFS(kKC]NMKKIJle%>/7\kN$g@)Rf&OENq'e:m?[;&%q[H!2)k%u>.o8&S<,^-37A6+6Rn?',*1[crN"[Z_--8F3W9N"h
%/(K1:ke<c>rZ\O-BDXK$[_@3KHZRTL#CV+]l(j/#q$)j$aD_;Mc*g7Q2r>mh^"]r3KC^^+PD,PNYqKSMWJVQ-b;PVlZ3!T8,."??
%7kgDC[P_tMO00,O3?L@5-Z58Pr%k^N8c>j0hcCc*oj$?f92<acTPmC\:$h#P"@,b7gE:g_&,8eI#/igM7r_jMeiou3(e8n,V!h$*
%Q,kMurY>+'/%BH9'8l`2.FMC\#Zag<8=k"S"53ElB+21*8T\LC\<s7$*DS3PAU!gHG'2G=V`-;)F,>I"G@"YU\/#;F5kc_>_&EIJ
%kt#u_6_&H:VoB;B+@AmR?c4$>*]YJT`&%JD1+u[-(##t'3'>]lT_Du>gBr]:Hf%93@AoPB54h)Cmq_?7F3D5Ti-#JECF[<7p#^t!
%:oI&>9,Q=bOV\R*bb77pMW+gDRROJO;'T$[#"1M=(FWoS\eB[WN"GETU:GO<IXPA@UJjbAbt!%Y74>MLp-*?$W6N?40Q>WDHr\(^
%,e<o/#k[KjY"gJ?1VCp=]cqWP"i[`\>>5<bCZWg_?&XC4YOX3W`KBk#>_Jn_8RWoET%dd<k,i&YANi\unkSWin)f'2?-%%"NT?LJ
%'?q9bk^Psf$lZ^AZ/,sR^Jp9.+@Sq4^V2>lRcSYp5Y9C^]*fNFo\QE*O>LOeJ?+TebT6%3]='&(]bf_nf^l"poDJKET)7'M)&ZhR
%D`'Lu^=HCF+DtU!,RjVQ_1+uhO8%^[2nVGKkeLK\&hfUh4f!Zfdu[4G/[Qn"/4c.oK",3O3"LY(\?Ie:Fm#TKa5ip=$Y(2VLSJs*
%ZlRsDoHthfgs76hYpMo[3[0hJCr/.t2Zu4Y)pLb'mF9]%M'fW!3UABXnIP"(!<J6M;kn0]6D5P2FQ`B%Ru.>W/s?'l+5+YG^n8o.
%^<]GG>Ss>AA6a`C'-2Gl>2L8>ee'PD7e?S;k-_'>(F2QpO5s#uq%`"QOhp&[Xko2)Z#E>&q>`F`.C3a&T@(<;AR`SjSdj%T--P0@
%'K_jFY\"9u-):Ef7eBTMV0k9&j7j^f/t<>-Rn<,?b02j6h/%QJReE(cqUbn%Ynu)=nAk"4b7@CcDh!#d<q6fX%KE'\I?:fS0B&K1
%=A]JEb6>'\\bdEcB2E4bLMRNIgCuZgjT&jhecu(uJ9X,o`EWWG"^s=Mg!p270-IW*dYnT_;@GJ;:CJ2"aMX1dY_'FqBYP6<I9688
%&`(dop.QdjIrP<MGhJR`;#,W8n8(h3X=-\"7KcaWKnFaR2;!(oP/BRb%E'<d"3U=/7#pHC1l!(LqN2)<C%+eQ_M$>M'F%"#>1/DT
%7j<md+"WHn>']H_;]K)5c%dG(7jb%ege[&,DKLP.@1SL+b"4Tj()>C5$DQJ`GG6Vi10[a4YV/BsQ&hXr_4T#/rdSms#2C0VaVk['
%SNBuKfH33MW[R)db5?'j[,4ZY?@+'0ThBV^O%KqJ%"0!Z**pp5\GC.YhcHb\gYp=Y;7uISD)*O+VfXTS4+-,0lDV?^9"Y*Z'CT`u
%"oO?Y?kV,<W'4R2Ghb-<EXglp4uHYQR4kbGZI/XkSHOBDRRBF/SJZXiX<1Z.*1n#.#6?bi7I5]erZh(@TYu$^"1lZ"jQ(IteYO-f
%[B1CN9saZ4"I'Lp[Y"AY(i,AE8fg!EEk#71'Y;IocrjDVmh"3^hL#onI,cWSql0LbWD_*X^DhlEh!K#4fnE_I>u"iBa5P:O(_HuF
%i]%+[%d(Q\/HR,>nHYOB*J/n]$!po=b7>hW)=)X5g4]+)g/_).i/a'D.QP4O_%$;>DMLC`bJN07h<;eQG3J>$^/KstF+R(F#Ea1O
%'DF=E'"rO1:eM8,$;97nikC,-a_cM&+]8MuQ/%%o9J)\Ep0l$N4F@PJA'#:k*=U48g<M.X6[pa(lL4^Le,?t&hj_09;'t&`>i&^Y
%4h'sC;eu$WKBQ-_qqEmG$?YZIW.EilDs");`$UQ.=*.*(W!Te:?$-TjQ-/K&D+*!i]nk#s,cN``0[:i<gF@g[*U/#&RK)rTmM0[*
%,q%T_fhI9I9&eqT)bbkM%>kQ;RM.%FA0!&1<8(qi&1mMF0lUOur#m%.D4rj"r@3RfG7`C&87Z.B+mauc(]2SinR^S8DZ"JI@?<Qo
%p>Sg83?]6<e<8I\(;NhiZ:[%b#=b$n9&!eS.@c%W>N,u.JRX,MQ_Y"sXB3p3ZhIC1Xpl5bqZS@+A?p_ikW,UUoFF7rc0m&:Lq.3Y
%#@jF45:#6&Jqe48D/c'(/thh&@i:74$="TjcmPW0?08uDrKOp0HV\!%>W<td*mVmn-d6JsSMqs@"4uRbd4cfC(7_ao)cI7nD,\=K
%@@m!tj94IKph2qLBb:SK]PWWF`6<fOh`*B9l0[@#a'0s%RWn_*8:ici"/8*4S`ec)'=KXVmkgiEf0pJ%pa50JB]CpP)>QK[:!WEG
%dA5lOH1T"qK/jkGTfJV?#^l/Kl:Xg8N6i$MZ=F3:/[2o!V`^pd+jo$,&q'lY/-Ra`?AR5Ui\F;YfZ>"%^WUIAM?!s<+&6iI<gT,u
%$A+Ru4oLf56`5(nm.IqIF2BRB<f'Qc!Aeg)Tc]a@rQ#\\`O0IgWC/]%"3hAH(1^Xk9uoqKU,ZXM]NK92Tio+P!4SHAacB+#3h^%Z
%hj[Zk>sh/;F9<\'0-V+n]i,UkINRX(6ndF5-o/;tI'_m9V%,H]>n!-%E&X_^M!/+\%!)2!#d+)7)5NGqK(X`Bk]/Jt&.%S!_@"kh
%";.11ju98/UQSDBR-t8e&@rH_YPQ^F"G^mI0![qK%_iq*W:1_h&Bd1f:0;rN-O`e$6-_al?#D`#eDH'""$=StK$3<CB,0D(D6VWA
%2Z#1A*BX-42>VpC!sR<>3_a[]S5\(3*K'PFb.4ma`<:noS9,=p'3he-$X*XNdNV7EY,*p<H9Z!&dY33<94d/,*L*C^Z8n9WY!?nN
%2'/Ha74&G@RJ+_b)t@)5:dIDc$mu8]hYZ*1(>T-G)t`RO*.^SEI=L9%&_dW(&s\m^)2B"9!3c@jm)<$?Wg<4k:h;/l2'+1?!b%i@
%MpafOLibXRKVA,2d`PmX)#;ZI8NH(]kQF*d+6Y>Uj$YMp2$0MIaJj[KaP_EnS2'!/O(3(.5*>Ua=nhCM\KB#W!\<i2]+DD$"=b:0
%f[Ne6>suFX8b#G<2]fJS2[]0Uf0nZ&r\"/umsk>sroq23I/WPcJ04diduRl8iTmCkq<?)Sn%\biQV[YOjn@s%TCMS-s%<=Wp>aaX
%^\liY^4*Wko$;g^:EX=-)Z9*Bn,MmdhgbCX6p-e_~>
%AI9_PrivateDataEnd
